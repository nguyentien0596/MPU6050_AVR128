
Code_MPU6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00003596  0000362a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  0080010a  0080010a  00003634  2**0
                  ALLOC
  3 .stab         00003a68  00000000  00000000  00003634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b3f  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c8  00000000  00000000  00007be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002819  00000000  00000000  00007da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8e  00000000  00000000  0000a5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a1  00000000  00000000  0000b14f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  0000c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a64  00000000  00000000  0000d02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036c4  00000000  00000000  0000da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00011154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__ctors_end>
       4:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
       8:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
       c:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__vector_3>
      10:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      14:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      18:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      1c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      20:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      24:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      28:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      2c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      30:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      34:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      38:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      3c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      40:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      44:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      48:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__vector_18>
      4c:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__vector_19>
      50:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      54:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      58:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      5c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      60:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      64:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      68:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      6c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      70:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      74:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      78:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_30>
      7c:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__vector_31>
      80:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      84:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      88:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__bad_interrupt>
      8c:	03 6e       	ori	r16, 0xE3	; 227
      8e:	db 36       	cpi	r29, 0x6B	; 107
      90:	3d 9a       	sbi	0x07, 5	; 7
      92:	99 99       	sbic	0x13, 1	; 19
      94:	99 3d       	cpi	r25, 0xD9	; 217
      96:	ab aa       	sts	0x9b, r26
      98:	aa 2a       	or	r10, r26
      9a:	3e 00       	.word	0x003e	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	sts	0x9b, r22
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 07       	cpc	r19, r31
      ce:	2c 7a       	andi	r18, 0xAC	; 172
      d0:	a5 ba       	out	0x15, r10	; 21
      d2:	6c c5       	rjmp	.+2776   	; 0xbac <i2c_start_wait+0x68>
      d4:	90 da       	rcall	.-2784   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
      d6:	3b 93       	.word	0x933b	; ????
      d8:	65 fc       	sbrc	r6, 5
      da:	8b bc       	out	0x2b, r8	; 43
      dc:	53 f8       	bld	r5, 3
      de:	10 fd       	sbrc	r17, 0
      e0:	3c 56       	subi	r19, 0x6C	; 108
      e2:	92 83       	std	Z+2, r25	; 0x02
      e4:	4d bd       	out	0x2d, r20	; 45
      e6:	87 9d       	mul	r24, r7
      e8:	3a b6       	in	r3, 0x3a	; 58
      ea:	3d cb       	rjmp	.-2438   	; 0xfffff766 <__eeprom_end+0xff7ef766>
      ec:	c9 bf       	out	0x39, r28	; 57
      ee:	5b be       	out	0x3b, r5	; 59
      f0:	73 da       	rcall	.-2842   	; 0xfffff5d8 <__eeprom_end+0xff7ef5d8>
      f2:	0f c9       	rjmp	.-3554   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      f4:	3f 01       	movw	r6, r30

000000f5 <mpu6050_dmpUpdates>:
      f5:	01 b2 02 ff ff 01 90 04 09 23 a1 35 01 6a 02 06     .........#.5.j..
     105:	00 01 60 08 00 00 00 00 00 00 00 00 00 60 04 40     ..`..........`.@
     115:	00 00 00 01 62 02 00 00 00 60 04 00 40 00 00        ....b....`..@..

00000124 <mpu6050_dmpConfig>:
     124:	03 7b 03 4c cd 6c 03 ab 03 36 56 76 00 68 04 02     .{.L.l...6Vv.h..
     134:	cb 47 a2 02 18 04 00 05 8b c1 01 0c 04 00 00 00     .G..............
     144:	00 03 7f 06 0c c9 2c 97 97 97 03 89 03 26 46 66     ......,......&Ff
     154:	00 6c 02 20 00 02 40 04 00 00 00 00 02 44 04 00     .l. ..@......D..
     164:	00 00 00 02 48 04 00 00 00 00 02 4c 04 00 00 00     ....H......L....
     174:	00 02 50 04 00 00 00 00 02 54 04 00 00 00 00 02     ..P......T......
     184:	58 04 00 00 00 00 02 5c 04 00 00 00 00 02 bc 04     X......\........
     194:	00 00 00 00 01 ec 04 00 00 40 00 03 7f 06 0c c9     .........@......
     1a4:	2c 97 97 97 04 02 03 0d 35 5d 04 09 04 87 2d 35     ,.......5]....-5
     1b4:	3d 00 a3 01 00 00 00 00 01 07 86 01 fe 07 41 05     =.............A.
     1c4:	f1 20 28 30 38 07 7e 01 30 07 46 01 9a 07 47 04     . (08.~.0.F...G.
     1d4:	f1 28 30 38 07 6c 04 f1 28 30 38 02 16 02 00 09     .(08.l..(08.....

000001e4 <mpu6050_dmpMemory>:
     1e4:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     1f4:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     204:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     214:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     224:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     234:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     244:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     254:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     264:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     274:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     284:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     294:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     2a4:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     2b4:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     2c4:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     2d4:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     2e4:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     2f4:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     304:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     314:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     324:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     334:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
     344:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
	...
     388:	03 3f 68 b6 79 35 28 bc c6 7e d1 6c 80 00 00 00     .?h.y5(..~.l....
     398:	40 00 00 00 00 00 b2 6a 00 00 00 00 00 00 00 00     @......j........
     3a8:	00 00 00 00 00 00 3f f0 00 00 00 30 00 00 00 00     ......?....0....
	...
     3d4:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     3e4:	00 00 00 00 00 65 00 54 ff ef 00 00 00 00 00 00     .....e.T........
     3f4:	00 00 01 00 00 44 00 00 00 00 0c 00 00 00 01 00     .....D..........
     404:	00 00 00 00 00 65 00 00 00 54 00 00 ff ef 00 00     .....e...T......
	...
     424:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     434:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     444:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     474:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a0:	40 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     @...............
	...
     4e4:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
     4f4:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
     504:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
     514:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
     524:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
     534:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
     544:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
     554:	f1 a9 df df df aa df df df f2 aa c5 cd c7 a9 0c     ................
     564:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
     574:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
     584:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
     594:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
     5a4:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
     5b4:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
     5c4:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
     5d4:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
     5e4:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
     5f4:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
     604:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
     614:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
     624:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
     634:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
     644:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
     654:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
     664:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
     674:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
     684:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     694:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
     6a4:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     6b4:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
     6c4:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
     6d4:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
     6e4:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
     6f4:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
     704:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
     714:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
     724:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
     734:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
     744:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
     754:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
     764:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
     774:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
     784:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
     794:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
     7a4:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
     7b4:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
     7c4:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
     7d4:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
     7e4:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
     7f4:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
     804:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
     814:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
     824:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
     834:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
     844:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
     854:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
     864:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
     874:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
     884:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
     894:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
     8a4:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
     8b4:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
     8c4:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
     8d4:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
     8e4:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
     8f4:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
     904:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
     914:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
     924:	dd f1 a3 a3 a3 a3 95 f1 a3 a3 a3 9d f1 a3 a3 a3     ................
     934:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
     944:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 a3 a3 a3     ................
     954:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 a3 dc     ................
     964:	b9 a7 f1 26 26 26 d8 d8 ff 00 40 7a 10 f3 5a 00     ...&&&....@z..Z.
     974:	a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17     .rN..........vH.
     984:	00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5     ....T.....;.....
     994:	05 00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0     .........@B.....
     9a4:	86 01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00     ......'.........
     9b4:	00 64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00     .d..............
     9c4:	00 00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae     ...,v...gO.#....
     9d4:	59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96     Y.......S.:.Q.v.
     9e4:	e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef     ....&....b.@|o..
     9f4:	bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c     ...@...o....Z*.\
     a04:	93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20     .kl.gm......G.. 
     a14:	e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84     ..........5w....
     a24:	1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33     .... N......3333
     a34:	0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16     ..n...A..!..;.U.
     a44:	cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4     .......K8..|....
     a54:	bb e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1     ..$ 2.r^"....$..
     a64:	e5 3d 27 00                                         .='.

00000a68 <__ctors_end>:
     a68:	11 24       	eor	r1, r1
     a6a:	1f be       	out	0x3f, r1	; 63
     a6c:	cf ef       	ldi	r28, 0xFF	; 255
     a6e:	d0 e1       	ldi	r29, 0x10	; 16
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	cd bf       	out	0x3d, r28	; 61

00000a74 <__do_copy_data>:
     a74:	11 e0       	ldi	r17, 0x01	; 1
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	b1 e0       	ldi	r27, 0x01	; 1
     a7a:	e6 e9       	ldi	r30, 0x96	; 150
     a7c:	f5 e3       	ldi	r31, 0x35	; 53
     a7e:	00 e0       	ldi	r16, 0x00	; 0
     a80:	0b bf       	out	0x3b, r16	; 59
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <__do_copy_data+0x14>
     a84:	07 90       	elpm	r0, Z+
     a86:	0d 92       	st	X+, r0
     a88:	aa 30       	cpi	r26, 0x0A	; 10
     a8a:	b1 07       	cpc	r27, r17
     a8c:	d9 f7       	brne	.-10     	; 0xa84 <__do_copy_data+0x10>

00000a8e <__do_clear_bss>:
     a8e:	11 e0       	ldi	r17, 0x01	; 1
     a90:	aa e0       	ldi	r26, 0x0A	; 10
     a92:	b1 e0       	ldi	r27, 0x01	; 1
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <.do_clear_bss_start>

00000a96 <.do_clear_bss_loop>:
     a96:	1d 92       	st	X+, r1

00000a98 <.do_clear_bss_start>:
     a98:	ac 3e       	cpi	r26, 0xEC	; 236
     a9a:	b1 07       	cpc	r27, r17
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <.do_clear_bss_loop>
     a9e:	0e 94 4b 06 	call	0xc96	; 0xc96 <main>
     aa2:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <_exit>

00000aa6 <__bad_interrupt>:
     aa6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000aaa <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     aaa:	10 92 71 00 	sts	0x0071, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     aae:	88 e4       	ldi	r24, 0x48	; 72
     ab0:	80 93 70 00 	sts	0x0070, r24

}/* i2c_init */
     ab4:	08 95       	ret

00000ab6 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     ab6:	94 ea       	ldi	r25, 0xA4	; 164
     ab8:	90 93 74 00 	sts	0x0074, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     abc:	4f ef       	ldi	r20, 0xFF	; 255
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     ac4:	e4 e7       	ldi	r30, 0x74	; 116
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	90 81       	ld	r25, Z
     aca:	99 23       	and	r25, r25
     acc:	34 f0       	brlt	.+12     	; 0xada <i2c_start+0x24>
     ace:	41 50       	subi	r20, 0x01	; 1
     ad0:	51 09       	sbc	r21, r1
     ad2:	61 09       	sbc	r22, r1
     ad4:	71 09       	sbc	r23, r1
     ad6:	c0 f7       	brcc	.-16     	; 0xac8 <i2c_start+0x12>
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <i2c_start+0x2e>
	if(i2c_timer == 0)
     ada:	41 15       	cp	r20, r1
     adc:	51 05       	cpc	r21, r1
     ade:	61 05       	cpc	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	41 f1       	breq	.+80     	; 0xb34 <i2c_start+0x7e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     ae4:	90 91 71 00 	lds	r25, 0x0071
     ae8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     aea:	98 30       	cpi	r25, 0x08	; 8
     aec:	11 f0       	breq	.+4      	; 0xaf2 <i2c_start+0x3c>
     aee:	90 31       	cpi	r25, 0x10	; 16
     af0:	19 f5       	brne	.+70     	; 0xb38 <i2c_start+0x82>

	// send device address
	TWDR = address;
     af2:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     af6:	84 e8       	ldi	r24, 0x84	; 132
     af8:	80 93 74 00 	sts	0x0074, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b04:	e4 e7       	ldi	r30, 0x74	; 116
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	20 81       	ld	r18, Z
     b0a:	22 23       	and	r18, r18
     b0c:	2c f0       	brlt	.+10     	; 0xb18 <i2c_start+0x62>
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	a1 09       	sbc	r26, r1
     b12:	b1 09       	sbc	r27, r1
     b14:	c8 f7       	brcc	.-14     	; 0xb08 <i2c_start+0x52>
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <i2c_start+0x6a>
	if(i2c_timer == 0)
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	71 f0       	breq	.+28     	; 0xb3c <i2c_start+0x86>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     b20:	90 91 71 00 	lds	r25, 0x0071
     b24:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     b26:	98 31       	cpi	r25, 0x18	; 24
     b28:	59 f0       	breq	.+22     	; 0xb40 <i2c_start+0x8a>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 34       	cpi	r25, 0x40	; 64
     b2e:	49 f4       	brne	.+18     	; 0xb42 <i2c_start+0x8c>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     b40:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     b42:	08 95       	ret

00000b44 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b4a:	e4 e7       	ldi	r30, 0x74	; 116
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	94 ea       	ldi	r25, 0xA4	; 164
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	50 e0       	ldi	r21, 0x00	; 0

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b54:	a1 e7       	ldi	r26, 0x71	; 113
     b56:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     b58:	c3 e7       	ldi	r28, 0x73	; 115
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     b5c:	64 e8       	ldi	r22, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b5e:	74 e9       	ldi	r23, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b60:	90 83       	st	Z, r25
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b62:	9a 01       	movw	r18, r20
     b64:	10 81       	ld	r17, Z
     b66:	11 23       	and	r17, r17
     b68:	34 f0       	brlt	.+12     	; 0xb76 <i2c_start_wait+0x32>
     b6a:	2f 5f       	subi	r18, 0xFF	; 255
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	11 e0       	ldi	r17, 0x01	; 1
     b70:	20 30       	cpi	r18, 0x00	; 0
     b72:	31 07       	cpc	r19, r17
     b74:	b9 f7       	brne	.-18     	; 0xb64 <i2c_start_wait+0x20>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b76:	2c 91       	ld	r18, X
     b78:	28 7f       	andi	r18, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     b7a:	28 30       	cpi	r18, 0x08	; 8
     b7c:	11 f0       	breq	.+4      	; 0xb82 <i2c_start_wait+0x3e>
     b7e:	20 31       	cpi	r18, 0x10	; 16
     b80:	79 f7       	brne	.-34     	; 0xb60 <i2c_start_wait+0x1c>
    
    	// send device address
    	TWDR = address;
     b82:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     b84:	60 83       	st	Z, r22
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b86:	9a 01       	movw	r18, r20
     b88:	10 81       	ld	r17, Z
     b8a:	11 23       	and	r17, r17
     b8c:	34 f0       	brlt	.+12     	; 0xb9a <i2c_start_wait+0x56>
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	11 e0       	ldi	r17, 0x01	; 1
     b94:	20 30       	cpi	r18, 0x00	; 0
     b96:	31 07       	cpc	r19, r17
     b98:	b9 f7       	brne	.-18     	; 0xb88 <i2c_start_wait+0x44>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b9a:	2c 91       	ld	r18, X
     b9c:	28 7f       	andi	r18, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     b9e:	20 32       	cpi	r18, 0x20	; 32
     ba0:	11 f0       	breq	.+4      	; 0xba6 <i2c_start_wait+0x62>
     ba2:	28 35       	cpi	r18, 0x58	; 88
     ba4:	61 f4       	brne	.+24     	; 0xbbe <i2c_start_wait+0x7a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ba6:	70 83       	st	Z, r23
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
     ba8:	9a 01       	movw	r18, r20
     baa:	10 81       	ld	r17, Z
     bac:	14 ff       	sbrs	r17, 4
     bae:	d8 cf       	rjmp	.-80     	; 0xb60 <i2c_start_wait+0x1c>
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	11 e0       	ldi	r17, 0x01	; 1
     bb6:	20 30       	cpi	r18, 0x00	; 0
     bb8:	31 07       	cpc	r19, r17
     bba:	b9 f7       	brne	.-18     	; 0xbaa <i2c_start_wait+0x66>
     bbc:	d1 cf       	rjmp	.-94     	; 0xb60 <i2c_start_wait+0x1c>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	08 95       	ret

00000bc6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     bc6:	0e 94 5b 05 	call	0xab6	; 0xab6 <i2c_start>

}/* i2c_rep_start */
     bca:	08 95       	ret

00000bcc <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     bcc:	84 e9       	ldi	r24, 0x94	; 148
     bce:	80 93 74 00 	sts	0x0074, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	e4 e7       	ldi	r30, 0x74	; 116
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	20 81       	ld	r18, Z
     bdc:	24 ff       	sbrs	r18, 4
     bde:	05 c0       	rjmp	.+10     	; 0xbea <i2c_stop+0x1e>
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	80 30       	cpi	r24, 0x00	; 0
     be6:	92 07       	cpc	r25, r18
     be8:	c1 f7       	brne	.-16     	; 0xbda <i2c_stop+0xe>
     bea:	08 95       	ret

00000bec <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     bec:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     bf0:	84 e8       	ldi	r24, 0x84	; 132
     bf2:	80 93 74 00 	sts	0x0074, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     bfe:	e4 e7       	ldi	r30, 0x74	; 116
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	20 81       	ld	r18, Z
     c04:	22 23       	and	r18, r18
     c06:	2c f0       	brlt	.+10     	; 0xc12 <i2c_write+0x26>
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	a1 09       	sbc	r26, r1
     c0c:	b1 09       	sbc	r27, r1
     c0e:	c8 f7       	brcc	.-14     	; 0xc02 <i2c_write+0x16>
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <i2c_write+0x2e>
	if(i2c_timer == 0)
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	a1 05       	cpc	r26, r1
     c16:	b1 05       	cpc	r27, r1
     c18:	41 f0       	breq	.+16     	; 0xc2a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     c1a:	90 91 71 00 	lds	r25, 0x0071
     c1e:	98 7f       	andi	r25, 0xF8	; 248

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	98 32       	cpi	r25, 0x28	; 40
     c24:	19 f4       	brne	.+6      	; 0xc2c <i2c_write+0x40>
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	08 95       	ret
     c2a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     c2c:	08 95       	ret

00000c2e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     c2e:	84 ec       	ldi	r24, 0xC4	; 196
     c30:	80 93 74 00 	sts	0x0074, r24
	i2c_timer = I2C_TIMER_DELAY;
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     c3c:	e4 e7       	ldi	r30, 0x74	; 116
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	20 81       	ld	r18, Z
     c42:	22 23       	and	r18, r18
     c44:	2c f0       	brlt	.+10     	; 0xc50 <i2c_readAck+0x22>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	c8 f7       	brcc	.-14     	; 0xc40 <i2c_readAck+0x12>
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	19 f0       	breq	.+6      	; 0xc5e <i2c_readAck+0x30>
		return 0;

    return TWDR;
     c58:	80 91 73 00 	lds	r24, 0x0073
     c5c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c5e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     c60:	08 95       	ret

00000c62 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     c62:	84 e8       	ldi	r24, 0x84	; 132
     c64:	80 93 74 00 	sts	0x0074, r24
	i2c_timer = I2C_TIMER_DELAY;
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     c70:	e4 e7       	ldi	r30, 0x74	; 116
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	20 81       	ld	r18, Z
     c76:	22 23       	and	r18, r18
     c78:	2c f0       	brlt	.+10     	; 0xc84 <i2c_readNak+0x22>
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	a1 09       	sbc	r26, r1
     c7e:	b1 09       	sbc	r27, r1
     c80:	c8 f7       	brcc	.-14     	; 0xc74 <i2c_readNak+0x12>
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	a1 05       	cpc	r26, r1
     c88:	b1 05       	cpc	r27, r1
     c8a:	19 f0       	breq	.+6      	; 0xc92 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     c8c:	80 91 73 00 	lds	r24, 0x0073
     c90:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c92:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     c94:	08 95       	ret

00000c96 <main>:
#include "mpu6050/mpu6050.h"

#define UART_BAUD_RATE 56000//9600
#include "uart/uart.h"

int main(void) {
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	ca 54       	subi	r28, 0x4A	; 74
     ca0:	d0 40       	sbci	r29, 0x00	; 0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
    double gyds = 0;
    double gzds = 0;
	#endif

	#if MPU6050_GETATTITUDE == 1 || MPU6050_GETATTITUDE == 2
    int16_t ax = 0;
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	19 82       	std	Y+1, r1	; 0x01
    int16_t ay = 0;
     cb0:	1c 82       	std	Y+4, r1	; 0x04
     cb2:	1b 82       	std	Y+3, r1	; 0x03
    int16_t az = 0;
     cb4:	1e 82       	std	Y+6, r1	; 0x06
     cb6:	1d 82       	std	Y+5, r1	; 0x05
    int16_t gx = 0;
     cb8:	18 86       	std	Y+8, r1	; 0x08
     cba:	1f 82       	std	Y+7, r1	; 0x07
    int16_t gy = 0;
     cbc:	1a 86       	std	Y+10, r1	; 0x0a
     cbe:	19 86       	std	Y+9, r1	; 0x09
    int16_t gz = 0;
     cc0:	1c 86       	std	Y+12, r1	; 0x0c
     cc2:	1b 86       	std	Y+11, r1	; 0x0b
	double axg = 0;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	dc 01       	movw	r26, r24
     cca:	8d 87       	std	Y+13, r24	; 0x0d
     ccc:	9e 87       	std	Y+14, r25	; 0x0e
     cce:	af 87       	std	Y+15, r26	; 0x0f
     cd0:	b8 8b       	std	Y+16, r27	; 0x10
	double ayg = 0;
     cd2:	89 8b       	std	Y+17, r24	; 0x11
     cd4:	9a 8b       	std	Y+18, r25	; 0x12
     cd6:	ab 8b       	std	Y+19, r26	; 0x13
     cd8:	bc 8b       	std	Y+20, r27	; 0x14
	double azg = 0;
     cda:	8d 8b       	std	Y+21, r24	; 0x15
     cdc:	9e 8b       	std	Y+22, r25	; 0x16
     cde:	af 8b       	std	Y+23, r26	; 0x17
     ce0:	b8 8f       	std	Y+24, r27	; 0x18
	double gxds = 0;
     ce2:	89 8f       	std	Y+25, r24	; 0x19
     ce4:	9a 8f       	std	Y+26, r25	; 0x1a
     ce6:	ab 8f       	std	Y+27, r26	; 0x1b
     ce8:	bc 8f       	std	Y+28, r27	; 0x1c
	double gyds = 0;
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
     cec:	9e 8f       	std	Y+30, r25	; 0x1e
     cee:	af 8f       	std	Y+31, r26	; 0x1f
     cf0:	b8 a3       	lds	r27, 0x58
	double gzds = 0;
     cf2:	89 a3       	lds	r24, 0x59
     cf4:	9a a3       	lds	r25, 0x5a
     cf6:	ab a3       	lds	r26, 0x5b
     cf8:	bc a3       	lds	r27, 0x5c
	long *ptr = 0;
    double qw = 1.0f;
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	60 e8       	ldi	r22, 0x80	; 128
     d00:	7f e3       	ldi	r23, 0x3F	; 63
     d02:	4d a3       	lds	r20, 0x5d
     d04:	5e a3       	lds	r21, 0x5e
     d06:	6f a3       	lds	r22, 0x5f
     d08:	78 a7       	lds	r23, 0x78
	double qx = 0.0f;
     d0a:	89 a7       	lds	r24, 0x79
     d0c:	9a a7       	lds	r25, 0x7a
     d0e:	ab a7       	lds	r26, 0x7b
     d10:	bc a7       	lds	r27, 0x7c
	double qy = 0.0f;
     d12:	8d a7       	lds	r24, 0x7d
     d14:	9e a7       	lds	r25, 0x7e
     d16:	af a7       	lds	r26, 0x7f
     d18:	b8 ab       	sts	0x58, r27
	double qz = 0.0f;
     d1a:	89 ab       	sts	0x59, r24
     d1c:	9a ab       	sts	0x5a, r25
     d1e:	ab ab       	sts	0x5b, r26
     d20:	bc ab       	sts	0x5c, r27
	double roll = 0.0f;
     d22:	8d ab       	sts	0x5d, r24
     d24:	9e ab       	sts	0x5e, r25
     d26:	af ab       	sts	0x5f, r26
     d28:	b8 af       	sts	0x78, r27
	double pitch = 0.0f;
     d2a:	89 af       	sts	0x79, r24
     d2c:	9a af       	sts	0x7a, r25
     d2e:	ab af       	sts	0x7b, r26
     d30:	bc af       	sts	0x7c, r27
	double yaw = 0.0f;
     d32:	21 96       	adiw	r28, 0x01	; 1
     d34:	8c af       	sts	0x7c, r24
     d36:	9d af       	sts	0x7d, r25
     d38:	ae af       	sts	0x7e, r26
     d3a:	bf af       	sts	0x7f, r27
     d3c:	21 97       	sbiw	r28, 0x01	; 1
	#endif

    //init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     d3e:	80 e1       	ldi	r24, 0x10	; 16
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_init>

	//init interrupt
	sei();
     d46:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     d48:	0e 94 c1 0b 	call	0x1782	; 0x1782 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	90 e7       	ldi	r25, 0x70	; 112
     d50:	a2 e0       	ldi	r26, 0x02	; 2
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	a0 40       	sbci	r26, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <main+0xbc>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <main+0xc6>
     d5c:	00 00       	nop
	_delay_ms(50);

	//init mpu6050 dmp processor
	#if MPU6050_GETATTITUDE == 2
	mpu6050_dmpInitialize();
     d5e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <mpu6050_dmpInitialize>
	mpu6050_dmpEnable();
     d62:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <mpu6050_dmpEnable>
     d66:	af e3       	ldi	r26, 0x3F	; 63
     d68:	bc e9       	ldi	r27, 0x9C	; 156
     d6a:	11 97       	sbiw	r26, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <main+0xd4>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <main+0xda>
     d70:	00 00       	nop
		_delay_ms(100);
		#endif

		#if MPU6050_GETATTITUDE == 2
		if(mpu6050_getQuaternionWait(&qw, &qx, &qy, &qz)) {
			mpu6050_getRollPitchYaw(qw, qx, qy, qz, &roll, &pitch, &yaw);
     d72:	0f 2e       	mov	r0, r31
     d74:	f9 e3       	ldi	r31, 0x39	; 57
     d76:	2f 2e       	mov	r2, r31
     d78:	33 24       	eor	r3, r3
     d7a:	f0 2d       	mov	r31, r0
     d7c:	2c 0e       	add	r2, r28
     d7e:	3d 1e       	adc	r3, r29
     d80:	0f 2e       	mov	r0, r31
     d82:	fd e3       	ldi	r31, 0x3D	; 61
     d84:	6f 2e       	mov	r6, r31
     d86:	77 24       	eor	r7, r7
     d88:	f0 2d       	mov	r31, r0
     d8a:	6c 0e       	add	r6, r28
     d8c:	7d 1e       	adc	r7, r29
		dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		//dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		//dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		//dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		
		uart_puts("\r\n");
     d8e:	0f 2e       	mov	r0, r31
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	4f 2e       	mov	r4, r31
     d94:	f1 e0       	ldi	r31, 0x01	; 1
     d96:	5f 2e       	mov	r5, r31
     d98:	f0 2d       	mov	r31, r0
		mpu6050_getRollPitchYaw(&roll, &pitch, &yaw);
		_delay_ms(100);
		#endif

		#if MPU6050_GETATTITUDE == 2
		if(mpu6050_getQuaternionWait(&qw, &qx, &qy, &qz)) {
     d9a:	ce 01       	movw	r24, r28
     d9c:	85 96       	adiw	r24, 0x25	; 37
     d9e:	be 01       	movw	r22, r28
     da0:	67 5d       	subi	r22, 0xD7	; 215
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	ae 01       	movw	r20, r28
     da6:	43 5d       	subi	r20, 0xD3	; 211
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	9e 01       	movw	r18, r28
     dac:	2f 5c       	subi	r18, 0xCF	; 207
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	0e 94 03 11 	call	0x2206	; 0x2206 <mpu6050_getQuaternionWait>
     db4:	88 23       	and	r24, r24
     db6:	09 f4       	brne	.+2      	; 0xdba <main+0x124>
     db8:	53 c0       	rjmp	.+166    	; 0xe60 <main+0x1ca>
			mpu6050_getRollPitchYaw(qw, qx, qy, qz, &roll, &pitch, &yaw);
     dba:	00 d0       	rcall	.+0      	; 0xdbc <main+0x126>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <main+0x128>
     dbe:	6d a1       	lds	r22, 0x4d
     dc0:	7e a1       	lds	r23, 0x4e
     dc2:	8f a1       	lds	r24, 0x4f
     dc4:	98 a5       	lds	r25, 0x68
     dc6:	29 a5       	lds	r18, 0x69
     dc8:	3a a5       	lds	r19, 0x6a
     dca:	4b a5       	lds	r20, 0x6b
     dcc:	5c a5       	lds	r21, 0x6c
     dce:	ed a4       	lds	r30, 0xad
     dd0:	fe a4       	lds	r31, 0xae
     dd2:	0f a5       	lds	r16, 0x6f
     dd4:	18 a9       	sts	0x48, r17
     dd6:	a9 a8       	sts	0x89, r26
     dd8:	ba a8       	sts	0x8a, r27
     dda:	cb a8       	sts	0x8b, r28
     ddc:	dc a8       	sts	0x8c, r29
     dde:	ed b7       	in	r30, 0x3d	; 61
     de0:	fe b7       	in	r31, 0x3e	; 62
     de2:	32 82       	std	Z+2, r3	; 0x02
     de4:	21 82       	std	Z+1, r2	; 0x01
     de6:	74 82       	std	Z+4, r7	; 0x04
     de8:	63 82       	std	Z+3, r6	; 0x03
     dea:	0f 2e       	mov	r0, r31
     dec:	f5 e3       	ldi	r31, 0x35	; 53
     dee:	8f 2e       	mov	r8, r31
     df0:	99 24       	eor	r9, r9
     df2:	f0 2d       	mov	r31, r0
     df4:	8c 0e       	add	r8, r28
     df6:	9d 1e       	adc	r9, r29
     df8:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <mpu6050_getRollPitchYaw>
			mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	be 01       	movw	r22, r28
     e0a:	6d 5f       	subi	r22, 0xFD	; 253
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	ae 01       	movw	r20, r28
     e10:	4b 5f       	subi	r20, 0xFB	; 251
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	9e 01       	movw	r18, r28
     e16:	29 5f       	subi	r18, 0xF9	; 249
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	8e 01       	movw	r16, r28
     e1c:	07 5f       	subi	r16, 0xF7	; 247
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	0f 2e       	mov	r0, r31
     e22:	fb e0       	ldi	r31, 0x0B	; 11
     e24:	ef 2e       	mov	r14, r31
     e26:	ff 24       	eor	r15, r15
     e28:	f0 2d       	mov	r31, r0
     e2a:	ec 0e       	add	r14, r28
     e2c:	fd 1e       	adc	r15, r29
     e2e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <mpu6050_getRawData>
			mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     e32:	ce 01       	movw	r24, r28
     e34:	0d 96       	adiw	r24, 0x0d	; 13
     e36:	be 01       	movw	r22, r28
     e38:	6f 5e       	subi	r22, 0xEF	; 239
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	ae 01       	movw	r20, r28
     e3e:	4b 5e       	subi	r20, 0xEB	; 235
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	9e 01       	movw	r18, r28
     e44:	27 5e       	subi	r18, 0xE7	; 231
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	8e 01       	movw	r16, r28
     e4a:	03 5e       	subi	r16, 0xE3	; 227
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	0f 2e       	mov	r0, r31
     e50:	f1 e2       	ldi	r31, 0x21	; 33
     e52:	ef 2e       	mov	r14, r31
     e54:	ff 24       	eor	r15, r15
     e56:	f0 2d       	mov	r31, r0
     e58:	ec 0e       	add	r14, r28
     e5a:	fd 1e       	adc	r15, r29
     e5c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <mpu6050_getConvData>
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	96 e7       	ldi	r25, 0x76	; 118
     e64:	a1 e0       	ldi	r26, 0x01	; 1
     e66:	81 50       	subi	r24, 0x01	; 1
     e68:	90 40       	sbci	r25, 0x00	; 0
     e6a:	a0 40       	sbci	r26, 0x00	; 0
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <main+0x1d0>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <main+0x1da>
     e70:	00 00       	nop
		
		//uart_putc("\n");
		//uart_puts("\r\n");
		
		
		dtostrf(axg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     e72:	6d 85       	ldd	r22, Y+13	; 0x0d
     e74:	7e 85       	ldd	r23, Y+14	; 0x0e
     e76:	8f 85       	ldd	r24, Y+15	; 0x0f
     e78:	98 89       	ldd	r25, Y+16	; 0x10
     e7a:	43 e0       	ldi	r20, 0x03	; 3
     e7c:	25 e0       	ldi	r18, 0x05	; 5
     e7e:	8e 01       	movw	r16, r28
     e80:	0f 5b       	subi	r16, 0xBF	; 191
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     e88:	c8 01       	movw	r24, r16
     e8a:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     e8e:	80 e2       	ldi	r24, 0x20	; 32
     e90:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(ayg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     e94:	69 89       	ldd	r22, Y+17	; 0x11
     e96:	7a 89       	ldd	r23, Y+18	; 0x12
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	43 e0       	ldi	r20, 0x03	; 3
     e9e:	25 e0       	ldi	r18, 0x05	; 5
     ea0:	8e 01       	movw	r16, r28
     ea2:	0f 5b       	subi	r16, 0xBF	; 191
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     eaa:	c8 01       	movw	r24, r16
     eac:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     eb0:	80 e2       	ldi	r24, 0x20	; 32
     eb2:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(azg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     eb6:	6d 89       	ldd	r22, Y+21	; 0x15
     eb8:	7e 89       	ldd	r23, Y+22	; 0x16
     eba:	8f 89       	ldd	r24, Y+23	; 0x17
     ebc:	98 8d       	ldd	r25, Y+24	; 0x18
     ebe:	43 e0       	ldi	r20, 0x03	; 3
     ec0:	25 e0       	ldi	r18, 0x05	; 5
     ec2:	8e 01       	movw	r16, r28
     ec4:	0f 5b       	subi	r16, 0xBF	; 191
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(roll, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     ed8:	6d a9       	sts	0x4d, r22
     eda:	7e a9       	sts	0x4e, r23
     edc:	8f a9       	sts	0x4f, r24
     ede:	98 ad       	sts	0x68, r25
     ee0:	43 e0       	ldi	r20, 0x03	; 3
     ee2:	25 e0       	ldi	r18, 0x05	; 5
     ee4:	8e 01       	movw	r16, r28
     ee6:	0f 5b       	subi	r16, 0xBF	; 191
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     eee:	c8 01       	movw	r24, r16
     ef0:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(pitch, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     efa:	69 ad       	sts	0x69, r22
     efc:	7a ad       	sts	0x6a, r23
     efe:	8b ad       	sts	0x6b, r24
     f00:	9c ad       	sts	0x6c, r25
     f02:	43 e0       	ldi	r20, 0x03	; 3
     f04:	25 e0       	ldi	r18, 0x05	; 5
     f06:	8e 01       	movw	r16, r28
     f08:	0f 5b       	subi	r16, 0xBF	; 191
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(yaw, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     f1c:	d3 01       	movw	r26, r6
     f1e:	6d 91       	ld	r22, X+
     f20:	7d 91       	ld	r23, X+
     f22:	8d 91       	ld	r24, X+
     f24:	9c 91       	ld	r25, X
     f26:	43 e0       	ldi	r20, 0x03	; 3
     f28:	25 e0       	ldi	r18, 0x05	; 5
     f2a:	8e 01       	movw	r16, r28
     f2c:	0f 5b       	subi	r16, 0xBF	; 191
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     f34:	c8 01       	movw	r24, r16
     f36:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     f40:	69 8d       	ldd	r22, Y+25	; 0x19
     f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f48:	43 e0       	ldi	r20, 0x03	; 3
     f4a:	25 e0       	ldi	r18, 0x05	; 5
     f4c:	8e 01       	movw	r16, r28
     f4e:	0f 5b       	subi	r16, 0xBF	; 191
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     f56:	c8 01       	movw	r24, r16
     f58:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     f5c:	80 e2       	ldi	r24, 0x20	; 32
     f5e:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     f62:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f64:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f66:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f68:	98 a1       	lds	r25, 0x48
     f6a:	43 e0       	ldi	r20, 0x03	; 3
     f6c:	25 e0       	ldi	r18, 0x05	; 5
     f6e:	8e 01       	movw	r16, r28
     f70:	0f 5b       	subi	r16, 0xBF	; 191
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     f78:	c8 01       	movw	r24, r16
     f7a:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     f84:	69 a1       	lds	r22, 0x49
     f86:	7a a1       	lds	r23, 0x4a
     f88:	8b a1       	lds	r24, 0x4b
     f8a:	9c a1       	lds	r25, 0x4c
     f8c:	43 e0       	ldi	r20, 0x03	; 3
     f8e:	25 e0       	ldi	r18, 0x05	; 5
     f90:	8e 01       	movw	r16, r28
     f92:	0f 5b       	subi	r16, 0xBF	; 191
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	0e 94 32 16 	call	0x2c64	; 0x2c64 <dtostrf>
     f9a:	c8 01       	movw	r24, r16
     f9c:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
		//dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		//dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		//dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		
		uart_puts("\r\n");
     fa6:	c2 01       	movw	r24, r4
     fa8:	0e 94 11 12 	call	0x2422	; 0x2422 <uart_puts>
		//_delay_ms(20);
		#endif
		//uart_putc(65);
	}
     fac:	f6 ce       	rjmp	.-532    	; 0xd9a <main+0x104>

00000fae <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	e8 2e       	mov	r14, r24
     fbe:	d6 2e       	mov	r13, r22
     fc0:	c4 2f       	mov	r28, r20
     fc2:	05 2f       	mov	r16, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     fc4:	66 23       	and	r22, r22
     fc6:	59 f1       	breq	.+86     	; 0x101e <mpu6050_readBytes+0x70>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     fc8:	80 ed       	ldi	r24, 0xD0	; 208
     fca:	0e 94 5b 05 	call	0xab6	; 0xab6 <i2c_start>
		i2c_write(regAddr);
     fce:	8e 2d       	mov	r24, r14
     fd0:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	8a 95       	dec	r24
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <mpu6050_readBytes+0x28>
     fda:	00 00       	nop
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
     fdc:	81 ed       	ldi	r24, 0xD1	; 209
     fde:	0e 94 5b 05 	call	0xab6	; 0xab6 <i2c_start>
     fe2:	ec 2e       	mov	r14, r28
     fe4:	f0 2e       	mov	r15, r16
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     fea:	cd 2d       	mov	r28, r13
     fec:	d0 e0       	ldi	r29, 0x00	; 0
     fee:	21 97       	sbiw	r28, 0x01	; 1
     ff0:	0c 17       	cp	r16, r28
     ff2:	1d 07       	cpc	r17, r29
     ff4:	29 f4       	brne	.+10     	; 0x1000 <mpu6050_readBytes+0x52>
				data[i] = i2c_readNak();
     ff6:	0e 94 31 06 	call	0xc62	; 0xc62 <i2c_readNak>
     ffa:	f7 01       	movw	r30, r14
     ffc:	80 83       	st	Z, r24
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <mpu6050_readBytes+0x5a>
			else
				data[i] = i2c_readAck();
    1000:	0e 94 17 06 	call	0xc2e	; 0xc2e <i2c_readAck>
    1004:	f7 01       	movw	r30, r14
    1006:	80 83       	st	Z, r24
    1008:	0f 5f       	subi	r16, 0xFF	; 255
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	08 94       	sec
    100e:	e1 1c       	adc	r14, r1
    1010:	f1 1c       	adc	r15, r1
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
    1012:	0d 15       	cp	r16, r13
    1014:	68 f3       	brcs	.-38     	; 0xff0 <mpu6050_readBytes+0x42>
    1016:	cd 2d       	mov	r28, r13
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
    1018:	0e 94 e6 05 	call	0xbcc	; 0xbcc <i2c_stop>
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <mpu6050_readBytes+0x72>
/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
    101e:	c0 e0       	ldi	r28, 0x00	; 0
				data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
    1020:	8c 2f       	mov	r24, r28
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	08 95       	ret

00001032 <mpu6050_readByte>:

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    1032:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>
}
    103a:	08 95       	ret

0000103c <mpu6050_writeBytes>:

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	c8 2f       	mov	r28, r24
    1048:	16 2f       	mov	r17, r22
    104a:	04 2f       	mov	r16, r20
    104c:	f5 2e       	mov	r15, r21
	if(length > 0) {
    104e:	66 23       	and	r22, r22
    1050:	89 f0       	breq	.+34     	; 0x1074 <mpu6050_writeBytes+0x38>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    1052:	80 ed       	ldi	r24, 0xD0	; 208
    1054:	0e 94 5b 05 	call	0xab6	; 0xab6 <i2c_start>
		i2c_write(regAddr); //reg
    1058:	8c 2f       	mov	r24, r28
    105a:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_write>
    105e:	c0 2f       	mov	r28, r16
    1060:	df 2d       	mov	r29, r15
		for (uint8_t i = 0; i < length; i++) {
    1062:	00 e0       	ldi	r16, 0x00	; 0
			i2c_write((uint8_t) data[i]);
    1064:	89 91       	ld	r24, Y+
    1066:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
    106a:	0f 5f       	subi	r16, 0xFF	; 255
    106c:	01 17       	cp	r16, r17
    106e:	d1 f7       	brne	.-12     	; 0x1064 <mpu6050_writeBytes+0x28>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
    1070:	0e 94 e6 05 	call	0xbcc	; 0xbcc <i2c_stop>
	}
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	08 95       	ret

00001080 <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	ae 01       	movw	r20, r28
    1090:	4f 5f       	subi	r20, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	0e 94 1e 08 	call	0x103c	; 0x103c <mpu6050_writeBytes>
}
    1098:	0f 90       	pop	r0
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <mpu6050_readBits>:

/*
 * read bits from chip register
 */
int8_t mpu6050_readBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	06 2f       	mov	r16, r22
    10b4:	14 2f       	mov	r17, r20
    10b6:	79 01       	movw	r14, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    int8_t count = 0;
    if(length > 0) {
    10b8:	44 23       	and	r20, r20
    10ba:	41 f1       	breq	.+80     	; 0x110c <__stack+0xd>
		uint8_t b;
		if ((count = mpu6050_readByte(regAddr, &b)) != 0) {
    10bc:	be 01       	movw	r22, r28
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	0e 94 19 08 	call	0x1032	; 0x1032 <mpu6050_readByte>
    10c6:	88 23       	and	r24, r24
    10c8:	11 f1       	breq	.+68     	; 0x110e <__stack+0xf>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    10ca:	40 2f       	mov	r20, r16
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	41 1b       	sub	r20, r17
    10d0:	51 09       	sbc	r21, r1
    10d2:	4f 5f       	subi	r20, 0xFF	; 255
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	21 e0       	ldi	r18, 0x01	; 1
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <mpu6050_readBits+0x40>
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	1a 95       	dec	r17
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <mpu6050_readBits+0x3c>
    10e4:	21 50       	subi	r18, 0x01	; 1
    10e6:	30 40       	sbci	r19, 0x00	; 0
    10e8:	04 2e       	mov	r0, r20
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <mpu6050_readBits+0x50>
    10ec:	22 0f       	add	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <mpu6050_readBits+0x4c>
			b &= mask;
    10f4:	19 81       	ldd	r17, Y+1	; 0x01
    10f6:	21 23       	and	r18, r17
			b >>= (bitStart - length + 1);
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	b9 01       	movw	r22, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <__stack+0x3>
    10fe:	75 95       	asr	r23
    1100:	67 95       	ror	r22
    1102:	4a 95       	dec	r20
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <mpu6050_readBits+0x5e>
    1106:	f7 01       	movw	r30, r14
    1108:	60 83       	st	Z, r22
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__stack+0xf>
    // 01101001 read byte
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    int8_t count = 0;
    110c:	80 e0       	ldi	r24, 0x00	; 0
			b >>= (bitStart - length + 1);
			*data = b;
		}
    }
    return count;
}
    110e:	0f 90       	pop	r0
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	08 95       	ret

0000111e <mpu6050_readBit>:

/*
 * read 1 bit from chip register
 */
int8_t mpu6050_readBit(uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	16 2f       	mov	r17, r22
    1130:	7a 01       	movw	r14, r20
    uint8_t b;
    uint8_t count = mpu6050_readByte(regAddr, &b);
    1132:	be 01       	movw	r22, r28
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	0e 94 19 08 	call	0x1032	; 0x1032 <mpu6050_readByte>
    *data = b & (1 << bitNum);
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <mpu6050_readBit+0x28>
    1142:	22 0f       	add	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	1a 95       	dec	r17
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <mpu6050_readBit+0x24>
    114a:	19 81       	ldd	r17, Y+1	; 0x01
    114c:	21 23       	and	r18, r17
    114e:	f7 01       	movw	r30, r14
    1150:	20 83       	st	Z, r18
    return count;
}
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	08 95       	ret

00001160 <mpu6050_writeBits>:

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	08 2f       	mov	r16, r24
    1174:	e6 2e       	mov	r14, r22
    1176:	14 2f       	mov	r17, r20
    1178:	f2 2e       	mov	r15, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
    117a:	44 23       	and	r20, r20
    117c:	79 f1       	breq	.+94     	; 0x11dc <mpu6050_writeBits+0x7c>
		uint8_t b = 0;
    117e:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    1180:	be 01       	movw	r22, r28
    1182:	6f 5f       	subi	r22, 0xFF	; 255
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	0e 94 19 08 	call	0x1032	; 0x1032 <mpu6050_readByte>
    118a:	88 23       	and	r24, r24
    118c:	39 f1       	breq	.+78     	; 0x11dc <mpu6050_writeBits+0x7c>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    118e:	8e 2d       	mov	r24, r14
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	81 1b       	sub	r24, r17
    1194:	91 09       	sbc	r25, r1
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <mpu6050_writeBits+0x42>
    119e:	66 0f       	add	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	1a 95       	dec	r17
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <mpu6050_writeBits+0x3e>
    11a6:	61 50       	subi	r22, 0x01	; 1
    11a8:	70 40       	sbci	r23, 0x00	; 0
    11aa:	08 2e       	mov	r0, r24
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <mpu6050_writeBits+0x52>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <mpu6050_writeBits+0x4e>
    11b6:	16 2f       	mov	r17, r22
			data <<= (bitStart - length + 1); // shift data into correct position
    11b8:	2f 2d       	mov	r18, r15
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <mpu6050_writeBits+0x64>
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <mpu6050_writeBits+0x60>
    11c8:	ca 01       	movw	r24, r20
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
    11ca:	60 95       	com	r22
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	69 23       	and	r22, r25
	if(length > 0) {
		uint8_t b = 0;
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
			data <<= (bitStart - length + 1); // shift data into correct position
			data &= mask; // zero all non-important bits in data
    11d0:	81 23       	and	r24, r17
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    11d2:	68 2b       	or	r22, r24
    11d4:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    11d6:	80 2f       	mov	r24, r16
    11d8:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
		}
	}
}
    11dc:	0f 90       	pop	r0
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	08 95       	ret

000011ec <mpu6050_writeBit>:

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	18 2f       	mov	r17, r24
    11fe:	06 2f       	mov	r16, r22
    1200:	f4 2e       	mov	r15, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    1202:	be 01       	movw	r22, r28
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	0e 94 19 08 	call	0x1032	; 0x1032 <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    120c:	ff 20       	and	r15, r15
    120e:	51 f0       	breq	.+20     	; 0x1224 <mpu6050_writeBit+0x38>
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <mpu6050_writeBit+0x2e>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 95       	dec	r16
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <mpu6050_writeBit+0x2a>
    121e:	69 81       	ldd	r22, Y+1	; 0x01
    1220:	68 2b       	or	r22, r24
    1222:	0a c0       	rjmp	.+20     	; 0x1238 <mpu6050_writeBit+0x4c>
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	02 c0       	rjmp	.+4      	; 0x122e <mpu6050_writeBit+0x42>
    122a:	66 0f       	add	r22, r22
    122c:	77 1f       	adc	r23, r23
    122e:	0a 95       	dec	r16
    1230:	e2 f7       	brpl	.-8      	; 0x122a <mpu6050_writeBit+0x3e>
    1232:	60 95       	com	r22
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	68 23       	and	r22, r24
    1238:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    123a:	81 2f       	mov	r24, r17
    123c:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
}
    1240:	0f 90       	pop	r0
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	08 95       	ret

0000124e <mpu6050_writeWords>:

#if MPU6050_GETATTITUDE == 2
/*
 * write word/words to chip register
 */
void mpu6050_writeWords(uint8_t regAddr, uint8_t length, uint16_t* data) {
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	c8 2f       	mov	r28, r24
    125a:	e6 2e       	mov	r14, r22
    125c:	8a 01       	movw	r16, r20
	if(length > 0) {
    125e:	66 23       	and	r22, r22
    1260:	41 f1       	breq	.+80     	; 0x12b2 <mpu6050_writeWords+0x64>
		uint8_t i = 0;
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    1262:	80 ed       	ldi	r24, 0xD0	; 208
    1264:	0e 94 5b 05 	call	0xab6	; 0xab6 <i2c_start>
		i2c_write(regAddr); //reg
    1268:	8c 2f       	mov	r24, r28
    126a:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_write>
		for (i = 0; i < length * 2; i++) {
    126e:	ff 24       	eor	r15, r15
    1270:	ee 0c       	add	r14, r14
    1272:	ff 1c       	adc	r15, r15
    1274:	1e 14       	cp	r1, r14
    1276:	1f 04       	cpc	r1, r15
    1278:	d4 f4       	brge	.+52     	; 0x12ae <mpu6050_writeWords+0x60>
    127a:	c0 e0       	ldi	r28, 0x00	; 0
			i2c_write((uint8_t)(data[i++] >> 8)); // send MSB
    127c:	ec 2f       	mov	r30, r28
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	e0 0f       	add	r30, r16
    1286:	f1 1f       	adc	r31, r17
    1288:	81 81       	ldd	r24, Z+1	; 0x01
    128a:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_write>
    128e:	ec 2f       	mov	r30, r28
    1290:	ef 5f       	subi	r30, 0xFF	; 255
			i2c_write((uint8_t)data[i]);          // send LSB
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	e0 0f       	add	r30, r16
    129a:	f1 1f       	adc	r31, r17
    129c:	80 81       	ld	r24, Z
    129e:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_write>
	if(length > 0) {
		uint8_t i = 0;
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (i = 0; i < length * 2; i++) {
    12a2:	ce 5f       	subi	r28, 0xFE	; 254
    12a4:	8c 2f       	mov	r24, r28
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	8e 15       	cp	r24, r14
    12aa:	9f 05       	cpc	r25, r15
    12ac:	3c f3       	brlt	.-50     	; 0x127c <mpu6050_writeWords+0x2e>
			i2c_write((uint8_t)(data[i++] >> 8)); // send MSB
			i2c_write((uint8_t)data[i]);          // send LSB
		}
		i2c_stop();
    12ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <i2c_stop>
	}
}
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	08 95       	ret

000012be <mpu6050_setMemoryBank>:

/*
 * set a chip memory bank
 */
void mpu6050_setMemoryBank(uint8_t bank, uint8_t prefetchEnabled, uint8_t userBank) {
    12be:	96 2f       	mov	r25, r22
    bank &= 0x1F;
    12c0:	68 2f       	mov	r22, r24
    12c2:	6f 71       	andi	r22, 0x1F	; 31
    if (userBank) bank |= 0x20;
    12c4:	41 11       	cpse	r20, r1
    12c6:	60 62       	ori	r22, 0x20	; 32
    if (prefetchEnabled) bank |= 0x40;
    12c8:	91 11       	cpse	r25, r1
    12ca:	60 64       	ori	r22, 0x40	; 64
    mpu6050_writeByte(MPU6050_RA_BANK_SEL, bank);
    12cc:	8d e6       	ldi	r24, 0x6D	; 109
    12ce:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
}
    12d2:	08 95       	ret

000012d4 <mpu6050_setMemoryStartAddress>:

/*
 * set memory start address
 */
void mpu6050_setMemoryStartAddress(uint8_t address) {
    12d4:	68 2f       	mov	r22, r24
	mpu6050_writeByte(MPU6050_RA_MEM_START_ADDR, address);
    12d6:	8e e6       	ldi	r24, 0x6E	; 110
    12d8:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
}
    12dc:	08 95       	ret

000012de <mpu6050_readMemoryBlock>:

/*
 * read a memory block
 */
void mpu6050_readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	6c 01       	movw	r12, r24
    12f8:	7b 01       	movw	r14, r22
    12fa:	94 2e       	mov	r9, r20
    12fc:	d2 2f       	mov	r29, r18
	mpu6050_setMemoryBank(bank, 0, 0);
    12fe:	84 2f       	mov	r24, r20
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 5f 09 	call	0x12be	; 0x12be <mpu6050_setMemoryBank>
	mpu6050_setMemoryStartAddress(address);
    1308:	8d 2f       	mov	r24, r29
    130a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <mpu6050_setMemoryStartAddress>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
    130e:	e1 14       	cp	r14, r1
    1310:	f1 04       	cpc	r15, r1
    1312:	a1 f1       	breq	.+104    	; 0x137c <mpu6050_readMemoryBlock+0x9e>
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	10 e0       	ldi	r17, 0x00	; 0
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    1318:	88 24       	eor	r8, r8
    131a:	68 94       	set
    131c:	84 f8       	bld	r8, 4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    131e:	aa 24       	eor	r10, r10
    1320:	bb 24       	eor	r11, r11
    1322:	68 94       	set
    1324:	b0 f8       	bld	r11, 0
    for (uint16_t i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
    1326:	c8 01       	movw	r24, r16
    1328:	40 96       	adiw	r24, 0x10	; 16
    132a:	e8 16       	cp	r14, r24
    132c:	f9 06       	cpc	r15, r25
    132e:	18 f4       	brcc	.+6      	; 0x1336 <mpu6050_readMemoryBlock+0x58>
    1330:	ce 2d       	mov	r28, r14
    1332:	c0 1b       	sub	r28, r16
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <mpu6050_readMemoryBlock+0x5a>
	mpu6050_setMemoryBank(bank, 0, 0);
	mpu6050_setMemoryStartAddress(address);
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    1336:	c8 2d       	mov	r28, r8

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    1338:	8c 2f       	mov	r24, r28
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	95 01       	movw	r18, r10
    133e:	2d 1b       	sub	r18, r29
    1340:	31 09       	sbc	r19, r1
    1342:	28 17       	cp	r18, r24
    1344:	39 07       	cpc	r19, r25
    1346:	14 f4       	brge	.+4      	; 0x134c <mpu6050_readMemoryBlock+0x6e>
    1348:	cd 2f       	mov	r28, r29
    134a:	c1 95       	neg	r28

        // read the chunk of data as specified
        mpu6050_readBytes(MPU6050_RA_MEM_R_W, chunkSize, data + i);
    134c:	a6 01       	movw	r20, r12
    134e:	40 0f       	add	r20, r16
    1350:	51 1f       	adc	r21, r17
    1352:	8f e6       	ldi	r24, 0x6F	; 111
    1354:	6c 2f       	mov	r22, r28
    1356:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>

        // increase byte index by [chunkSize]
        i += chunkSize;
    135a:	0c 0f       	add	r16, r28
    135c:	11 1d       	adc	r17, r1

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
    135e:	0e 15       	cp	r16, r14
    1360:	1f 05       	cpc	r17, r15
    1362:	60 f4       	brcc	.+24     	; 0x137c <mpu6050_readMemoryBlock+0x9e>

        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
    1364:	dc 0f       	add	r29, r28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
            if (address == 0) bank++;
    1366:	09 f4       	brne	.+2      	; 0x136a <mpu6050_readMemoryBlock+0x8c>
    1368:	93 94       	inc	r9
            mpu6050_setMemoryBank(bank, 0, 0);
    136a:	89 2d       	mov	r24, r9
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	0e 94 5f 09 	call	0x12be	; 0x12be <mpu6050_setMemoryBank>
            mpu6050_setMemoryStartAddress(address);
    1374:	8d 2f       	mov	r24, r29
    1376:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <mpu6050_setMemoryStartAddress>
    137a:	d5 cf       	rjmp	.-86     	; 0x1326 <mpu6050_readMemoryBlock+0x48>
        }
    }
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	08 95       	ret

00001396 <mpu6050_writeMemoryBlock>:

/*
 * write a memory block
 */
uint8_t mpu6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, uint8_t verify, uint8_t useProgMem) {
    1396:	2f 92       	push	r2
    1398:	3f 92       	push	r3
    139a:	4f 92       	push	r4
    139c:	5f 92       	push	r5
    139e:	6f 92       	push	r6
    13a0:	7f 92       	push	r7
    13a2:	8f 92       	push	r8
    13a4:	9f 92       	push	r9
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	2c 01       	movw	r4, r24
    13bc:	6b 01       	movw	r12, r22
    13be:	94 2e       	mov	r9, r20
    13c0:	d2 2f       	mov	r29, r18
    13c2:	80 2e       	mov	r8, r16
	mpu6050_setMemoryBank(bank, 0, 0);
    13c4:	84 2f       	mov	r24, r20
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 5f 09 	call	0x12be	; 0x12be <mpu6050_setMemoryBank>
	mpu6050_setMemoryStartAddress(address);
    13ce:	8d 2f       	mov	r24, r29
    13d0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <mpu6050_setMemoryStartAddress>
    uint8_t chunkSize;
    uint8_t *verifyBuffer = 0;
    uint8_t *progBuffer = 0;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    13d4:	00 23       	and	r16, r16
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <mpu6050_writeMemoryBlock+0x50>
    13d8:	80 e1       	ldi	r24, 0x10	; 16
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <malloc>
    13e0:	28 2e       	mov	r2, r24
    13e2:	39 2e       	mov	r3, r25
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <mpu6050_writeMemoryBlock+0x54>
 */
uint8_t mpu6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, uint8_t verify, uint8_t useProgMem) {
	mpu6050_setMemoryBank(bank, 0, 0);
	mpu6050_setMemoryStartAddress(address);
    uint8_t chunkSize;
    uint8_t *verifyBuffer = 0;
    13e6:	22 24       	eor	r2, r2
    13e8:	33 24       	eor	r3, r3
    uint8_t *progBuffer = 0;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    13ea:	ee 20       	and	r14, r14
    13ec:	39 f0       	breq	.+14     	; 0x13fc <mpu6050_writeMemoryBlock+0x66>
    13ee:	80 e1       	ldi	r24, 0x10	; 16
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <malloc>
    13f6:	a8 2e       	mov	r10, r24
    13f8:	b9 2e       	mov	r11, r25
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <mpu6050_writeMemoryBlock+0x6a>
uint8_t mpu6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, uint8_t verify, uint8_t useProgMem) {
	mpu6050_setMemoryBank(bank, 0, 0);
	mpu6050_setMemoryStartAddress(address);
    uint8_t chunkSize;
    uint8_t *verifyBuffer = 0;
    uint8_t *progBuffer = 0;
    13fc:	aa 24       	eor	r10, r10
    13fe:	bb 24       	eor	r11, r11
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    for (i = 0; i < dataSize;) {
    1400:	c1 14       	cp	r12, r1
    1402:	d1 04       	cpc	r13, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <mpu6050_writeMemoryBlock+0x72>
    1406:	6a c0       	rjmp	.+212    	; 0x14dc <mpu6050_writeMemoryBlock+0x146>
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    140c:	66 24       	eor	r6, r6
    140e:	77 24       	eor	r7, r7
    1410:	68 94       	set
    1412:	70 f8       	bld	r7, 0
}

/*
 * write a memory block
 */
uint8_t mpu6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, uint8_t verify, uint8_t useProgMem) {
    1414:	ff 24       	eor	r15, r15
    for (i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
    1416:	c8 01       	movw	r24, r16
    1418:	40 96       	adiw	r24, 0x10	; 16
    141a:	c8 16       	cp	r12, r24
    141c:	d9 06       	cpc	r13, r25
    141e:	18 f4       	brcc	.+6      	; 0x1426 <mpu6050_writeMemoryBlock+0x90>
    1420:	cc 2d       	mov	r28, r12
    1422:	c0 1b       	sub	r28, r16
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <mpu6050_writeMemoryBlock+0x92>
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    for (i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    1426:	c0 e1       	ldi	r28, 0x10	; 16

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    1428:	8c 2f       	mov	r24, r28
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	93 01       	movw	r18, r6
    142e:	2d 1b       	sub	r18, r29
    1430:	31 09       	sbc	r19, r1
    1432:	28 17       	cp	r18, r24
    1434:	39 07       	cpc	r19, r25
    1436:	14 f4       	brge	.+4      	; 0x143c <mpu6050_writeMemoryBlock+0xa6>
    1438:	cd 2f       	mov	r28, r29
    143a:	c1 95       	neg	r28

        if (useProgMem) {
    143c:	ee 20       	and	r14, r14
    143e:	71 f0       	breq	.+28     	; 0x145c <mpu6050_writeMemoryBlock+0xc6>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    1440:	cc 23       	and	r28, r28
    1442:	79 f0       	breq	.+30     	; 0x1462 <mpu6050_writeMemoryBlock+0xcc>
}

/*
 * write a memory block
 */
uint8_t mpu6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, uint8_t verify, uint8_t useProgMem) {
    1444:	f2 01       	movw	r30, r4
    1446:	e0 0f       	add	r30, r16
    1448:	f1 1f       	adc	r31, r17
        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;

        if (useProgMem) {
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    144a:	d5 01       	movw	r26, r10
}

/*
 * write a memory block
 */
uint8_t mpu6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, uint8_t verify, uint8_t useProgMem) {
    144c:	8f 2d       	mov	r24, r15
        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;

        if (useProgMem) {
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    144e:	94 91       	lpm	r25, Z
    1450:	9d 93       	st	X+, r25
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	31 96       	adiw	r30, 0x01	; 1
    1456:	8c 17       	cp	r24, r28
    1458:	d1 f7       	brne	.-12     	; 0x144e <mpu6050_writeMemoryBlock+0xb8>
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <mpu6050_writeMemoryBlock+0xcc>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
    145c:	52 01       	movw	r10, r4
    145e:	a0 0e       	add	r10, r16
    1460:	b1 1e       	adc	r11, r17
        }

        mpu6050_writeBytes(MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
    1462:	8f e6       	ldi	r24, 0x6F	; 111
    1464:	6c 2f       	mov	r22, r28
    1466:	a5 01       	movw	r20, r10
    1468:	0e 94 1e 08 	call	0x103c	; 0x103c <mpu6050_writeBytes>

        // verify data if needed
        if (verify && verifyBuffer) {
    146c:	88 20       	and	r8, r8
    146e:	29 f1       	breq	.+74     	; 0x14ba <mpu6050_writeMemoryBlock+0x124>
    1470:	21 14       	cp	r2, r1
    1472:	31 04       	cpc	r3, r1
    1474:	11 f1       	breq	.+68     	; 0x14ba <mpu6050_writeMemoryBlock+0x124>
        	mpu6050_setMemoryBank(bank, 0, 0);
    1476:	89 2d       	mov	r24, r9
    1478:	6f 2d       	mov	r22, r15
    147a:	4f 2d       	mov	r20, r15
    147c:	0e 94 5f 09 	call	0x12be	; 0x12be <mpu6050_setMemoryBank>
            mpu6050_setMemoryStartAddress(address);
    1480:	8d 2f       	mov	r24, r29
    1482:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <mpu6050_setMemoryStartAddress>
            mpu6050_readBytes(MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
    1486:	8f e6       	ldi	r24, 0x6F	; 111
    1488:	6c 2f       	mov	r22, r28
    148a:	a1 01       	movw	r20, r2
    148c:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
    1490:	c5 01       	movw	r24, r10
    1492:	b1 01       	movw	r22, r2
    1494:	4c 2f       	mov	r20, r28
    1496:	5f 2d       	mov	r21, r15
    1498:	0e 94 62 18 	call	0x30c4	; 0x30c4 <memcmp>
    149c:	28 2f       	mov	r18, r24
    149e:	39 2f       	mov	r19, r25
    14a0:	21 15       	cp	r18, r1
    14a2:	31 05       	cpc	r19, r1
    14a4:	51 f0       	breq	.+20     	; 0x14ba <mpu6050_writeMemoryBlock+0x124>
                free(verifyBuffer);
    14a6:	c1 01       	movw	r24, r2
    14a8:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
                if (useProgMem) free(progBuffer);
    14ac:	ee 20       	and	r14, r14
    14ae:	11 f1       	breq	.+68     	; 0x14f4 <mpu6050_writeMemoryBlock+0x15e>
    14b0:	c5 01       	movw	r24, r10
    14b2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
                return 0; // uh oh.
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	20 c0       	rjmp	.+64     	; 0x14fa <mpu6050_writeMemoryBlock+0x164>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
    14ba:	0c 0f       	add	r16, r28
    14bc:	11 1d       	adc	r17, r1

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
    14be:	0c 15       	cp	r16, r12
    14c0:	1d 05       	cpc	r17, r13
    14c2:	60 f4       	brcc	.+24     	; 0x14dc <mpu6050_writeMemoryBlock+0x146>

        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
    14c4:	dc 0f       	add	r29, r28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
            if (address == 0) bank++;
    14c6:	09 f4       	brne	.+2      	; 0x14ca <mpu6050_writeMemoryBlock+0x134>
    14c8:	93 94       	inc	r9
            mpu6050_setMemoryBank(bank, 0, 0);
    14ca:	89 2d       	mov	r24, r9
    14cc:	6f 2d       	mov	r22, r15
    14ce:	4f 2d       	mov	r20, r15
    14d0:	0e 94 5f 09 	call	0x12be	; 0x12be <mpu6050_setMemoryBank>
            mpu6050_setMemoryStartAddress(address);
    14d4:	8d 2f       	mov	r24, r29
    14d6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <mpu6050_setMemoryStartAddress>
    14da:	9d cf       	rjmp	.-198    	; 0x1416 <mpu6050_writeMemoryBlock+0x80>
        }
    }
    if (verify) free(verifyBuffer);
    14dc:	88 20       	and	r8, r8
    14de:	19 f0       	breq	.+6      	; 0x14e6 <mpu6050_writeMemoryBlock+0x150>
    14e0:	c1 01       	movw	r24, r2
    14e2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
    if (useProgMem) free(progBuffer);
    14e6:	ee 20       	and	r14, r14
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <mpu6050_writeMemoryBlock+0x162>
    14ea:	c5 01       	movw	r24, r10
    14ec:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
    return 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <mpu6050_writeMemoryBlock+0x164>
            mpu6050_setMemoryStartAddress(address);
            mpu6050_readBytes(MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
                free(verifyBuffer);
                if (useProgMem) free(progBuffer);
                return 0; // uh oh.
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <mpu6050_writeMemoryBlock+0x164>
            mpu6050_setMemoryStartAddress(address);
        }
    }
    if (verify) free(verifyBuffer);
    if (useProgMem) free(progBuffer);
    return 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	9f 90       	pop	r9
    1510:	8f 90       	pop	r8
    1512:	7f 90       	pop	r7
    1514:	6f 90       	pop	r6
    1516:	5f 90       	pop	r5
    1518:	4f 90       	pop	r4
    151a:	3f 90       	pop	r3
    151c:	2f 90       	pop	r2
    151e:	08 95       	ret

00001520 <mpu6050_writeDMPConfigurationSet>:

/*
 * write a dmp configuration set
 */
uint8_t mpu6050_writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, uint8_t useProgMem) {
    1520:	2f 92       	push	r2
    1522:	3f 92       	push	r3
    1524:	4f 92       	push	r4
    1526:	5f 92       	push	r5
    1528:	6f 92       	push	r6
    152a:	7f 92       	push	r7
    152c:	9f 92       	push	r9
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	6c 01       	movw	r12, r24
    1544:	2b 01       	movw	r4, r22
    1546:	94 2e       	mov	r9, r20
    uint8_t *progBuffer = 0;
    uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
    1548:	44 23       	and	r20, r20
    154a:	09 f4       	brne	.+2      	; 0x154e <mpu6050_writeDMPConfigurationSet+0x2e>
    154c:	81 c0       	rjmp	.+258    	; 0x1650 <mpu6050_writeDMPConfigurationSet+0x130>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
    154e:	88 e0       	ldi	r24, 0x08	; 8
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <malloc>
    1556:	68 2e       	mov	r6, r24
    1558:	79 2e       	mov	r7, r25
    155a:	7c c0       	rjmp	.+248    	; 0x1654 <mpu6050_writeDMPConfigurationSet+0x134>
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    155c:	c0 e0       	ldi	r28, 0x00	; 0
    155e:	d0 e0       	ldi	r29, 0x00	; 0
        // write data or perform special action
        if (length > 0) {
            // regular block of data to write
            if (useProgMem) {
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    1560:	22 24       	eor	r2, r2
    1562:	33 24       	eor	r3, r3

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
        if (useProgMem) {
    1564:	99 20       	and	r9, r9
    1566:	c9 f0       	breq	.+50     	; 0x159a <mpu6050_writeDMPConfigurationSet+0x7a>
            bank = pgm_read_byte(data + i++);
    1568:	f6 01       	movw	r30, r12
    156a:	ec 0f       	add	r30, r28
    156c:	fd 1f       	adc	r31, r29
    156e:	04 91       	lpm	r16, Z
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
            offset = pgm_read_byte(data + i++);
    1574:	8c 0d       	add	r24, r12
    1576:	9d 1d       	adc	r25, r13
    1578:	fc 01       	movw	r30, r24
    157a:	f4 90       	lpm	r15, Z
            length = pgm_read_byte(data + i++);
    157c:	0f 2e       	mov	r0, r31
    157e:	f3 e0       	ldi	r31, 0x03	; 3
    1580:	af 2e       	mov	r10, r31
    1582:	bb 24       	eor	r11, r11
    1584:	f0 2d       	mov	r31, r0
    1586:	ac 0e       	add	r10, r28
    1588:	bd 1e       	adc	r11, r29
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
        if (useProgMem) {
            bank = pgm_read_byte(data + i++);
            offset = pgm_read_byte(data + i++);
    158a:	9e 01       	movw	r18, r28
    158c:	2e 5f       	subi	r18, 0xFE	; 254
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
            length = pgm_read_byte(data + i++);
    1590:	2c 0d       	add	r18, r12
    1592:	3d 1d       	adc	r19, r13
    1594:	f9 01       	movw	r30, r18
    1596:	14 91       	lpm	r17, Z
    1598:	0d c0       	rjmp	.+26     	; 0x15b4 <mpu6050_writeDMPConfigurationSet+0x94>
        } else {
            bank = data[i++];
    159a:	f6 01       	movw	r30, r12
    159c:	ec 0f       	add	r30, r28
    159e:	fd 1f       	adc	r31, r29
    15a0:	00 81       	ld	r16, Z
            offset = data[i++];
    15a2:	f1 80       	ldd	r15, Z+1	; 0x01
            length = data[i++];
    15a4:	12 81       	ldd	r17, Z+2	; 0x02
    15a6:	0f 2e       	mov	r0, r31
    15a8:	f3 e0       	ldi	r31, 0x03	; 3
    15aa:	af 2e       	mov	r10, r31
    15ac:	bb 24       	eor	r11, r11
    15ae:	f0 2d       	mov	r31, r0
    15b0:	ac 0e       	add	r10, r28
    15b2:	bd 1e       	adc	r11, r29
        }

        // write data or perform special action
        if (length > 0) {
    15b4:	11 23       	and	r17, r17
    15b6:	79 f1       	breq	.+94     	; 0x1616 <mpu6050_writeDMPConfigurationSet+0xf6>
            // regular block of data to write
            if (useProgMem) {
    15b8:	99 20       	and	r9, r9
    15ba:	e9 f0       	breq	.+58     	; 0x15f6 <mpu6050_writeDMPConfigurationSet+0xd6>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
    15bc:	13 30       	cpi	r17, 0x03	; 3
    15be:	38 f0       	brcs	.+14     	; 0x15ce <mpu6050_writeDMPConfigurationSet+0xae>
    15c0:	c3 01       	movw	r24, r6
    15c2:	61 2f       	mov	r22, r17
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	0e 94 83 17 	call	0x2f06	; 0x2f06 <realloc>
    15ca:	68 2e       	mov	r6, r24
    15cc:	79 2e       	mov	r7, r25
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    15ce:	21 2f       	mov	r18, r17
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	21 15       	cp	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	91 f0       	breq	.+36     	; 0x15fc <mpu6050_writeDMPConfigurationSet+0xdc>
    15d8:	d3 01       	movw	r26, r6
    15da:	c1 01       	movw	r24, r2
}

/*
 * write a dmp configuration set
 */
uint8_t mpu6050_writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, uint8_t useProgMem) {
    15dc:	a6 01       	movw	r20, r12
    15de:	4a 0d       	add	r20, r10
    15e0:	5b 1d       	adc	r21, r11
    15e2:	fa 01       	movw	r30, r20
    15e4:	e8 0f       	add	r30, r24
    15e6:	f9 1f       	adc	r31, r25
        // write data or perform special action
        if (length > 0) {
            // regular block of data to write
            if (useProgMem) {
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    15e8:	e4 91       	lpm	r30, Z
    15ea:	ed 93       	st	X+, r30
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	82 17       	cp	r24, r18
    15f0:	93 07       	cpc	r25, r19
    15f2:	b8 f3       	brcs	.-18     	; 0x15e2 <mpu6050_writeDMPConfigurationSet+0xc2>
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <mpu6050_writeDMPConfigurationSet+0xdc>
            } else {
                progBuffer = (uint8_t *)data + i;
    15f6:	36 01       	movw	r6, r12
    15f8:	6a 0c       	add	r6, r10
    15fa:	7b 1c       	adc	r7, r11
            }
            success = mpu6050_writeMemoryBlock(progBuffer, length, bank, offset, 1, 0);
    15fc:	c1 2f       	mov	r28, r17
    15fe:	d0 e0       	ldi	r29, 0x00	; 0
    1600:	c3 01       	movw	r24, r6
    1602:	be 01       	movw	r22, r28
    1604:	40 2f       	mov	r20, r16
    1606:	2f 2d       	mov	r18, r15
    1608:	01 e0       	ldi	r16, 0x01	; 1
    160a:	ee 24       	eor	r14, r14
    160c:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>
                // unknown special command
                success = 0;
            }
        }

        if (!success) {
    1610:	88 23       	and	r24, r24
    1612:	29 f5       	brne	.+74     	; 0x165e <mpu6050_writeDMPConfigurationSet+0x13e>
    1614:	16 c0       	rjmp	.+44     	; 0x1642 <mpu6050_writeDMPConfigurationSet+0x122>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
    1616:	99 20       	and	r9, r9
    1618:	39 f0       	breq	.+14     	; 0x1628 <mpu6050_writeDMPConfigurationSet+0x108>
                special = pgm_read_byte(data + i++);
    161a:	e5 01       	movw	r28, r10
    161c:	21 96       	adiw	r28, 0x01	; 1
    161e:	f6 01       	movw	r30, r12
    1620:	ea 0d       	add	r30, r10
    1622:	fb 1d       	adc	r31, r11
    1624:	e4 91       	lpm	r30, Z
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <mpu6050_writeDMPConfigurationSet+0x114>
            } else {
                special = data[i++];
    1628:	f6 01       	movw	r30, r12
    162a:	ea 0d       	add	r30, r10
    162c:	fb 1d       	adc	r31, r11
    162e:	e0 81       	ld	r30, Z
    1630:	e5 01       	movw	r28, r10
    1632:	21 96       	adiw	r28, 0x01	; 1
            }
            if (special == 0x01) {
    1634:	e1 30       	cpi	r30, 0x01	; 1
    1636:	29 f4       	brne	.+10     	; 0x1642 <mpu6050_writeDMPConfigurationSet+0x122>
                // enable DMP-related interrupts

            	//mpu6050_writeBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, 1); //setIntZeroMotionEnabled
            	//mpu6050_writeBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, 1); //setIntFIFOBufferOverflowEnabled
            	//mpu6050_writeBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, 1); //setIntDMPEnabled
            	mpu6050_writeByte(MPU6050_RA_INT_ENABLE, 0x32);  // single operation
    1638:	88 e3       	ldi	r24, 0x38	; 56
    163a:	62 e3       	ldi	r22, 0x32	; 50
    163c:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
    1640:	10 c0       	rjmp	.+32     	; 0x1662 <mpu6050_writeDMPConfigurationSet+0x142>
                success = 0;
            }
        }

        if (!success) {
            if (useProgMem) free(progBuffer);
    1642:	99 20       	and	r9, r9
    1644:	c9 f0       	breq	.+50     	; 0x1678 <mpu6050_writeDMPConfigurationSet+0x158>
    1646:	c3 01       	movw	r24, r6
    1648:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
            return 0; // uh oh
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	17 c0       	rjmp	.+46     	; 0x167e <mpu6050_writeDMPConfigurationSet+0x15e>

/*
 * write a dmp configuration set
 */
uint8_t mpu6050_writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, uint8_t useProgMem) {
    uint8_t *progBuffer = 0;
    1650:	66 24       	eor	r6, r6
    1652:	77 24       	eor	r7, r7
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    1654:	41 14       	cp	r4, r1
    1656:	51 04       	cpc	r5, r1
    1658:	09 f0       	breq	.+2      	; 0x165c <mpu6050_writeDMPConfigurationSet+0x13c>
    165a:	80 cf       	rjmp	.-256    	; 0x155c <mpu6050_writeDMPConfigurationSet+0x3c>
    165c:	06 c0       	rjmp	.+12     	; 0x166a <mpu6050_writeDMPConfigurationSet+0x14a>
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
            } else {
                progBuffer = (uint8_t *)data + i;
            }
            success = mpu6050_writeMemoryBlock(progBuffer, length, bank, offset, 1, 0);
            i += length;
    165e:	ca 0d       	add	r28, r10
    1660:	db 1d       	adc	r29, r11
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    1662:	c4 15       	cp	r28, r4
    1664:	d5 05       	cpc	r29, r5
    1666:	08 f4       	brcc	.+2      	; 0x166a <mpu6050_writeDMPConfigurationSet+0x14a>
    1668:	7d cf       	rjmp	.-262    	; 0x1564 <mpu6050_writeDMPConfigurationSet+0x44>
        if (!success) {
            if (useProgMem) free(progBuffer);
            return 0; // uh oh
        }
    }
    if (useProgMem) free(progBuffer);
    166a:	99 20       	and	r9, r9
    166c:	39 f0       	breq	.+14     	; 0x167c <mpu6050_writeDMPConfigurationSet+0x15c>
    166e:	c3 01       	movw	r24, r6
    1670:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
    return 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	03 c0       	rjmp	.+6      	; 0x167e <mpu6050_writeDMPConfigurationSet+0x15e>
            }
        }

        if (!success) {
            if (useProgMem) free(progBuffer);
            return 0; // uh oh
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	01 c0       	rjmp	.+2      	; 0x167e <mpu6050_writeDMPConfigurationSet+0x15e>
        }
    }
    if (useProgMem) free(progBuffer);
    return 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	5f 90       	pop	r5
    169a:	4f 90       	pop	r4
    169c:	3f 90       	pop	r3
    169e:	2f 90       	pop	r2
    16a0:	08 95       	ret

000016a2 <mpu6050_getFIFOCount>:

/*
 * get the fifo count
 */
uint16_t mpu6050_getFIFOCount() {
	mpu6050_readBytes(MPU6050_RA_FIFO_COUNTH, 2, (uint8_t *)buffer);
    16a2:	82 e7       	ldi	r24, 0x72	; 114
    16a4:	62 e0       	ldi	r22, 0x02	; 2
    16a6:	48 e9       	ldi	r20, 0x98	; 152
    16a8:	51 e0       	ldi	r21, 0x01	; 1
    16aa:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
    16ae:	90 91 98 01 	lds	r25, 0x0198
    16b2:	80 91 99 01 	lds	r24, 0x0199
    16b6:	39 2f       	mov	r19, r25
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	82 2b       	or	r24, r18
    16be:	93 2b       	or	r25, r19
}
    16c0:	08 95       	ret

000016c2 <mpu6050_getFIFOBytes>:

/*
 * read fifo bytes
 */
void mpu6050_getFIFOBytes(uint8_t *data, uint8_t length) {
    16c2:	ac 01       	movw	r20, r24
	mpu6050_readBytes(MPU6050_RA_FIFO_R_W, length, data);
    16c4:	84 e7       	ldi	r24, 0x74	; 116
    16c6:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>
}
    16ca:	08 95       	ret

000016cc <mpu6050_getIntStatus>:

/*
 * get the interrupt status
 */
uint8_t mpu6050_getIntStatus() {
	mpu6050_readByte(MPU6050_RA_INT_STATUS, (uint8_t *)buffer);
    16cc:	8a e3       	ldi	r24, 0x3A	; 58
    16ce:	68 e9       	ldi	r22, 0x98	; 152
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	0e 94 19 08 	call	0x1032	; 0x1032 <mpu6050_readByte>
    return buffer[0];
    16d6:	80 91 98 01 	lds	r24, 0x0198
}
    16da:	08 95       	ret

000016dc <mpu6050_resetFIFO>:

/*
 * reset fifo
 */
void mpu6050_resetFIFO() {
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
    16dc:	8a e6       	ldi	r24, 0x6A	; 106
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
}
    16e6:	08 95       	ret

000016e8 <mpu6050_getXGyroOffset>:

/*
 * get gyro offset X
 */
int8_t mpu6050_getXGyroOffset() {
	mpu6050_readBits(MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, (uint8_t *)buffer);
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	66 e0       	ldi	r22, 0x06	; 6
    16ec:	46 e0       	ldi	r20, 0x06	; 6
    16ee:	28 e9       	ldi	r18, 0x98	; 152
    16f0:	31 e0       	ldi	r19, 0x01	; 1
    16f2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <mpu6050_readBits>
    return buffer[0];
    16f6:	80 91 98 01 	lds	r24, 0x0198
}
    16fa:	08 95       	ret

000016fc <mpu6050_setXGyroOffset>:

/*
 * set gyro offset X
 */
void mpu6050_setXGyroOffset(int8_t offset) {
    16fc:	28 2f       	mov	r18, r24
	mpu6050_writeBits(MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	66 e0       	ldi	r22, 0x06	; 6
    1702:	46 e0       	ldi	r20, 0x06	; 6
    1704:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>
}
    1708:	08 95       	ret

0000170a <mpu6050_getYGyroOffset>:

/*
 * get gyro offset Y
 */
int8_t mpu6050_getYGyroOffset() {
	mpu6050_readBits(MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, (uint8_t *)buffer);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	66 e0       	ldi	r22, 0x06	; 6
    170e:	46 e0       	ldi	r20, 0x06	; 6
    1710:	28 e9       	ldi	r18, 0x98	; 152
    1712:	31 e0       	ldi	r19, 0x01	; 1
    1714:	0e 94 50 08 	call	0x10a0	; 0x10a0 <mpu6050_readBits>
    return buffer[0];
    1718:	80 91 98 01 	lds	r24, 0x0198
}
    171c:	08 95       	ret

0000171e <mpu6050_setYGyroOffset>:

/*
 * set gyro offset Y
 */
void mpu6050_setYGyroOffset(int8_t offset) {
    171e:	28 2f       	mov	r18, r24
	mpu6050_writeBits(MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	66 e0       	ldi	r22, 0x06	; 6
    1724:	46 e0       	ldi	r20, 0x06	; 6
    1726:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>
}
    172a:	08 95       	ret

0000172c <mpu6050_getZGyroOffset>:

/*
 * get gyro offset Z
 */
int8_t mpu6050_getZGyroOffset() {
	mpu6050_readBits(MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, (uint8_t *)buffer);
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	66 e0       	ldi	r22, 0x06	; 6
    1730:	46 e0       	ldi	r20, 0x06	; 6
    1732:	28 e9       	ldi	r18, 0x98	; 152
    1734:	31 e0       	ldi	r19, 0x01	; 1
    1736:	0e 94 50 08 	call	0x10a0	; 0x10a0 <mpu6050_readBits>
    return buffer[0];
    173a:	80 91 98 01 	lds	r24, 0x0198
}
    173e:	08 95       	ret

00001740 <mpu6050_setZGyroOffset>:

/*
 * set gyro offset Z
 */
void mpu6050_setZGyroOffset(int8_t offset) {
    1740:	28 2f       	mov	r18, r24
	mpu6050_writeBits(MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	66 e0       	ldi	r22, 0x06	; 6
    1746:	46 e0       	ldi	r20, 0x06	; 6
    1748:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>
}
    174c:	08 95       	ret

0000174e <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    174e:	8b e6       	ldi	r24, 0x6B	; 107
    1750:	66 e0       	ldi	r22, 0x06	; 6
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
}
    1758:	08 95       	ret

0000175a <mpu6050_setSleepEnabled>:

/*
 * set sleep enabled
 */
void mpu6050_setSleepEnabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 1);
    175a:	8b e6       	ldi	r24, 0x6B	; 107
    175c:	66 e0       	ldi	r22, 0x06	; 6
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
}
    1764:	08 95       	ret

00001766 <mpu6050_testConnection>:

/*
 * test connectino to chip
 */
uint8_t mpu6050_testConnection() {
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
    1766:	85 e7       	ldi	r24, 0x75	; 117
    1768:	66 e0       	ldi	r22, 0x06	; 6
    176a:	46 e0       	ldi	r20, 0x06	; 6
    176c:	28 e9       	ldi	r18, 0x98	; 152
    176e:	31 e0       	ldi	r19, 0x01	; 1
    1770:	0e 94 50 08 	call	0x10a0	; 0x10a0 <mpu6050_readBits>
	if(buffer[0] == 0x34)
    1774:	90 91 98 01 	lds	r25, 0x0198
		return 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	94 33       	cpi	r25, 0x34	; 52
    177c:	09 f0       	breq	.+2      	; 0x1780 <mpu6050_testConnection+0x1a>
    177e:	80 e0       	ldi	r24, 0x00	; 0
	else
		return 0;
}
    1780:	08 95       	ret

00001782 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    1782:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_init>
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	8a 95       	dec	r24
    178a:	f1 f7       	brne	.-4      	; 0x1788 <mpu6050_init+0x6>
    178c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    178e:	87 ea       	ldi	r24, 0xA7	; 167
    1790:	91 e6       	ldi	r25, 0x61	; 97
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <mpu6050_init+0x10>
    1796:	00 c0       	rjmp	.+0      	; 0x1798 <mpu6050_init+0x16>
    1798:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    179a:	0e 94 a7 0b 	call	0x174e	; 0x174e <mpu6050_setSleepDisabled>
    179e:	83 ec       	ldi	r24, 0xC3	; 195
    17a0:	99 e0       	ldi	r25, 0x09	; 9
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <mpu6050_init+0x20>
    17a6:	00 c0       	rjmp	.+0      	; 0x17a8 <mpu6050_init+0x26>
    17a8:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    17aa:	8b e6       	ldi	r24, 0x6B	; 107
    17ac:	62 e0       	ldi	r22, 0x02	; 2
    17ae:	43 e0       	ldi	r20, 0x03	; 3
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    17b6:	8a e1       	ldi	r24, 0x1A	; 26
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	43 e0       	ldi	r20, 0x03	; 3
    17bc:	23 e0       	ldi	r18, 0x03	; 3
    17be:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    17c2:	89 e1       	ldi	r24, 0x19	; 25
    17c4:	64 e0       	ldi	r22, 0x04	; 4
    17c6:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    17ca:	8b e1       	ldi	r24, 0x1B	; 27
    17cc:	64 e0       	ldi	r22, 0x04	; 4
    17ce:	42 e0       	ldi	r20, 0x02	; 2
    17d0:	23 e0       	ldi	r18, 0x03	; 3
    17d2:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    17d6:	8c e1       	ldi	r24, 0x1C	; 28
    17d8:	64 e0       	ldi	r22, 0x04	; 4
    17da:	42 e0       	ldi	r20, 0x02	; 2
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>

	#if MPU6050_GETATTITUDE == 1
	MPU6050_TIMER0INIT
	#endif
}
    17e2:	08 95       	ret

000017e4 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ec 01       	movw	r28, r24
    17fe:	6b 01       	movw	r12, r22
    1800:	5a 01       	movw	r10, r20
    1802:	49 01       	movw	r8, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    1804:	8b e3       	ldi	r24, 0x3B	; 59
    1806:	6e e0       	ldi	r22, 0x0E	; 14
    1808:	48 e9       	ldi	r20, 0x98	; 152
    180a:	51 e0       	ldi	r21, 0x01	; 1
    180c:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    1810:	90 91 98 01 	lds	r25, 0x0198
    1814:	80 91 99 01 	lds	r24, 0x0199
    1818:	39 2f       	mov	r19, r25
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	82 2b       	or	r24, r18
    1820:	93 2b       	or	r25, r19
    1822:	99 83       	std	Y+1, r25	; 0x01
    1824:	88 83       	st	Y, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1826:	90 91 9a 01 	lds	r25, 0x019A
    182a:	80 91 9b 01 	lds	r24, 0x019B
    182e:	39 2f       	mov	r19, r25
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	82 2b       	or	r24, r18
    1836:	93 2b       	or	r25, r19
    1838:	f6 01       	movw	r30, r12
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    183e:	90 91 9c 01 	lds	r25, 0x019C
    1842:	80 91 9d 01 	lds	r24, 0x019D
    1846:	39 2f       	mov	r19, r25
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	82 2b       	or	r24, r18
    184e:	93 2b       	or	r25, r19
    1850:	f5 01       	movw	r30, r10
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1856:	90 91 a0 01 	lds	r25, 0x01A0
    185a:	80 91 a1 01 	lds	r24, 0x01A1
    185e:	39 2f       	mov	r19, r25
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	82 2b       	or	r24, r18
    1866:	93 2b       	or	r25, r19
    1868:	f4 01       	movw	r30, r8
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    186e:	30 91 a2 01 	lds	r19, 0x01A2
    1872:	20 91 a3 01 	lds	r18, 0x01A3
    1876:	93 2f       	mov	r25, r19
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	82 2b       	or	r24, r18
    187e:	93 2b       	or	r25, r19
    1880:	f8 01       	movw	r30, r16
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1886:	30 91 a4 01 	lds	r19, 0x01A4
    188a:	20 91 a5 01 	lds	r18, 0x01A5
    188e:	93 2f       	mov	r25, r19
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	82 2b       	or	r24, r18
    1896:	93 2b       	or	r25, r19
    1898:	f7 01       	movw	r30, r14
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
    18b6:	08 95       	ret

000018b8 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
    18b8:	2f 92       	push	r2
    18ba:	3f 92       	push	r3
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	6f 92       	push	r6
    18c2:	7f 92       	push	r7
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	2c 97       	sbiw	r28, 0x0c	; 12
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	6c 01       	movw	r12, r24
    18ee:	5b 01       	movw	r10, r22
    18f0:	4a 01       	movw	r8, r20
    18f2:	39 01       	movw	r6, r18
    18f4:	28 01       	movw	r4, r16
    18f6:	17 01       	movw	r2, r14
	int16_t ax = 0;
    18f8:	1a 82       	std	Y+2, r1	; 0x02
    18fa:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
    18fc:	1c 82       	std	Y+4, r1	; 0x04
    18fe:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
    1900:	1e 82       	std	Y+6, r1	; 0x06
    1902:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
    1904:	18 86       	std	Y+8, r1	; 0x08
    1906:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
    1908:	1a 86       	std	Y+10, r1	; 0x0a
    190a:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
    190c:	1c 86       	std	Y+12, r1	; 0x0c
    190e:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	be 01       	movw	r22, r28
    1916:	6d 5f       	subi	r22, 0xFD	; 253
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	ae 01       	movw	r20, r28
    191c:	4b 5f       	subi	r20, 0xFB	; 251
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	9e 01       	movw	r18, r28
    1922:	29 5f       	subi	r18, 0xF9	; 249
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	8e 01       	movw	r16, r28
    1928:	07 5f       	subi	r16, 0xF7	; 247
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	0f 2e       	mov	r0, r31
    192e:	fb e0       	ldi	r31, 0x0B	; 11
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f0 2d       	mov	r31, r0
    1936:	ec 0e       	add	r14, r28
    1938:	fd 1e       	adc	r15, r29
    193a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    193e:	69 81       	ldd	r22, Y+1	; 0x01
    1940:	7a 81       	ldd	r23, Y+2	; 0x02
    1942:	88 27       	eor	r24, r24
    1944:	77 fd       	sbrc	r23, 7
    1946:	80 95       	com	r24
    1948:	98 2f       	mov	r25, r24
    194a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	58 e3       	ldi	r21, 0x38	; 56
    1956:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	f6 01       	movw	r30, r12
    1960:	80 83       	st	Z, r24
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	a2 83       	std	Z+2, r26	; 0x02
    1966:	b3 83       	std	Z+3, r27	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    1968:	6b 81       	ldd	r22, Y+3	; 0x03
    196a:	7c 81       	ldd	r23, Y+4	; 0x04
    196c:	88 27       	eor	r24, r24
    196e:	77 fd       	sbrc	r23, 7
    1970:	80 95       	com	r24
    1972:	98 2f       	mov	r25, r24
    1974:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	58 e3       	ldi	r21, 0x38	; 56
    1980:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f5 01       	movw	r30, r10
    198a:	80 83       	st	Z, r24
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	a2 83       	std	Z+2, r26	; 0x02
    1990:	b3 83       	std	Z+3, r27	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	88 27       	eor	r24, r24
    1998:	77 fd       	sbrc	r23, 7
    199a:	80 95       	com	r24
    199c:	98 2f       	mov	r25, r24
    199e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	58 e3       	ldi	r21, 0x38	; 56
    19aa:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	f4 01       	movw	r30, r8
    19b4:	80 83       	st	Z, r24
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	a2 83       	std	Z+2, r26	; 0x02
    19ba:	b3 83       	std	Z+3, r27	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	66 5d       	subi	r22, 0xD6	; 214
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	88 27       	eor	r24, r24
    19c6:	77 fd       	sbrc	r23, 7
    19c8:	80 95       	com	r24
    19ca:	98 2f       	mov	r25, r24
    19cc:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    19d0:	23 e3       	ldi	r18, 0x33	; 51
    19d2:	33 e3       	ldi	r19, 0x33	; 51
    19d4:	43 e8       	ldi	r20, 0x83	; 131
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 00 14 	call	0x2800	; 0x2800 <__divsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	f3 01       	movw	r30, r6
    19e2:	80 83       	st	Z, r24
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	a2 83       	std	Z+2, r26	; 0x02
    19e8:	b3 83       	std	Z+3, r27	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
    19ea:	69 85       	ldd	r22, Y+9	; 0x09
    19ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    19ee:	69 50       	subi	r22, 0x09	; 9
    19f0:	70 40       	sbci	r23, 0x00	; 0
    19f2:	88 27       	eor	r24, r24
    19f4:	77 fd       	sbrc	r23, 7
    19f6:	80 95       	com	r24
    19f8:	98 2f       	mov	r25, r24
    19fa:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    19fe:	23 e3       	ldi	r18, 0x33	; 51
    1a00:	33 e3       	ldi	r19, 0x33	; 51
    1a02:	43 e8       	ldi	r20, 0x83	; 131
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 00 14 	call	0x2800	; 0x2800 <__divsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	f2 01       	movw	r30, r4
    1a10:	80 83       	st	Z, r24
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	a2 83       	std	Z+2, r26	; 0x02
    1a16:	b3 83       	std	Z+3, r27	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	63 5e       	subi	r22, 0xE3	; 227
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	88 27       	eor	r24, r24
    1a22:	77 fd       	sbrc	r23, 7
    1a24:	80 95       	com	r24
    1a26:	98 2f       	mov	r25, r24
    1a28:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    1a2c:	23 e3       	ldi	r18, 0x33	; 51
    1a2e:	33 e3       	ldi	r19, 0x33	; 51
    1a30:	43 e8       	ldi	r20, 0x83	; 131
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 00 14 	call	0x2800	; 0x2800 <__divsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	f1 01       	movw	r30, r2
    1a3e:	80 83       	st	Z, r24
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	a2 83       	std	Z+2, r26	; 0x02
    1a44:	b3 83       	std	Z+3, r27	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
    1a46:	2c 96       	adiw	r28, 0x0c	; 12
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	bf 90       	pop	r11
    1a64:	af 90       	pop	r10
    1a66:	9f 90       	pop	r9
    1a68:	8f 90       	pop	r8
    1a6a:	7f 90       	pop	r7
    1a6c:	6f 90       	pop	r6
    1a6e:	5f 90       	pop	r5
    1a70:	4f 90       	pop	r4
    1a72:	3f 90       	pop	r3
    1a74:	2f 90       	pop	r2
    1a76:	08 95       	ret

00001a78 <mpu6050_dmpEnable>:

/*
 * enable dmp
 */
void mpu6050_dmpEnable() {
	MPU6050_DMP_INT0ENABLE;
    1a78:	89 b7       	in	r24, 0x39	; 57
    1a7a:	84 60       	ori	r24, 0x04	; 4
    1a7c:	89 bf       	out	0x39, r24	; 57
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, 1);
    1a7e:	8a e6       	ldi	r24, 0x6A	; 106
    1a80:	67 e0       	ldi	r22, 0x07	; 7
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
}
    1a88:	08 95       	ret

00001a8a <mpu6050_dmpDisable>:

/*
 * disable dmp
 */
void mpu6050_dmpDisable() {
	MPU6050_DMP_INT0DISABLE;
    1a8a:	89 b7       	in	r24, 0x39	; 57
    1a8c:	8b 7f       	andi	r24, 0xFB	; 251
    1a8e:	89 bf       	out	0x39, r24	; 57
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, 0);
    1a90:	8a e6       	ldi	r24, 0x6A	; 106
    1a92:	67 e0       	ldi	r22, 0x07	; 7
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
}
    1a9a:	08 95       	ret

00001a9c <mpu6050_dmpInitialize>:
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	c0 59       	subi	r28, 0x90	; 144
    1ab4:	d0 40       	sbci	r29, 0x00	; 0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
	//setup interrupt
	MPU6050_DMP_INT0SETUP;
    1ac0:	ea e6       	ldi	r30, 0x6A	; 106
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 63       	ori	r24, 0x30	; 48
    1ac8:	80 83       	st	Z, r24

	//reset
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, 1);
    1aca:	8b e6       	ldi	r24, 0x6B	; 107
    1acc:	67 e0       	ldi	r22, 0x07	; 7
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
    1ad4:	8b e4       	ldi	r24, 0x4B	; 75
    1ad6:	9d e1       	ldi	r25, 0x1D	; 29
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <mpu6050_dmpInitialize+0x3c>
    1adc:	00 c0       	rjmp	.+0      	; 0x1ade <mpu6050_dmpInitialize+0x42>
    1ade:	00 00       	nop
    _delay_ms(30);//wait after reset

    //disable sleep mode
    mpu6050_setSleepDisabled();
    1ae0:	0e 94 a7 0b 	call	0x174e	; 0x174e <mpu6050_setSleepDisabled>

    //set memorybank to 0
    mpu6050_setMemoryBank(0, 0, 0);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	0e 94 5f 09 	call	0x12be	; 0x12be <mpu6050_setMemoryBank>

    //get X/Y/Z gyro offsets
    int8_t xgOffset = mpu6050_getXGyroOffset();
    1aee:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <mpu6050_getXGyroOffset>
    1af2:	c8 2e       	mov	r12, r24
    int8_t ygOffset = mpu6050_getYGyroOffset();
    1af4:	0e 94 85 0b 	call	0x170a	; 0x170a <mpu6050_getYGyroOffset>
    1af8:	18 2f       	mov	r17, r24
    int8_t zgOffset = mpu6050_getZGyroOffset();
    1afa:	0e 94 96 0b 	call	0x172c	; 0x172c <mpu6050_getZGyroOffset>

    //setting slave 0 address to 0x7F
	mpu6050_writeByte(MPU6050_RA_I2C_SLV0_ADDR + 0*3, 0x7F);
    1afe:	85 e2       	ldi	r24, 0x25	; 37
    1b00:	6f e7       	ldi	r22, 0x7F	; 127
    1b02:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
	//disabling I2C Master mode
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, 0);
    1b06:	8a e6       	ldi	r24, 0x6A	; 106
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
	//setting slave 0 address to 0x68 (self)
	mpu6050_writeByte(MPU6050_RA_I2C_SLV0_ADDR + 0*3, 0x68);
    1b10:	85 e2       	ldi	r24, 0x25	; 37
    1b12:	68 e6       	ldi	r22, 0x68	; 104
    1b14:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
	//resetting I2C Master control
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, 1);
    1b18:	8a e6       	ldi	r24, 0x6A	; 106
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
    1b22:	87 e8       	ldi	r24, 0x87	; 135
    1b24:	93 e1       	ldi	r25, 0x13	; 19
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <mpu6050_dmpInitialize+0x8a>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <mpu6050_dmpInitialize+0x90>
    1b2c:	00 00       	nop
	_delay_ms(20);

    //load DMP code into memory banks
    if (mpu6050_writeMemoryBlock(mpu6050_dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, 1, 1) == 1) {
    1b2e:	84 ee       	ldi	r24, 0xE4	; 228
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	69 e8       	ldi	r22, 0x89	; 137
    1b34:	77 e0       	ldi	r23, 0x07	; 7
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	01 e0       	ldi	r16, 0x01	; 1
    1b3c:	ee 24       	eor	r14, r14
    1b3e:	e3 94       	inc	r14
    1b40:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <mpu6050_dmpInitialize+0xae>
    1b48:	9d c1       	rjmp	.+826    	; 0x1e84 <mpu6050_dmpInitialize+0x3e8>
        if (mpu6050_writeDMPConfigurationSet(mpu6050_dmpConfig, MPU6050_DMP_CONFIG_SIZE, 1)) {
    1b4a:	84 e2       	ldi	r24, 0x24	; 36
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	60 ec       	ldi	r22, 0xC0	; 192
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 90 0a 	call	0x1520	; 0x1520 <mpu6050_writeDMPConfigurationSet>
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <mpu6050_dmpInitialize+0xc2>
    1b5c:	95 c1       	rjmp	.+810    	; 0x1e88 <mpu6050_dmpInitialize+0x3ec>

        	//set clock source
        	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_ZGYRO);
    1b5e:	8b e6       	ldi	r24, 0x6B	; 107
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	43 e0       	ldi	r20, 0x03	; 3
    1b64:	23 e0       	ldi	r18, 0x03	; 3
    1b66:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>

        	//set DMP and FIFO_OFLOW interrupts enabled
        	mpu6050_writeByte(MPU6050_RA_INT_ENABLE, 0x12);
    1b6a:	88 e3       	ldi	r24, 0x38	; 56
    1b6c:	62 e1       	ldi	r22, 0x12	; 18
    1b6e:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //set sample rate
        	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); // 1khz / (1 + 4) = 200 Hz
    1b72:	89 e1       	ldi	r24, 0x19	; 25
    1b74:	64 e0       	ldi	r22, 0x04	; 4
    1b76:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //set external frame sync to TEMP_OUT_L[0]
            mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, MPU6050_EXT_SYNC_TEMP_OUT_L);
    1b7a:	8a e1       	ldi	r24, 0x1A	; 26
    1b7c:	65 e0       	ldi	r22, 0x05	; 5
    1b7e:	43 e0       	ldi	r20, 0x03	; 3
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>

            //set DLPF bandwidth to 42Hz
            mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1b86:	8a e1       	ldi	r24, 0x1A	; 26
    1b88:	62 e0       	ldi	r22, 0x02	; 2
    1b8a:	43 e0       	ldi	r20, 0x03	; 3
    1b8c:	23 e0       	ldi	r18, 0x03	; 3
    1b8e:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>

            //set gyro sensitivity to +/- 2000 deg/sec
            mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_2000);
    1b92:	8b e1       	ldi	r24, 0x1B	; 27
    1b94:	64 e0       	ldi	r22, 0x04	; 4
    1b96:	42 e0       	ldi	r20, 0x02	; 2
    1b98:	23 e0       	ldi	r18, 0x03	; 3
    1b9a:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>

            //set DMP configuration bytes (function unknown)
            mpu6050_writeByte(MPU6050_RA_DMP_CFG_1, 0x03);
    1b9e:	80 e7       	ldi	r24, 0x70	; 112
    1ba0:	63 e0       	ldi	r22, 0x03	; 3
    1ba2:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>
            mpu6050_writeByte(MPU6050_RA_DMP_CFG_2, 0x00);
    1ba6:	81 e7       	ldi	r24, 0x71	; 113
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //clear OTP Bank flag
            mpu6050_writeBit(MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, 0);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
            //set X/Y/Z gyro offsets to previous values
            //xgOffset = 0;
            //ygOffset = 0;
            zgOffset = 90;

            mpu6050_setXGyroOffset(xgOffset);
    1bb8:	8c 2d       	mov	r24, r12
    1bba:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <mpu6050_setXGyroOffset>
            mpu6050_setYGyroOffset(ygOffset);
    1bbe:	81 2f       	mov	r24, r17
    1bc0:	0e 94 8f 0b 	call	0x171e	; 0x171e <mpu6050_setYGyroOffset>
            mpu6050_setZGyroOffset(zgOffset);
    1bc4:	8a e5       	ldi	r24, 0x5A	; 90
    1bc6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <mpu6050_setZGyroOffset>

            //set X/Y/Z gyro user offsets to zero
            mpu6050_writeWords(MPU6050_RA_XG_OFFS_USRH, 1, 0);
    1bca:	83 e1       	ldi	r24, 0x13	; 19
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	0e 94 27 09 	call	0x124e	; 0x124e <mpu6050_writeWords>
            mpu6050_writeWords(MPU6050_RA_YG_OFFS_USRH, 1, 0);
    1bd6:	85 e1       	ldi	r24, 0x15	; 21
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	0e 94 27 09 	call	0x124e	; 0x124e <mpu6050_writeWords>
            mpu6050_writeWords(MPU6050_RA_ZG_OFFS_USRH, 1, 0);
    1be2:	87 e1       	ldi	r24, 0x17	; 23
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	0e 94 27 09 	call	0x124e	; 0x124e <mpu6050_writeWords>

            //writing final memory update 1/7 (function unknown)
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
    1bee:	cc 24       	eor	r12, r12
    1bf0:	dd 24       	eor	r13, r13
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1bf2:	25 ef       	ldi	r18, 0xF5	; 245
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
            mpu6050_setZGyroOffset(zgOffset);

            //set X/Y/Z gyro user offsets to zero
            mpu6050_writeWords(MPU6050_RA_XG_OFFS_USRH, 1, 0);
            mpu6050_writeWords(MPU6050_RA_YG_OFFS_USRH, 1, 0);
            mpu6050_writeWords(MPU6050_RA_ZG_OFFS_USRH, 1, 0);
    1bf6:	4c 2d       	mov	r20, r12
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1bf8:	59 01       	movw	r10, r18
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	e2 0f       	add	r30, r18
    1bfe:	f3 1f       	adc	r31, r19
            mpu6050_writeWords(MPU6050_RA_ZG_OFFS_USRH, 1, 0);

            //writing final memory update 1/7 (function unknown)
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1c00:	e4 91       	lpm	r30, Z
    1c02:	a1 e0       	ldi	r26, 0x01	; 1
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	ac 0f       	add	r26, r28
    1c08:	bd 1f       	adc	r27, r29
    1c0a:	ac 0d       	add	r26, r12
    1c0c:	b1 1d       	adc	r27, r1
    1c0e:	ec 93       	st	X, r30
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1c10:	4f 5f       	subi	r20, 0xFF	; 255
            mpu6050_writeWords(MPU6050_RA_ZG_OFFS_USRH, 1, 0);

            //writing final memory update 1/7 (function unknown)
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1c12:	08 94       	sec
    1c14:	c1 1c       	adc	r12, r1
    1c16:	d1 1c       	adc	r13, r1
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	9c 15       	cp	r25, r12
    1c1c:	60 f7       	brcc	.-40     	; 0x1bf6 <mpu6050_dmpInitialize+0x15a>
    1c1e:	6b 81       	ldd	r22, Y+3	; 0x03
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	86 2f       	mov	r24, r22
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	03 96       	adiw	r24, 0x03	; 3
    1c28:	48 17       	cp	r20, r24
    1c2a:	59 07       	cpc	r21, r25
    1c2c:	24 f3       	brlt	.-56     	; 0x1bf6 <mpu6050_dmpInitialize+0x15a>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1c2e:	ce 01       	movw	r24, r28
    1c30:	04 96       	adiw	r24, 0x04	; 4
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	49 81       	ldd	r20, Y+1	; 0x01
    1c36:	2a 81       	ldd	r18, Y+2	; 0x02
    1c38:	01 e0       	ldi	r16, 0x01	; 1
    1c3a:	ee 24       	eor	r14, r14
    1c3c:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>

            //writing final memory update 2/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1c40:	40 e0       	ldi	r20, 0x00	; 0
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1c42:	f5 01       	movw	r30, r10
    1c44:	ec 0d       	add	r30, r12
    1c46:	fd 1d       	adc	r31, r13
            uint16_t pos = 0;
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);

            //writing final memory update 2/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1c48:	e4 91       	lpm	r30, Z
    1c4a:	a1 e0       	ldi	r26, 0x01	; 1
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ac 0f       	add	r26, r28
    1c50:	bd 1f       	adc	r27, r29
    1c52:	a4 0f       	add	r26, r20
    1c54:	b1 1d       	adc	r27, r1
    1c56:	ec 93       	st	X, r30
    1c58:	4f 5f       	subi	r20, 0xFF	; 255
    1c5a:	08 94       	sec
    1c5c:	c1 1c       	adc	r12, r1
    1c5e:	d1 1c       	adc	r13, r1
    1c60:	44 30       	cpi	r20, 0x04	; 4
    1c62:	78 f3       	brcs	.-34     	; 0x1c42 <mpu6050_dmpInitialize+0x1a6>
    1c64:	6b 81       	ldd	r22, Y+3	; 0x03
    1c66:	24 2f       	mov	r18, r20
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	86 2f       	mov	r24, r22
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	03 96       	adiw	r24, 0x03	; 3
    1c70:	28 17       	cp	r18, r24
    1c72:	39 07       	cpc	r19, r25
    1c74:	34 f3       	brlt	.-52     	; 0x1c42 <mpu6050_dmpInitialize+0x1a6>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1c76:	ce 01       	movw	r24, r28
    1c78:	04 96       	adiw	r24, 0x04	; 4
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	49 81       	ldd	r20, Y+1	; 0x01
    1c7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c80:	01 e0       	ldi	r16, 0x01	; 1
    1c82:	ee 24       	eor	r14, r14
    1c84:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>

            //reset FIFO
            mpu6050_writeBits(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1, 1);
    1c88:	8a e6       	ldi	r24, 0x6A	; 106
    1c8a:	62 e0       	ldi	r22, 0x02	; 2
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	21 e0       	ldi	r18, 0x01	; 1
    1c90:	0e 94 b0 08 	call	0x1160	; 0x1160 <mpu6050_writeBits>

            //reading FIFO count
            uint8_t fifoCount = mpu6050_getFIFOCount();
    1c94:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <mpu6050_getFIFOCount>
    1c98:	68 2f       	mov	r22, r24
            uint8_t fifoBuffer[128];

            //current FIFO count
            mpu6050_readBytes(MPU6050_RA_FIFO_R_W, fifoCount, fifoBuffer);
    1c9a:	84 e7       	ldi	r24, 0x74	; 116
    1c9c:	ae 01       	movw	r20, r28
    1c9e:	4f 5e       	subi	r20, 0xEF	; 239
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	0e 94 d7 07 	call	0xfae	; 0xfae <mpu6050_readBytes>

            //setting motion detection threshold to 2
            mpu6050_writeByte(MPU6050_RA_MOT_THR, 2);
    1ca6:	8f e1       	ldi	r24, 0x1F	; 31
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //setting zero-motion detection threshold to 156
            mpu6050_writeByte(MPU6050_RA_ZRMOT_THR, 156);
    1cae:	81 e2       	ldi	r24, 0x21	; 33
    1cb0:	6c e9       	ldi	r22, 0x9C	; 156
    1cb2:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //setting motion detection duration to 80
            mpu6050_writeByte(MPU6050_RA_MOT_DUR, 80);
    1cb6:	80 e2       	ldi	r24, 0x20	; 32
    1cb8:	60 e5       	ldi	r22, 0x50	; 80
    1cba:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //setting zero-motion detection duration to 0
            mpu6050_writeByte(MPU6050_RA_ZRMOT_DUR, 0);
    1cbe:	82 e2       	ldi	r24, 0x22	; 34
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	0e 94 40 08 	call	0x1080	; 0x1080 <mpu6050_writeByte>

            //reset FIFO
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
    1cc6:	8a e6       	ldi	r24, 0x6A	; 106
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>

            //enabling FIFO
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, 1);
    1cd0:	8a e6       	ldi	r24, 0x6A	; 106
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>

            //enabling DMP
            mpu6050_dmpEnable();
    1cda:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <mpu6050_dmpEnable>

            //resetting DMP
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, 1);
    1cde:	8a e6       	ldi	r24, 0x6A	; 106
    1ce0:	63 e0       	ldi	r22, 0x03	; 3
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);
    1ce8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <mpu6050_getFIFOCount>
    1cec:	18 2f       	mov	r17, r24
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	d8 f3       	brcs	.-10     	; 0x1ce8 <mpu6050_dmpInitialize+0x24c>
    1cf2:	dc c0       	rjmp	.+440    	; 0x1eac <mpu6050_dmpInitialize+0x410>
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1cf4:	f5 01       	movw	r30, r10
    1cf6:	ec 0d       	add	r30, r12
    1cf8:	fd 1d       	adc	r31, r13

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);

            //writing final memory update 3/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1cfa:	e4 91       	lpm	r30, Z
    1cfc:	a1 e0       	ldi	r26, 0x01	; 1
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	ac 0f       	add	r26, r28
    1d02:	bd 1f       	adc	r27, r29
    1d04:	a4 0f       	add	r26, r20
    1d06:	b1 1d       	adc	r27, r1
    1d08:	ec 93       	st	X, r30
    1d0a:	4f 5f       	subi	r20, 0xFF	; 255
    1d0c:	08 94       	sec
    1d0e:	c1 1c       	adc	r12, r1
    1d10:	d1 1c       	adc	r13, r1
    1d12:	44 30       	cpi	r20, 0x04	; 4
    1d14:	78 f3       	brcs	.-34     	; 0x1cf4 <mpu6050_dmpInitialize+0x258>
    1d16:	6b 81       	ldd	r22, Y+3	; 0x03
    1d18:	24 2f       	mov	r18, r20
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	86 2f       	mov	r24, r22
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	03 96       	adiw	r24, 0x03	; 3
    1d22:	28 17       	cp	r18, r24
    1d24:	39 07       	cpc	r19, r25
    1d26:	34 f3       	brlt	.-52     	; 0x1cf4 <mpu6050_dmpInitialize+0x258>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1d28:	ce 01       	movw	r24, r28
    1d2a:	04 96       	adiw	r24, 0x04	; 4
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	49 81       	ldd	r20, Y+1	; 0x01
    1d30:	2a 81       	ldd	r18, Y+2	; 0x02
    1d32:	01 e0       	ldi	r16, 0x01	; 1
    1d34:	ee 24       	eor	r14, r14
    1d36:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>

            //writing final memory update 4/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1d3c:	f5 01       	movw	r30, r10
    1d3e:	ec 0d       	add	r30, r12
    1d40:	fd 1d       	adc	r31, r13
            //writing final memory update 3/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);

            //writing final memory update 4/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1d42:	e4 91       	lpm	r30, Z
    1d44:	a1 e0       	ldi	r26, 0x01	; 1
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ac 0f       	add	r26, r28
    1d4a:	bd 1f       	adc	r27, r29
    1d4c:	a4 0f       	add	r26, r20
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	ec 93       	st	X, r30
    1d52:	4f 5f       	subi	r20, 0xFF	; 255
    1d54:	08 94       	sec
    1d56:	c1 1c       	adc	r12, r1
    1d58:	d1 1c       	adc	r13, r1
    1d5a:	44 30       	cpi	r20, 0x04	; 4
    1d5c:	78 f3       	brcs	.-34     	; 0x1d3c <mpu6050_dmpInitialize+0x2a0>
    1d5e:	6b 81       	ldd	r22, Y+3	; 0x03
    1d60:	24 2f       	mov	r18, r20
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	86 2f       	mov	r24, r22
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	03 96       	adiw	r24, 0x03	; 3
    1d6a:	28 17       	cp	r18, r24
    1d6c:	39 07       	cpc	r19, r25
    1d6e:	34 f3       	brlt	.-52     	; 0x1d3c <mpu6050_dmpInitialize+0x2a0>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1d70:	ce 01       	movw	r24, r28
    1d72:	04 96       	adiw	r24, 0x04	; 4
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	49 81       	ldd	r20, Y+1	; 0x01
    1d78:	2a 81       	ldd	r18, Y+2	; 0x02
    1d7a:	01 e0       	ldi	r16, 0x01	; 1
    1d7c:	ee 24       	eor	r14, r14
    1d7e:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>

            //writing final memory update 5/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1d82:	40 e0       	ldi	r20, 0x00	; 0
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1d84:	f5 01       	movw	r30, r10
    1d86:	ec 0d       	add	r30, r12
    1d88:	fd 1d       	adc	r31, r13
            //writing final memory update 4/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);

            //writing final memory update 5/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1d8a:	e4 91       	lpm	r30, Z
    1d8c:	a1 e0       	ldi	r26, 0x01	; 1
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ac 0f       	add	r26, r28
    1d92:	bd 1f       	adc	r27, r29
    1d94:	a4 0f       	add	r26, r20
    1d96:	b1 1d       	adc	r27, r1
    1d98:	ec 93       	st	X, r30
    1d9a:	4f 5f       	subi	r20, 0xFF	; 255
    1d9c:	08 94       	sec
    1d9e:	c1 1c       	adc	r12, r1
    1da0:	d1 1c       	adc	r13, r1
    1da2:	44 30       	cpi	r20, 0x04	; 4
    1da4:	78 f3       	brcs	.-34     	; 0x1d84 <mpu6050_dmpInitialize+0x2e8>
    1da6:	6b 81       	ldd	r22, Y+3	; 0x03
    1da8:	24 2f       	mov	r18, r20
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	86 2f       	mov	r24, r22
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	03 96       	adiw	r24, 0x03	; 3
    1db2:	28 17       	cp	r18, r24
    1db4:	39 07       	cpc	r19, r25
    1db6:	34 f3       	brlt	.-52     	; 0x1d84 <mpu6050_dmpInitialize+0x2e8>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1db8:	ce 01       	movw	r24, r28
    1dba:	04 96       	adiw	r24, 0x04	; 4
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	49 81       	ldd	r20, Y+1	; 0x01
    1dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc2:	01 e0       	ldi	r16, 0x01	; 1
    1dc4:	ee 24       	eor	r14, r14
    1dc6:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>

            //reading FIFO data..."));
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);
    1dca:	ce 01       	movw	r24, r28
    1dcc:	41 96       	adiw	r24, 0x11	; 17
    1dce:	61 2f       	mov	r22, r17
    1dd0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <mpu6050_getFIFOBytes>

            //reading final memory update 6/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1dd6:	f5 01       	movw	r30, r10
    1dd8:	ec 0d       	add	r30, r12
    1dda:	fd 1d       	adc	r31, r13

            //reading FIFO data..."));
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);

            //reading final memory update 6/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1ddc:	e4 91       	lpm	r30, Z
    1dde:	a1 e0       	ldi	r26, 0x01	; 1
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	ac 0f       	add	r26, r28
    1de4:	bd 1f       	adc	r27, r29
    1de6:	a4 0f       	add	r26, r20
    1de8:	b1 1d       	adc	r27, r1
    1dea:	ec 93       	st	X, r30
    1dec:	4f 5f       	subi	r20, 0xFF	; 255
    1dee:	08 94       	sec
    1df0:	c1 1c       	adc	r12, r1
    1df2:	d1 1c       	adc	r13, r1
    1df4:	44 30       	cpi	r20, 0x04	; 4
    1df6:	78 f3       	brcs	.-34     	; 0x1dd6 <mpu6050_dmpInitialize+0x33a>
    1df8:	6b 81       	ldd	r22, Y+3	; 0x03
    1dfa:	24 2f       	mov	r18, r20
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	86 2f       	mov	r24, r22
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	03 96       	adiw	r24, 0x03	; 3
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	34 f3       	brlt	.-52     	; 0x1dd6 <mpu6050_dmpInitialize+0x33a>
            mpu6050_readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	04 96       	adiw	r24, 0x04	; 4
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	49 81       	ldd	r20, Y+1	; 0x01
    1e12:	2a 81       	ldd	r18, Y+2	; 0x02
    1e14:	0e 94 6f 09 	call	0x12de	; 0x12de <mpu6050_readMemoryBlock>

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);
    1e18:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <mpu6050_getFIFOCount>
    1e1c:	68 2f       	mov	r22, r24
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	d8 f3       	brcs	.-10     	; 0x1e18 <mpu6050_dmpInitialize+0x37c>

            //reading FIFO data
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);
    1e22:	ce 01       	movw	r24, r28
    1e24:	41 96       	adiw	r24, 0x11	; 17
    1e26:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <mpu6050_getFIFOBytes>
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    1e2a:	f6 01       	movw	r30, r12
    1e2c:	eb 50       	subi	r30, 0x0B	; 11
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255

            //reading FIFO data
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);

            //writing final memory update 7/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <mpu6050_dmpInitialize+0x39a>

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);

            //reading FIFO data
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);
    1e34:	31 96       	adiw	r30, 0x01	; 1

            //writing final memory update 7/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1e36:	84 91       	lpm	r24, Z
    1e38:	a1 e0       	ldi	r26, 0x01	; 1
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ac 0f       	add	r26, r28
    1e3e:	bd 1f       	adc	r27, r29
    1e40:	a4 0f       	add	r26, r20
    1e42:	b1 1d       	adc	r27, r1
    1e44:	8c 93       	st	X, r24
    1e46:	4f 5f       	subi	r20, 0xFF	; 255
    1e48:	44 30       	cpi	r20, 0x04	; 4
    1e4a:	a0 f3       	brcs	.-24     	; 0x1e34 <mpu6050_dmpInitialize+0x398>
    1e4c:	6b 81       	ldd	r22, Y+3	; 0x03
    1e4e:	84 2f       	mov	r24, r20
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	26 2f       	mov	r18, r22
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	2d 5f       	subi	r18, 0xFD	; 253
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	82 17       	cp	r24, r18
    1e5c:	93 07       	cpc	r25, r19
    1e5e:	54 f3       	brlt	.-44     	; 0x1e34 <mpu6050_dmpInitialize+0x398>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1e60:	ce 01       	movw	r24, r28
    1e62:	04 96       	adiw	r24, 0x04	; 4
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	49 81       	ldd	r20, Y+1	; 0x01
    1e68:	2a 81       	ldd	r18, Y+2	; 0x02
    1e6a:	01 e0       	ldi	r16, 0x01	; 1
    1e6c:	ee 24       	eor	r14, r14
    1e6e:	0e 94 cb 09 	call	0x1396	; 0x1396 <mpu6050_writeMemoryBlock>

            //disabling DMP (you turn it on later)
            mpu6050_dmpDisable();
    1e72:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <mpu6050_dmpDisable>

            //resetting FIFO and clearing INT status one last time
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
    1e76:	8a e6       	ldi	r24, 0x6A	; 106
    1e78:	62 e0       	ldi	r22, 0x02	; 2
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mpu6050_writeBit>
            return 2; // configuration block loading failed
        }
    } else {
        return 1; // main binary block loading failed
    }
    return 0; // success
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <mpu6050_dmpInitialize+0x3ee>
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
        } else {
            return 2; // configuration block loading failed
        }
    } else {
        return 1; // main binary block loading failed
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <mpu6050_dmpInitialize+0x3ee>
            mpu6050_dmpDisable();

            //resetting FIFO and clearing INT status one last time
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
        } else {
            return 2; // configuration block loading failed
    1e88:	82 e0       	ldi	r24, 0x02	; 2
        }
    } else {
        return 1; // main binary block loading failed
    }
    return 0; // success
}
    1e8a:	c0 57       	subi	r28, 0x70	; 112
    1e8c:	df 4f       	sbci	r29, 0xFF	; 255
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	08 95       	ret

            //resetting DMP
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, 1);

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	22 cf       	rjmp	.-444    	; 0x1cf4 <mpu6050_dmpInitialize+0x258>

00001eb0 <mpu6050_getQuaternion>:
}

/*
 * get quaternion from packet
 */
void mpu6050_getQuaternion(const uint8_t* packet, double *qw, double *qx, double *qy, double *qz) {
    1eb0:	af 92       	push	r10
    1eb2:	bf 92       	push	r11
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	ec 01       	movw	r28, r24
    1ec6:	7b 01       	movw	r14, r22
    1ec8:	6a 01       	movw	r12, r20
    1eca:	59 01       	movw	r10, r18
	if (packet == 0) packet = dmpPacketBuffer;
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <mpu6050_getQuaternion+0x28>
    1ed0:	c0 91 a6 01 	lds	r28, 0x01A6
    1ed4:	d0 91 a7 01 	lds	r29, 0x01A7
    *qw = (double)((packet[0] << 8) + packet[1]) / 16384.0f;
    1ed8:	78 81       	ld	r23, Y
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	68 0f       	add	r22, r24
    1ee0:	71 1d       	adc	r23, r1
    1ee2:	88 27       	eor	r24, r24
    1ee4:	77 fd       	sbrc	r23, 7
    1ee6:	80 95       	com	r24
    1ee8:	98 2f       	mov	r25, r24
    1eea:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	58 e3       	ldi	r21, 0x38	; 56
    1ef6:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	f7 01       	movw	r30, r14
    1f00:	80 83       	st	Z, r24
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	a2 83       	std	Z+2, r26	; 0x02
    1f06:	b3 83       	std	Z+3, r27	; 0x03
    *qx = (double)((packet[4] << 8) + packet[5]) / 16384.0f;
    1f08:	7c 81       	ldd	r23, Y+4	; 0x04
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	68 0f       	add	r22, r24
    1f10:	71 1d       	adc	r23, r1
    1f12:	88 27       	eor	r24, r24
    1f14:	77 fd       	sbrc	r23, 7
    1f16:	80 95       	com	r24
    1f18:	98 2f       	mov	r25, r24
    1f1a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	58 e3       	ldi	r21, 0x38	; 56
    1f26:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f6 01       	movw	r30, r12
    1f30:	80 83       	st	Z, r24
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	a2 83       	std	Z+2, r26	; 0x02
    1f36:	b3 83       	std	Z+3, r27	; 0x03
    *qy = (double)((packet[8] << 8) + packet[9]) / 16384.0f;
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	68 0f       	add	r22, r24
    1f40:	71 1d       	adc	r23, r1
    1f42:	88 27       	eor	r24, r24
    1f44:	77 fd       	sbrc	r23, 7
    1f46:	80 95       	com	r24
    1f48:	98 2f       	mov	r25, r24
    1f4a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	58 e3       	ldi	r21, 0x38	; 56
    1f56:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	f5 01       	movw	r30, r10
    1f60:	80 83       	st	Z, r24
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	a2 83       	std	Z+2, r26	; 0x02
    1f66:	b3 83       	std	Z+3, r27	; 0x03
    *qz = (double)((packet[12] << 8) + packet[13]) / 16384.0f;
    1f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	68 0f       	add	r22, r24
    1f70:	71 1d       	adc	r23, r1
    1f72:	88 27       	eor	r24, r24
    1f74:	77 fd       	sbrc	r23, 7
    1f76:	80 95       	com	r24
    1f78:	98 2f       	mov	r25, r24
    1f7a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatsisf>
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	58 e3       	ldi	r21, 0x38	; 56
    1f86:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	f8 01       	movw	r30, r16
    1f90:	80 83       	st	Z, r24
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	a2 83       	std	Z+2, r26	; 0x02
    1f96:	b3 83       	std	Z+3, r27	; 0x03
}
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	df 90       	pop	r13
    1fa6:	cf 90       	pop	r12
    1fa8:	bf 90       	pop	r11
    1faa:	af 90       	pop	r10
    1fac:	08 95       	ret

00001fae <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double qw, double qx, double qy, double qz, double *roll, double *pitch, double *yaw) {
    1fae:	2f 92       	push	r2
    1fb0:	3f 92       	push	r3
    1fb2:	4f 92       	push	r4
    1fb4:	5f 92       	push	r5
    1fb6:	6f 92       	push	r6
    1fb8:	7f 92       	push	r7
    1fba:	8f 92       	push	r8
    1fbc:	9f 92       	push	r9
    1fbe:	af 92       	push	r10
    1fc0:	bf 92       	push	r11
    1fc2:	cf 92       	push	r12
    1fc4:	df 92       	push	r13
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	60 97       	sbiw	r28, 0x10	; 16
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	2b 01       	movw	r4, r22
    1fe4:	3c 01       	movw	r6, r24
    1fe6:	29 83       	std	Y+1, r18	; 0x01
    1fe8:	3a 83       	std	Y+2, r19	; 0x02
    1fea:	4b 83       	std	Y+3, r20	; 0x03
    1fec:	5c 83       	std	Y+4, r21	; 0x04
    1fee:	ed 82       	std	Y+5, r14	; 0x05
    1ff0:	fe 82       	std	Y+6, r15	; 0x06
    1ff2:	0f 83       	std	Y+7, r16	; 0x07
    1ff4:	18 87       	std	Y+8, r17	; 0x08
    1ff6:	76 01       	movw	r14, r12
    1ff8:	65 01       	movw	r12, r10
    1ffa:	98 8a       	std	Y+16, r9	; 0x10
    1ffc:	8f 86       	std	Y+15, r8	; 0x0f
	*yaw = atan2(2*qx*qy - 2*qw*qz, 2*qw*qw + 2*qx*qx - 1);
    1ffe:	ca 01       	movw	r24, r20
    2000:	b9 01       	movw	r22, r18
    2002:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    2006:	b6 2e       	mov	r11, r22
    2008:	a7 2e       	mov	r10, r23
    200a:	98 2e       	mov	r9, r24
    200c:	89 2e       	mov	r8, r25
    200e:	c3 01       	movw	r24, r6
    2010:	b2 01       	movw	r22, r4
    2012:	a3 01       	movw	r20, r6
    2014:	92 01       	movw	r18, r4
    2016:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    201a:	36 2e       	mov	r3, r22
    201c:	27 2e       	mov	r2, r23
    201e:	89 87       	std	Y+9, r24	; 0x09
    2020:	9a 87       	std	Y+10, r25	; 0x0a
    2022:	c3 01       	movw	r24, r6
    2024:	b2 01       	movw	r22, r4
    2026:	59 85       	ldd	r21, Y+9	; 0x09
    2028:	4a 85       	ldd	r20, Y+10	; 0x0a
    202a:	03 2d       	mov	r16, r3
    202c:	12 2d       	mov	r17, r2
    202e:	25 2f       	mov	r18, r21
    2030:	34 2f       	mov	r19, r20
    2032:	a9 01       	movw	r20, r18
    2034:	98 01       	movw	r18, r16
    2036:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    203a:	6b 87       	std	Y+11, r22	; 0x0b
    203c:	7c 87       	std	Y+12, r23	; 0x0c
    203e:	8d 87       	std	Y+13, r24	; 0x0d
    2040:	9e 87       	std	Y+14, r25	; 0x0e
    2042:	8b 2d       	mov	r24, r11
    2044:	9a 2d       	mov	r25, r10
    2046:	a9 2d       	mov	r26, r9
    2048:	b8 2d       	mov	r27, r8
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	2d 81       	ldd	r18, Y+5	; 0x05
    2050:	3e 81       	ldd	r19, Y+6	; 0x06
    2052:	4f 81       	ldd	r20, Y+7	; 0x07
    2054:	58 85       	ldd	r21, Y+8	; 0x08
    2056:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    205a:	2b 01       	movw	r4, r22
    205c:	3c 01       	movw	r6, r24
    205e:	39 85       	ldd	r19, Y+9	; 0x09
    2060:	2a 85       	ldd	r18, Y+10	; 0x0a
    2062:	80 2f       	mov	r24, r16
    2064:	91 2f       	mov	r25, r17
    2066:	a3 2f       	mov	r26, r19
    2068:	b2 2f       	mov	r27, r18
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	a7 01       	movw	r20, r14
    2070:	96 01       	movw	r18, r12
    2072:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    2076:	9b 01       	movw	r18, r22
    2078:	ac 01       	movw	r20, r24
    207a:	c3 01       	movw	r24, r6
    207c:	b2 01       	movw	r22, r4
    207e:	0e 94 22 13 	call	0x2644	; 0x2644 <__subsf3>
    2082:	2b 01       	movw	r4, r22
    2084:	3c 01       	movw	r6, r24
    2086:	69 81       	ldd	r22, Y+1	; 0x01
    2088:	7a 81       	ldd	r23, Y+2	; 0x02
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	0b 2d       	mov	r16, r11
    2090:	1a 2d       	mov	r17, r10
    2092:	29 2d       	mov	r18, r9
    2094:	38 2d       	mov	r19, r8
    2096:	a9 01       	movw	r20, r18
    2098:	98 01       	movw	r18, r16
    209a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    20a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    20a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20a8:	6e 85       	ldd	r22, Y+14	; 0x0e
    20aa:	8f 2f       	mov	r24, r31
    20ac:	9e 2f       	mov	r25, r30
    20ae:	a7 2f       	mov	r26, r23
    20b0:	b6 2f       	mov	r27, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 22 13 	call	0x2644	; 0x2644 <__subsf3>
    20c6:	9b 01       	movw	r18, r22
    20c8:	ac 01       	movw	r20, r24
    20ca:	c3 01       	movw	r24, r6
    20cc:	b2 01       	movw	r22, r4
    20ce:	0e 94 ad 13 	call	0x275a	; 0x275a <atan2>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	ef a1       	lds	r30, 0x4f
    20d8:	f8 a5       	lds	r31, 0x68
    20da:	80 83       	st	Z, r24
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	a2 83       	std	Z+2, r26	; 0x02
    20e0:	b3 83       	std	Z+3, r27	; 0x03
	*pitch = -asin(2*qx*qz + 2*qw*qy);
    20e2:	80 2f       	mov	r24, r16
    20e4:	91 2f       	mov	r25, r17
    20e6:	a9 2d       	mov	r26, r9
    20e8:	b8 2d       	mov	r27, r8
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	a7 01       	movw	r20, r14
    20f0:	96 01       	movw	r18, r12
    20f2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    20f6:	2b 01       	movw	r4, r22
    20f8:	3c 01       	movw	r6, r24
    20fa:	6d 81       	ldd	r22, Y+5	; 0x05
    20fc:	7e 81       	ldd	r23, Y+6	; 0x06
    20fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2100:	98 85       	ldd	r25, Y+8	; 0x08
    2102:	59 85       	ldd	r21, Y+9	; 0x09
    2104:	4a 85       	ldd	r20, Y+10	; 0x0a
    2106:	03 2d       	mov	r16, r3
    2108:	12 2d       	mov	r17, r2
    210a:	25 2f       	mov	r18, r21
    210c:	34 2f       	mov	r19, r20
    210e:	a9 01       	movw	r20, r18
    2110:	98 01       	movw	r18, r16
    2112:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    2116:	9b 01       	movw	r18, r22
    2118:	ac 01       	movw	r20, r24
    211a:	c3 01       	movw	r24, r6
    211c:	b2 01       	movw	r22, r4
    211e:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    2122:	0e 94 87 13 	call	0x270e	; 0x270e <asin>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	b0 58       	subi	r27, 0x80	; 128
    212c:	ed a1       	lds	r30, 0x4d
    212e:	fe a1       	lds	r31, 0x4e
    2130:	80 83       	st	Z, r24
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	a2 83       	std	Z+2, r26	; 0x02
    2136:	b3 83       	std	Z+3, r27	; 0x03
	*roll = atan2(2*qy*qz - 2*qw*qx, 2*qw*qw + 2*qz*qz - 1);
    2138:	6d 81       	ldd	r22, Y+5	; 0x05
    213a:	7e 81       	ldd	r23, Y+6	; 0x06
    213c:	8f 81       	ldd	r24, Y+7	; 0x07
    213e:	98 85       	ldd	r25, Y+8	; 0x08
    2140:	9b 01       	movw	r18, r22
    2142:	ac 01       	movw	r20, r24
    2144:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    2148:	a7 01       	movw	r20, r14
    214a:	96 01       	movw	r18, r12
    214c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    2150:	2b 01       	movw	r4, r22
    2152:	3c 01       	movw	r6, r24
    2154:	69 81       	ldd	r22, Y+1	; 0x01
    2156:	7a 81       	ldd	r23, Y+2	; 0x02
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	59 85       	ldd	r21, Y+9	; 0x09
    215e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2160:	25 2f       	mov	r18, r21
    2162:	34 2f       	mov	r19, r20
    2164:	a9 01       	movw	r20, r18
    2166:	98 01       	movw	r18, r16
    2168:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    216c:	9b 01       	movw	r18, r22
    216e:	ac 01       	movw	r20, r24
    2170:	c3 01       	movw	r24, r6
    2172:	b2 01       	movw	r22, r4
    2174:	0e 94 22 13 	call	0x2644	; 0x2644 <__subsf3>
    2178:	2b 01       	movw	r4, r22
    217a:	3c 01       	movw	r6, r24
    217c:	c7 01       	movw	r24, r14
    217e:	b6 01       	movw	r22, r12
    2180:	a7 01       	movw	r20, r14
    2182:	96 01       	movw	r18, r12
    2184:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    2188:	a7 01       	movw	r20, r14
    218a:	96 01       	movw	r18, r12
    218c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsf3>
    2190:	9b 01       	movw	r18, r22
    2192:	ac 01       	movw	r20, r24
    2194:	fb 85       	ldd	r31, Y+11	; 0x0b
    2196:	ec 85       	ldd	r30, Y+12	; 0x0c
    2198:	7d 85       	ldd	r23, Y+13	; 0x0d
    219a:	6e 85       	ldd	r22, Y+14	; 0x0e
    219c:	8f 2f       	mov	r24, r31
    219e:	9e 2f       	mov	r25, r30
    21a0:	a7 2f       	mov	r26, r23
    21a2:	b6 2f       	mov	r27, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 22 13 	call	0x2644	; 0x2644 <__subsf3>
    21b8:	9b 01       	movw	r18, r22
    21ba:	ac 01       	movw	r20, r24
    21bc:	c3 01       	movw	r24, r6
    21be:	b2 01       	movw	r22, r4
    21c0:	0e 94 ad 13 	call	0x275a	; 0x275a <atan2>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	ef 85       	ldd	r30, Y+15	; 0x0f
    21ca:	f8 89       	ldd	r31, Y+16	; 0x10
    21cc:	80 83       	st	Z, r24
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	a2 83       	std	Z+2, r26	; 0x02
    21d2:	b3 83       	std	Z+3, r27	; 0x03
}
    21d4:	60 96       	adiw	r28, 0x10	; 16
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	5f 90       	pop	r5
    21fe:	4f 90       	pop	r4
    2200:	3f 90       	pop	r3
    2202:	2f 90       	pop	r2
    2204:	08 95       	ret

00002206 <mpu6050_getQuaternionWait>:

/*
 * get quaternion and wait
 */
uint8_t mpu6050_getQuaternionWait(double *qw, double *qx, double *qy, double *qz) {
    2206:	af 92       	push	r10
    2208:	bf 92       	push	r11
    220a:	cf 92       	push	r12
    220c:	df 92       	push	r13
    220e:	ef 92       	push	r14
    2210:	ff 92       	push	r15
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
    221a:	7c 01       	movw	r14, r24
    221c:	6b 01       	movw	r12, r22
    221e:	5a 01       	movw	r10, r20
    2220:	89 01       	movw	r16, r18
	while (!mpu6050_mpuInterrupt && mpu6050_fifoCount < MPU6050_DMP_dmpPacketSize);
    2222:	80 91 0b 01 	lds	r24, 0x010B
    2226:	90 91 0c 01 	lds	r25, 0x010C
    222a:	20 91 0d 01 	lds	r18, 0x010D
    222e:	22 23       	and	r18, r18
    2230:	19 f4       	brne	.+6      	; 0x2238 <mpu6050_getQuaternionWait+0x32>
    2232:	8a 32       	cpi	r24, 0x2A	; 42
    2234:	91 05       	cpc	r25, r1
    2236:	c8 f3       	brcs	.-14     	; 0x222a <mpu6050_getQuaternionWait+0x24>
	//reset interrupt
	mpu6050_mpuInterrupt = 0;
    2238:	10 92 0d 01 	sts	0x010D, r1

	//check for overflow
	mpu6050_mpuIntStatus = mpu6050_getIntStatus();
    223c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <mpu6050_getIntStatus>
    2240:	80 93 0a 01 	sts	0x010A, r24
	mpu6050_fifoCount = mpu6050_getFIFOCount();
    2244:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <mpu6050_getFIFOCount>
    2248:	90 93 0c 01 	sts	0x010C, r25
    224c:	80 93 0b 01 	sts	0x010B, r24
	if ((mpu6050_mpuIntStatus & 0x10) || mpu6050_fifoCount == 1024) {
    2250:	20 91 0a 01 	lds	r18, 0x010A
    2254:	24 fd       	sbrc	r18, 4
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <mpu6050_getQuaternionWait+0x5a>
    2258:	34 e0       	ldi	r19, 0x04	; 4
    225a:	80 30       	cpi	r24, 0x00	; 0
    225c:	93 07       	cpc	r25, r19
    225e:	21 f4       	brne	.+8      	; 0x2268 <mpu6050_getQuaternionWait+0x62>
		//reset
		mpu6050_resetFIFO();
    2260:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <mpu6050_resetFIFO>
		//get quaternion
		mpu6050_getQuaternion(mpu6050_fifoBuffer, qw, qx, qy, qz);
		return 1;
	}

	return 0;
    2264:	80 e0       	ldi	r24, 0x00	; 0
	//check for overflow
	mpu6050_mpuIntStatus = mpu6050_getIntStatus();
	mpu6050_fifoCount = mpu6050_getFIFOCount();
	if ((mpu6050_mpuIntStatus & 0x10) || mpu6050_fifoCount == 1024) {
		//reset
		mpu6050_resetFIFO();
    2266:	26 c0       	rjmp	.+76     	; 0x22b4 <mpu6050_getQuaternionWait+0xae>
	} else if (mpu6050_mpuIntStatus & 0x02) {
    2268:	21 ff       	sbrs	r18, 1
    226a:	23 c0       	rjmp	.+70     	; 0x22b2 <mpu6050_getQuaternionWait+0xac>
		//wait for correct available data length, should be a VERY short wait
		while (mpu6050_fifoCount < MPU6050_DMP_dmpPacketSize)
    226c:	8a 32       	cpi	r24, 0x2A	; 42
    226e:	91 05       	cpc	r25, r1
    2270:	48 f4       	brcc	.+18     	; 0x2284 <mpu6050_getQuaternionWait+0x7e>
			mpu6050_fifoCount = mpu6050_getFIFOCount();
    2272:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <mpu6050_getFIFOCount>
    2276:	90 93 0c 01 	sts	0x010C, r25
    227a:	80 93 0b 01 	sts	0x010B, r24
	if ((mpu6050_mpuIntStatus & 0x10) || mpu6050_fifoCount == 1024) {
		//reset
		mpu6050_resetFIFO();
	} else if (mpu6050_mpuIntStatus & 0x02) {
		//wait for correct available data length, should be a VERY short wait
		while (mpu6050_fifoCount < MPU6050_DMP_dmpPacketSize)
    227e:	8a 32       	cpi	r24, 0x2A	; 42
    2280:	91 05       	cpc	r25, r1
    2282:	b8 f3       	brcs	.-18     	; 0x2272 <mpu6050_getQuaternionWait+0x6c>
			mpu6050_fifoCount = mpu6050_getFIFOCount();
		//read a packet from FIFO
		mpu6050_getFIFOBytes(mpu6050_fifoBuffer, MPU6050_DMP_dmpPacketSize);
    2284:	c8 ea       	ldi	r28, 0xA8	; 168
    2286:	d1 e0       	ldi	r29, 0x01	; 1
    2288:	ce 01       	movw	r24, r28
    228a:	6a e2       	ldi	r22, 0x2A	; 42
    228c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <mpu6050_getFIFOBytes>
		mpu6050_fifoCount -= MPU6050_DMP_dmpPacketSize;
    2290:	80 91 0b 01 	lds	r24, 0x010B
    2294:	90 91 0c 01 	lds	r25, 0x010C
    2298:	8a 97       	sbiw	r24, 0x2a	; 42
    229a:	90 93 0c 01 	sts	0x010C, r25
    229e:	80 93 0b 01 	sts	0x010B, r24
		//get quaternion
		mpu6050_getQuaternion(mpu6050_fifoBuffer, qw, qx, qy, qz);
    22a2:	ce 01       	movw	r24, r28
    22a4:	b7 01       	movw	r22, r14
    22a6:	a6 01       	movw	r20, r12
    22a8:	95 01       	movw	r18, r10
    22aa:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <mpu6050_getQuaternion>
		return 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <mpu6050_getQuaternionWait+0xae>
	}

	return 0;
    22b2:	80 e0       	ldi	r24, 0x00	; 0
}
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
    22c4:	bf 90       	pop	r11
    22c6:	af 90       	pop	r10
    22c8:	08 95       	ret

000022ca <__vector_3>:

/*
 * on interrupt set data availabe
 */
ISR (INT2_vect) {
    22ca:	1f 92       	push	r1
    22cc:	0f 92       	push	r0
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	0f 92       	push	r0
    22d2:	11 24       	eor	r1, r1
    22d4:	8f 93       	push	r24
	mpu6050_mpuInterrupt = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 0d 01 	sts	0x010D, r24
}
    22dc:	8f 91       	pop	r24
    22de:	0f 90       	pop	r0
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	0f 90       	pop	r0
    22e4:	1f 90       	pop	r1
    22e6:	18 95       	reti

000022e8 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    22e8:	1f 92       	push	r1
    22ea:	0f 92       	push	r0
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	0f 92       	push	r0
    22f0:	0b b6       	in	r0, 0x3b	; 59
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	2f 93       	push	r18
    22f8:	3f 93       	push	r19
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2302:	3b b1       	in	r19, 0x0b	; 11
    data = UART0_DATA;
    2304:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2306:	80 91 55 01 	lds	r24, 0x0155
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    230e:	90 91 54 01 	lds	r25, 0x0154
    2312:	89 17       	cp	r24, r25
    2314:	51 f0       	breq	.+20     	; 0x232a <__vector_18+0x42>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2316:	93 2f       	mov	r25, r19
    2318:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    231a:	80 93 55 01 	sts	0x0155, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    231e:	e8 e5       	ldi	r30, 0x58	; 88
    2320:	f1 e0       	ldi	r31, 0x01	; 1
    2322:	e8 0f       	add	r30, r24
    2324:	f1 1d       	adc	r31, r1
    2326:	20 83       	st	Z, r18
    2328:	01 c0       	rjmp	.+2      	; 0x232c <__vector_18+0x44>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    232a:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    232c:	90 93 53 01 	sts	0x0153, r25
}
    2330:	ff 91       	pop	r31
    2332:	ef 91       	pop	r30
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	3f 91       	pop	r19
    233a:	2f 91       	pop	r18
    233c:	0f 90       	pop	r0
    233e:	0b be       	out	0x3b, r0	; 59
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	0f 90       	pop	r0
    2346:	1f 90       	pop	r1
    2348:	18 95       	reti

0000234a <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    234a:	1f 92       	push	r1
    234c:	0f 92       	push	r0
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	0f 92       	push	r0
    2352:	0b b6       	in	r0, 0x3b	; 59
    2354:	0f 92       	push	r0
    2356:	11 24       	eor	r1, r1
    2358:	8f 93       	push	r24
    235a:	9f 93       	push	r25
    235c:	ef 93       	push	r30
    235e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    2360:	90 91 57 01 	lds	r25, 0x0157
    2364:	80 91 56 01 	lds	r24, 0x0156
    2368:	98 17       	cp	r25, r24
    236a:	69 f0       	breq	.+26     	; 0x2386 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    236c:	80 91 56 01 	lds	r24, 0x0156
    2370:	8f 5f       	subi	r24, 0xFF	; 255
    2372:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
    2374:	80 93 56 01 	sts	0x0156, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2378:	e8 e7       	ldi	r30, 0x78	; 120
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	e8 0f       	add	r30, r24
    237e:	f1 1d       	adc	r31, r1
    2380:	80 81       	ld	r24, Z
    2382:	8c b9       	out	0x0c, r24	; 12
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2386:	55 98       	cbi	0x0a, 5	; 10
    }
}
    2388:	ff 91       	pop	r31
    238a:	ef 91       	pop	r30
    238c:	9f 91       	pop	r25
    238e:	8f 91       	pop	r24
    2390:	0f 90       	pop	r0
    2392:	0b be       	out	0x3b, r0	; 59
    2394:	0f 90       	pop	r0
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	0f 90       	pop	r0
    239a:	1f 90       	pop	r1
    239c:	18 95       	reti

0000239e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    239e:	10 92 57 01 	sts	0x0157, r1
    UART_TxTail = 0;
    23a2:	10 92 56 01 	sts	0x0156, r1
    UART_RxHead = 0;
    23a6:	10 92 55 01 	sts	0x0155, r1
    UART_RxTail = 0;
    23aa:	10 92 54 01 	sts	0x0154, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    23ae:	99 23       	and	r25, r25
    23b0:	1c f4       	brge	.+6      	; 0x23b8 <uart_init+0x1a>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    23b2:	22 e0       	ldi	r18, 0x02	; 2
    23b4:	2b b9       	out	0x0b, r18	; 11
   		baudrate &= ~0x8000;
    23b6:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    23b8:	90 93 90 00 	sts	0x0090, r25
    UBRR0L = (unsigned char) baudrate;
    23bc:	89 b9       	out	0x09, r24	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    23be:	88 e9       	ldi	r24, 0x98	; 152
    23c0:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    23c2:	86 e0       	ldi	r24, 0x06	; 6
    23c4:	80 93 95 00 	sts	0x0095, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    23c8:	08 95       	ret

000023ca <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    23ca:	90 91 55 01 	lds	r25, 0x0155
    23ce:	80 91 54 01 	lds	r24, 0x0154
    23d2:	98 17       	cp	r25, r24
    23d4:	91 f0       	breq	.+36     	; 0x23fa <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    23d6:	80 91 54 01 	lds	r24, 0x0154
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	8f 71       	andi	r24, 0x1F	; 31
    UART_RxTail = tmptail; 
    23de:	80 93 54 01 	sts	0x0154, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    23e2:	e8 e5       	ldi	r30, 0x58	; 88
    23e4:	f1 e0       	ldi	r31, 0x01	; 1
    23e6:	e8 0f       	add	r30, r24
    23e8:	f1 1d       	adc	r31, r1
    23ea:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
    23ec:	30 91 53 01 	lds	r19, 0x0153
    23f0:	93 2f       	mov	r25, r19
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	82 0f       	add	r24, r18
    23f6:	91 1d       	adc	r25, r1
    23f8:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    23fe:	08 95       	ret

00002400 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2400:	20 91 57 01 	lds	r18, 0x0157
    2404:	2f 5f       	subi	r18, 0xFF	; 255
    2406:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    2408:	90 91 56 01 	lds	r25, 0x0156
    240c:	29 17       	cp	r18, r25
    240e:	e1 f3       	breq	.-8      	; 0x2408 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    2410:	e8 e7       	ldi	r30, 0x78	; 120
    2412:	f1 e0       	ldi	r31, 0x01	; 1
    2414:	e2 0f       	add	r30, r18
    2416:	f1 1d       	adc	r31, r1
    2418:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    241a:	20 93 57 01 	sts	0x0157, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    241e:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
    2420:	08 95       	ret

00002422 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	ec 01       	movw	r28, r24
    while (*s) 
    2428:	88 81       	ld	r24, Y
    242a:	88 23       	and	r24, r24
    242c:	31 f0       	breq	.+12     	; 0x243a <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
    242e:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
    2430:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    2434:	89 91       	ld	r24, Y+
    2436:	88 23       	and	r24, r24
    2438:	d9 f7       	brne	.-10     	; 0x2430 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	08 95       	ret

00002440 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2446:	fc 01       	movw	r30, r24
    2448:	84 91       	lpm	r24, Z
    244a:	88 23       	and	r24, r24
    244c:	41 f0       	breq	.+16     	; 0x245e <uart_puts_p+0x1e>
    244e:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
    2450:	0e 94 00 12 	call	0x2400	; 0x2400 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2454:	fe 01       	movw	r30, r28
    2456:	21 96       	adiw	r28, 0x01	; 1
    2458:	84 91       	lpm	r24, Z
    245a:	88 23       	and	r24, r24
    245c:	c9 f7       	brne	.-14     	; 0x2450 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
    2464:	80 91 55 01 	lds	r24, 0x0155
    2468:	20 91 54 01 	lds	r18, 0x0154
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	4f 96       	adiw	r24, 0x1f	; 31
    2470:	82 1b       	sub	r24, r18
    2472:	91 09       	sbc	r25, r1
    2474:	6f e1       	ldi	r22, 0x1F	; 31
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__divmodhi4>
}/* uart_available */
    247c:	08 95       	ret

0000247e <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
    247e:	80 91 54 01 	lds	r24, 0x0154
    2482:	80 93 55 01 	sts	0x0155, r24
}/* uart_flush */
    2486:	08 95       	ret

00002488 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	0b b6       	in	r0, 0x3b	; 59
    2492:	0f 92       	push	r0
    2494:	11 24       	eor	r1, r1
    2496:	2f 93       	push	r18
    2498:	3f 93       	push	r19
    249a:	8f 93       	push	r24
    249c:	9f 93       	push	r25
    249e:	ef 93       	push	r30
    24a0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    24a2:	30 91 9b 00 	lds	r19, 0x009B
    data = UART1_DATA;
    24a6:	20 91 9c 00 	lds	r18, 0x009C
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    24aa:	80 91 10 01 	lds	r24, 0x0110
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
    24b2:	90 91 0f 01 	lds	r25, 0x010F
    24b6:	89 17       	cp	r24, r25
    24b8:	51 f0       	breq	.+20     	; 0x24ce <__vector_30+0x46>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    24ba:	93 2f       	mov	r25, r19
    24bc:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    24be:	80 93 10 01 	sts	0x0110, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    24c2:	e3 e1       	ldi	r30, 0x13	; 19
    24c4:	f1 e0       	ldi	r31, 0x01	; 1
    24c6:	e8 0f       	add	r30, r24
    24c8:	f1 1d       	adc	r31, r1
    24ca:	20 83       	st	Z, r18
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <__vector_30+0x48>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    24ce:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError = lastRxError;   
    24d0:	90 93 0e 01 	sts	0x010E, r25
}
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	9f 91       	pop	r25
    24da:	8f 91       	pop	r24
    24dc:	3f 91       	pop	r19
    24de:	2f 91       	pop	r18
    24e0:	0f 90       	pop	r0
    24e2:	0b be       	out	0x3b, r0	; 59
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

000024ee <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    24ee:	1f 92       	push	r1
    24f0:	0f 92       	push	r0
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	0f 92       	push	r0
    24f6:	0b b6       	in	r0, 0x3b	; 59
    24f8:	0f 92       	push	r0
    24fa:	11 24       	eor	r1, r1
    24fc:	8f 93       	push	r24
    24fe:	9f 93       	push	r25
    2500:	ef 93       	push	r30
    2502:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    2504:	90 91 12 01 	lds	r25, 0x0112
    2508:	80 91 11 01 	lds	r24, 0x0111
    250c:	98 17       	cp	r25, r24
    250e:	71 f0       	breq	.+28     	; 0x252c <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    2510:	80 91 11 01 	lds	r24, 0x0111
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
    2518:	80 93 11 01 	sts	0x0111, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    251c:	e3 e3       	ldi	r30, 0x33	; 51
    251e:	f1 e0       	ldi	r31, 0x01	; 1
    2520:	e8 0f       	add	r30, r24
    2522:	f1 1d       	adc	r31, r1
    2524:	80 81       	ld	r24, Z
    2526:	80 93 9c 00 	sts	0x009C, r24
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    252c:	ea e9       	ldi	r30, 0x9A	; 154
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	8f 7d       	andi	r24, 0xDF	; 223
    2534:	80 83       	st	Z, r24
    }
}
    2536:	ff 91       	pop	r31
    2538:	ef 91       	pop	r30
    253a:	9f 91       	pop	r25
    253c:	8f 91       	pop	r24
    253e:	0f 90       	pop	r0
    2540:	0b be       	out	0x3b, r0	; 59
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	0f 90       	pop	r0
    2548:	1f 90       	pop	r1
    254a:	18 95       	reti

0000254c <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    254c:	10 92 12 01 	sts	0x0112, r1
    UART1_TxTail = 0;
    2550:	10 92 11 01 	sts	0x0111, r1
    UART1_RxHead = 0;
    2554:	10 92 10 01 	sts	0x0110, r1
    UART1_RxTail = 0;
    2558:	10 92 0f 01 	sts	0x010F, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    255c:	99 23       	and	r25, r25
    255e:	24 f4       	brge	.+8      	; 0x2568 <uart1_init+0x1c>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
    2560:	22 e0       	ldi	r18, 0x02	; 2
    2562:	20 93 9b 00 	sts	0x009B, r18
      baudrate &= ~0x8000;
    2566:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
    2568:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char) baudrate;
    256c:	80 93 99 00 	sts	0x0099, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
    2570:	88 e9       	ldi	r24, 0x98	; 152
    2572:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
    #else
    UCSR1C = (3<<UCSZ10);
    2576:	86 e0       	ldi	r24, 0x06	; 6
    2578:	80 93 9d 00 	sts	0x009D, r24
    #endif 
}/* uart_init */
    257c:	08 95       	ret

0000257e <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
    257e:	90 91 10 01 	lds	r25, 0x0110
    2582:	80 91 0f 01 	lds	r24, 0x010F
    2586:	98 17       	cp	r25, r24
    2588:	91 f0       	breq	.+36     	; 0x25ae <uart1_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    258a:	80 91 0f 01 	lds	r24, 0x010F
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	8f 71       	andi	r24, 0x1F	; 31
    UART1_RxTail = tmptail; 
    2592:	80 93 0f 01 	sts	0x010F, r24
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    2596:	e3 e1       	ldi	r30, 0x13	; 19
    2598:	f1 e0       	ldi	r31, 0x01	; 1
    259a:	e8 0f       	add	r30, r24
    259c:	f1 1d       	adc	r31, r1
    259e:	20 81       	ld	r18, Z
    
    return (UART1_LastRxError << 8) + data;
    25a0:	30 91 0e 01 	lds	r19, 0x010E
    25a4:	93 2f       	mov	r25, r19
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	82 0f       	add	r24, r18
    25aa:	91 1d       	adc	r25, r1
    25ac:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    
    return (UART1_LastRxError << 8) + data;

}/* uart1_getc */
    25b2:	08 95       	ret

000025b4 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    25b4:	20 91 12 01 	lds	r18, 0x0112
    25b8:	2f 5f       	subi	r18, 0xFF	; 255
    25ba:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    25bc:	90 91 11 01 	lds	r25, 0x0111
    25c0:	29 17       	cp	r18, r25
    25c2:	e1 f3       	breq	.-8      	; 0x25bc <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    25c4:	e3 e3       	ldi	r30, 0x33	; 51
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	e2 0f       	add	r30, r18
    25ca:	f1 1d       	adc	r31, r1
    25cc:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    25ce:	20 93 12 01 	sts	0x0112, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    25d2:	ea e9       	ldi	r30, 0x9A	; 154
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	80 62       	ori	r24, 0x20	; 32
    25da:	80 83       	st	Z, r24

}/* uart1_putc */
    25dc:	08 95       	ret

000025de <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	ec 01       	movw	r28, r24
    while (*s) 
    25e4:	88 81       	ld	r24, Y
    25e6:	88 23       	and	r24, r24
    25e8:	31 f0       	breq	.+12     	; 0x25f6 <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
    25ea:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
    25ec:	0e 94 da 12 	call	0x25b4	; 0x25b4 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    25f0:	89 91       	ld	r24, Y+
    25f2:	88 23       	and	r24, r24
    25f4:	d9 f7       	brne	.-10     	; 0x25ec <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2602:	fc 01       	movw	r30, r24
    2604:	84 91       	lpm	r24, Z
    2606:	88 23       	and	r24, r24
    2608:	41 f0       	breq	.+16     	; 0x261a <uart1_puts_p+0x1e>
    260a:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
    260c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <uart1_putc>
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2610:	fe 01       	movw	r30, r28
    2612:	21 96       	adiw	r28, 0x01	; 1
    2614:	84 91       	lpm	r24, Z
    2616:	88 23       	and	r24, r24
    2618:	c9 f7       	brne	.-14     	; 0x260c <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <uart1_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart1_available(void)
{
        return (UART_RX_BUFFER_MASK + UART1_RxHead - UART1_RxTail) % UART_RX_BUFFER_MASK;
    2620:	80 91 10 01 	lds	r24, 0x0110
    2624:	20 91 0f 01 	lds	r18, 0x010F
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	4f 96       	adiw	r24, 0x1f	; 31
    262c:	82 1b       	sub	r24, r18
    262e:	91 09       	sbc	r25, r1
    2630:	6f e1       	ldi	r22, 0x1F	; 31
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__divmodhi4>
}/* uart1_available */
    2638:	08 95       	ret

0000263a <uart1_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart1_flush(void)
{
        UART1_RxHead = UART1_RxTail;
    263a:	80 91 0f 01 	lds	r24, 0x010F
    263e:	80 93 10 01 	sts	0x0110, r24
}/* uart1_flush */
    2642:	08 95       	ret

00002644 <__subsf3>:
    2644:	50 58       	subi	r21, 0x80	; 128

00002646 <__addsf3>:
    2646:	bb 27       	eor	r27, r27
    2648:	aa 27       	eor	r26, r26
    264a:	0e d0       	rcall	.+28     	; 0x2668 <__addsf3x>
    264c:	e6 c1       	rjmp	.+972    	; 0x2a1a <__fp_round>
    264e:	d7 d1       	rcall	.+942    	; 0x29fe <__fp_pscA>
    2650:	30 f0       	brcs	.+12     	; 0x265e <__addsf3+0x18>
    2652:	dc d1       	rcall	.+952    	; 0x2a0c <__fp_pscB>
    2654:	20 f0       	brcs	.+8      	; 0x265e <__addsf3+0x18>
    2656:	31 f4       	brne	.+12     	; 0x2664 <__addsf3+0x1e>
    2658:	9f 3f       	cpi	r25, 0xFF	; 255
    265a:	11 f4       	brne	.+4      	; 0x2660 <__addsf3+0x1a>
    265c:	1e f4       	brtc	.+6      	; 0x2664 <__addsf3+0x1e>
    265e:	96 c1       	rjmp	.+812    	; 0x298c <__fp_nan>
    2660:	0e f4       	brtc	.+2      	; 0x2664 <__addsf3+0x1e>
    2662:	e0 95       	com	r30
    2664:	e7 fb       	bst	r30, 7
    2666:	8c c1       	rjmp	.+792    	; 0x2980 <__fp_inf>

00002668 <__addsf3x>:
    2668:	e9 2f       	mov	r30, r25
    266a:	e8 d1       	rcall	.+976    	; 0x2a3c <__fp_split3>
    266c:	80 f3       	brcs	.-32     	; 0x264e <__addsf3+0x8>
    266e:	ba 17       	cp	r27, r26
    2670:	62 07       	cpc	r22, r18
    2672:	73 07       	cpc	r23, r19
    2674:	84 07       	cpc	r24, r20
    2676:	95 07       	cpc	r25, r21
    2678:	18 f0       	brcs	.+6      	; 0x2680 <__addsf3x+0x18>
    267a:	71 f4       	brne	.+28     	; 0x2698 <__addsf3x+0x30>
    267c:	9e f5       	brtc	.+102    	; 0x26e4 <__addsf3x+0x7c>
    267e:	00 c2       	rjmp	.+1024   	; 0x2a80 <__fp_zero>
    2680:	0e f4       	brtc	.+2      	; 0x2684 <__addsf3x+0x1c>
    2682:	e0 95       	com	r30
    2684:	0b 2e       	mov	r0, r27
    2686:	ba 2f       	mov	r27, r26
    2688:	a0 2d       	mov	r26, r0
    268a:	0b 01       	movw	r0, r22
    268c:	b9 01       	movw	r22, r18
    268e:	90 01       	movw	r18, r0
    2690:	0c 01       	movw	r0, r24
    2692:	ca 01       	movw	r24, r20
    2694:	a0 01       	movw	r20, r0
    2696:	11 24       	eor	r1, r1
    2698:	ff 27       	eor	r31, r31
    269a:	59 1b       	sub	r21, r25
    269c:	99 f0       	breq	.+38     	; 0x26c4 <__addsf3x+0x5c>
    269e:	59 3f       	cpi	r21, 0xF9	; 249
    26a0:	50 f4       	brcc	.+20     	; 0x26b6 <__addsf3x+0x4e>
    26a2:	50 3e       	cpi	r21, 0xE0	; 224
    26a4:	68 f1       	brcs	.+90     	; 0x2700 <__addsf3x+0x98>
    26a6:	1a 16       	cp	r1, r26
    26a8:	f0 40       	sbci	r31, 0x00	; 0
    26aa:	a2 2f       	mov	r26, r18
    26ac:	23 2f       	mov	r18, r19
    26ae:	34 2f       	mov	r19, r20
    26b0:	44 27       	eor	r20, r20
    26b2:	58 5f       	subi	r21, 0xF8	; 248
    26b4:	f3 cf       	rjmp	.-26     	; 0x269c <__addsf3x+0x34>
    26b6:	46 95       	lsr	r20
    26b8:	37 95       	ror	r19
    26ba:	27 95       	ror	r18
    26bc:	a7 95       	ror	r26
    26be:	f0 40       	sbci	r31, 0x00	; 0
    26c0:	53 95       	inc	r21
    26c2:	c9 f7       	brne	.-14     	; 0x26b6 <__addsf3x+0x4e>
    26c4:	7e f4       	brtc	.+30     	; 0x26e4 <__addsf3x+0x7c>
    26c6:	1f 16       	cp	r1, r31
    26c8:	ba 0b       	sbc	r27, r26
    26ca:	62 0b       	sbc	r22, r18
    26cc:	73 0b       	sbc	r23, r19
    26ce:	84 0b       	sbc	r24, r20
    26d0:	ba f0       	brmi	.+46     	; 0x2700 <__addsf3x+0x98>
    26d2:	91 50       	subi	r25, 0x01	; 1
    26d4:	a1 f0       	breq	.+40     	; 0x26fe <__addsf3x+0x96>
    26d6:	ff 0f       	add	r31, r31
    26d8:	bb 1f       	adc	r27, r27
    26da:	66 1f       	adc	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	88 1f       	adc	r24, r24
    26e0:	c2 f7       	brpl	.-16     	; 0x26d2 <__addsf3x+0x6a>
    26e2:	0e c0       	rjmp	.+28     	; 0x2700 <__addsf3x+0x98>
    26e4:	ba 0f       	add	r27, r26
    26e6:	62 1f       	adc	r22, r18
    26e8:	73 1f       	adc	r23, r19
    26ea:	84 1f       	adc	r24, r20
    26ec:	48 f4       	brcc	.+18     	; 0x2700 <__addsf3x+0x98>
    26ee:	87 95       	ror	r24
    26f0:	77 95       	ror	r23
    26f2:	67 95       	ror	r22
    26f4:	b7 95       	ror	r27
    26f6:	f7 95       	ror	r31
    26f8:	9e 3f       	cpi	r25, 0xFE	; 254
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <__addsf3x+0x96>
    26fc:	b3 cf       	rjmp	.-154    	; 0x2664 <__addsf3+0x1e>
    26fe:	93 95       	inc	r25
    2700:	88 0f       	add	r24, r24
    2702:	08 f0       	brcs	.+2      	; 0x2706 <__addsf3x+0x9e>
    2704:	99 27       	eor	r25, r25
    2706:	ee 0f       	add	r30, r30
    2708:	97 95       	ror	r25
    270a:	87 95       	ror	r24
    270c:	08 95       	ret

0000270e <asin>:
    270e:	9f 93       	push	r25
    2710:	9f 77       	andi	r25, 0x7F	; 127
    2712:	ee e3       	ldi	r30, 0x3E	; 62
    2714:	89 37       	cpi	r24, 0x79	; 121
    2716:	9e 07       	cpc	r25, r30
    2718:	20 f4       	brcc	.+8      	; 0x2722 <asin+0x14>
    271a:	ec e8       	ldi	r30, 0x8C	; 140
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	5e d1       	rcall	.+700    	; 0x29dc <__fp_powsodd>
    2720:	09 c0       	rjmp	.+18     	; 0x2734 <asin+0x26>
    2722:	13 d1       	rcall	.+550    	; 0x294a <__fp_arccos>
    2724:	90 58       	subi	r25, 0x80	; 128
    2726:	a2 ea       	ldi	r26, 0xA2	; 162
    2728:	2a ed       	ldi	r18, 0xDA	; 218
    272a:	3f e0       	ldi	r19, 0x0F	; 15
    272c:	49 ec       	ldi	r20, 0xC9	; 201
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	9b df       	rcall	.-202    	; 0x2668 <__addsf3x>
    2732:	73 d1       	rcall	.+742    	; 0x2a1a <__fp_round>
    2734:	0f 90       	pop	r0
    2736:	07 fc       	sbrc	r0, 7
    2738:	90 58       	subi	r25, 0x80	; 128
    273a:	08 95       	ret
    273c:	60 d1       	rcall	.+704    	; 0x29fe <__fp_pscA>
    273e:	58 f0       	brcs	.+22     	; 0x2756 <asin+0x48>
    2740:	80 e8       	ldi	r24, 0x80	; 128
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	09 f4       	brne	.+2      	; 0x2748 <asin+0x3a>
    2746:	9e ef       	ldi	r25, 0xFE	; 254
    2748:	61 d1       	rcall	.+706    	; 0x2a0c <__fp_pscB>
    274a:	28 f0       	brcs	.+10     	; 0x2756 <asin+0x48>
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	51 e0       	ldi	r21, 0x01	; 1
    2750:	59 f4       	brne	.+22     	; 0x2768 <atan2+0xe>
    2752:	5e ef       	ldi	r21, 0xFE	; 254
    2754:	09 c0       	rjmp	.+18     	; 0x2768 <atan2+0xe>
    2756:	1a c1       	rjmp	.+564    	; 0x298c <__fp_nan>
    2758:	93 c1       	rjmp	.+806    	; 0x2a80 <__fp_zero>

0000275a <atan2>:
    275a:	e9 2f       	mov	r30, r25
    275c:	e0 78       	andi	r30, 0x80	; 128
    275e:	6e d1       	rcall	.+732    	; 0x2a3c <__fp_split3>
    2760:	68 f3       	brcs	.-38     	; 0x273c <asin+0x2e>
    2762:	09 2e       	mov	r0, r25
    2764:	05 2a       	or	r0, r21
    2766:	c1 f3       	breq	.-16     	; 0x2758 <asin+0x4a>
    2768:	26 17       	cp	r18, r22
    276a:	37 07       	cpc	r19, r23
    276c:	48 07       	cpc	r20, r24
    276e:	59 07       	cpc	r21, r25
    2770:	38 f0       	brcs	.+14     	; 0x2780 <atan2+0x26>
    2772:	0e 2e       	mov	r0, r30
    2774:	07 f8       	bld	r0, 7
    2776:	e0 25       	eor	r30, r0
    2778:	69 f0       	breq	.+26     	; 0x2794 <atan2+0x3a>
    277a:	e0 25       	eor	r30, r0
    277c:	e0 64       	ori	r30, 0x40	; 64
    277e:	0a c0       	rjmp	.+20     	; 0x2794 <atan2+0x3a>
    2780:	ef 63       	ori	r30, 0x3F	; 63
    2782:	07 f8       	bld	r0, 7
    2784:	00 94       	com	r0
    2786:	07 fa       	bst	r0, 7
    2788:	db 01       	movw	r26, r22
    278a:	b9 01       	movw	r22, r18
    278c:	9d 01       	movw	r18, r26
    278e:	dc 01       	movw	r26, r24
    2790:	ca 01       	movw	r24, r20
    2792:	ad 01       	movw	r20, r26
    2794:	ef 93       	push	r30
    2796:	43 d0       	rcall	.+134    	; 0x281e <__divsf3_pse>
    2798:	40 d1       	rcall	.+640    	; 0x2a1a <__fp_round>
    279a:	0a d0       	rcall	.+20     	; 0x27b0 <atan>
    279c:	5f 91       	pop	r21
    279e:	55 23       	and	r21, r21
    27a0:	31 f0       	breq	.+12     	; 0x27ae <atan2+0x54>
    27a2:	2b ed       	ldi	r18, 0xDB	; 219
    27a4:	3f e0       	ldi	r19, 0x0F	; 15
    27a6:	49 e4       	ldi	r20, 0x49	; 73
    27a8:	50 fd       	sbrc	r21, 0
    27aa:	49 ec       	ldi	r20, 0xC9	; 201
    27ac:	4c cf       	rjmp	.-360    	; 0x2646 <__addsf3>
    27ae:	08 95       	ret

000027b0 <atan>:
    27b0:	df 93       	push	r29
    27b2:	dd 27       	eor	r29, r29
    27b4:	b9 2f       	mov	r27, r25
    27b6:	bf 77       	andi	r27, 0x7F	; 127
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	16 16       	cp	r1, r22
    27be:	17 06       	cpc	r1, r23
    27c0:	48 07       	cpc	r20, r24
    27c2:	5b 07       	cpc	r21, r27
    27c4:	10 f4       	brcc	.+4      	; 0x27ca <atan+0x1a>
    27c6:	d9 2f       	mov	r29, r25
    27c8:	62 d1       	rcall	.+708    	; 0x2a8e <inverse>
    27ca:	9f 93       	push	r25
    27cc:	8f 93       	push	r24
    27ce:	7f 93       	push	r23
    27d0:	6f 93       	push	r22
    27d2:	09 d2       	rcall	.+1042   	; 0x2be6 <square>
    27d4:	e0 ea       	ldi	r30, 0xA0	; 160
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	dc d0       	rcall	.+440    	; 0x2992 <__fp_powser>
    27da:	1f d1       	rcall	.+574    	; 0x2a1a <__fp_round>
    27dc:	2f 91       	pop	r18
    27de:	3f 91       	pop	r19
    27e0:	4f 91       	pop	r20
    27e2:	5f 91       	pop	r21
    27e4:	67 d1       	rcall	.+718    	; 0x2ab4 <__mulsf3x>
    27e6:	dd 23       	and	r29, r29
    27e8:	49 f0       	breq	.+18     	; 0x27fc <atan+0x4c>
    27ea:	90 58       	subi	r25, 0x80	; 128
    27ec:	a2 ea       	ldi	r26, 0xA2	; 162
    27ee:	2a ed       	ldi	r18, 0xDA	; 218
    27f0:	3f e0       	ldi	r19, 0x0F	; 15
    27f2:	49 ec       	ldi	r20, 0xC9	; 201
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	d0 78       	andi	r29, 0x80	; 128
    27f8:	5d 27       	eor	r21, r29
    27fa:	36 df       	rcall	.-404    	; 0x2668 <__addsf3x>
    27fc:	df 91       	pop	r29
    27fe:	0d c1       	rjmp	.+538    	; 0x2a1a <__fp_round>

00002800 <__divsf3>:
    2800:	0c d0       	rcall	.+24     	; 0x281a <__divsf3x>
    2802:	0b c1       	rjmp	.+534    	; 0x2a1a <__fp_round>
    2804:	03 d1       	rcall	.+518    	; 0x2a0c <__fp_pscB>
    2806:	40 f0       	brcs	.+16     	; 0x2818 <__divsf3+0x18>
    2808:	fa d0       	rcall	.+500    	; 0x29fe <__fp_pscA>
    280a:	30 f0       	brcs	.+12     	; 0x2818 <__divsf3+0x18>
    280c:	21 f4       	brne	.+8      	; 0x2816 <__divsf3+0x16>
    280e:	5f 3f       	cpi	r21, 0xFF	; 255
    2810:	19 f0       	breq	.+6      	; 0x2818 <__divsf3+0x18>
    2812:	b6 c0       	rjmp	.+364    	; 0x2980 <__fp_inf>
    2814:	51 11       	cpse	r21, r1
    2816:	35 c1       	rjmp	.+618    	; 0x2a82 <__fp_szero>
    2818:	b9 c0       	rjmp	.+370    	; 0x298c <__fp_nan>

0000281a <__divsf3x>:
    281a:	10 d1       	rcall	.+544    	; 0x2a3c <__fp_split3>
    281c:	98 f3       	brcs	.-26     	; 0x2804 <__divsf3+0x4>

0000281e <__divsf3_pse>:
    281e:	99 23       	and	r25, r25
    2820:	c9 f3       	breq	.-14     	; 0x2814 <__divsf3+0x14>
    2822:	55 23       	and	r21, r21
    2824:	b1 f3       	breq	.-20     	; 0x2812 <__divsf3+0x12>
    2826:	95 1b       	sub	r25, r21
    2828:	55 0b       	sbc	r21, r21
    282a:	bb 27       	eor	r27, r27
    282c:	aa 27       	eor	r26, r26
    282e:	62 17       	cp	r22, r18
    2830:	73 07       	cpc	r23, r19
    2832:	84 07       	cpc	r24, r20
    2834:	38 f0       	brcs	.+14     	; 0x2844 <__divsf3_pse+0x26>
    2836:	9f 5f       	subi	r25, 0xFF	; 255
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	22 0f       	add	r18, r18
    283c:	33 1f       	adc	r19, r19
    283e:	44 1f       	adc	r20, r20
    2840:	aa 1f       	adc	r26, r26
    2842:	a9 f3       	breq	.-22     	; 0x282e <__divsf3_pse+0x10>
    2844:	33 d0       	rcall	.+102    	; 0x28ac <__divsf3_pse+0x8e>
    2846:	0e 2e       	mov	r0, r30
    2848:	3a f0       	brmi	.+14     	; 0x2858 <__divsf3_pse+0x3a>
    284a:	e0 e8       	ldi	r30, 0x80	; 128
    284c:	30 d0       	rcall	.+96     	; 0x28ae <__divsf3_pse+0x90>
    284e:	91 50       	subi	r25, 0x01	; 1
    2850:	50 40       	sbci	r21, 0x00	; 0
    2852:	e6 95       	lsr	r30
    2854:	00 1c       	adc	r0, r0
    2856:	ca f7       	brpl	.-14     	; 0x284a <__divsf3_pse+0x2c>
    2858:	29 d0       	rcall	.+82     	; 0x28ac <__divsf3_pse+0x8e>
    285a:	fe 2f       	mov	r31, r30
    285c:	27 d0       	rcall	.+78     	; 0x28ac <__divsf3_pse+0x8e>
    285e:	66 0f       	add	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	88 1f       	adc	r24, r24
    2864:	bb 1f       	adc	r27, r27
    2866:	26 17       	cp	r18, r22
    2868:	37 07       	cpc	r19, r23
    286a:	48 07       	cpc	r20, r24
    286c:	ab 07       	cpc	r26, r27
    286e:	b0 e8       	ldi	r27, 0x80	; 128
    2870:	09 f0       	breq	.+2      	; 0x2874 <__divsf3_pse+0x56>
    2872:	bb 0b       	sbc	r27, r27
    2874:	80 2d       	mov	r24, r0
    2876:	bf 01       	movw	r22, r30
    2878:	ff 27       	eor	r31, r31
    287a:	93 58       	subi	r25, 0x83	; 131
    287c:	5f 4f       	sbci	r21, 0xFF	; 255
    287e:	2a f0       	brmi	.+10     	; 0x288a <__divsf3_pse+0x6c>
    2880:	9e 3f       	cpi	r25, 0xFE	; 254
    2882:	51 05       	cpc	r21, r1
    2884:	68 f0       	brcs	.+26     	; 0x28a0 <__divsf3_pse+0x82>
    2886:	7c c0       	rjmp	.+248    	; 0x2980 <__fp_inf>
    2888:	fc c0       	rjmp	.+504    	; 0x2a82 <__fp_szero>
    288a:	5f 3f       	cpi	r21, 0xFF	; 255
    288c:	ec f3       	brlt	.-6      	; 0x2888 <__divsf3_pse+0x6a>
    288e:	98 3e       	cpi	r25, 0xE8	; 232
    2890:	dc f3       	brlt	.-10     	; 0x2888 <__divsf3_pse+0x6a>
    2892:	86 95       	lsr	r24
    2894:	77 95       	ror	r23
    2896:	67 95       	ror	r22
    2898:	b7 95       	ror	r27
    289a:	f7 95       	ror	r31
    289c:	9f 5f       	subi	r25, 0xFF	; 255
    289e:	c9 f7       	brne	.-14     	; 0x2892 <__divsf3_pse+0x74>
    28a0:	88 0f       	add	r24, r24
    28a2:	91 1d       	adc	r25, r1
    28a4:	96 95       	lsr	r25
    28a6:	87 95       	ror	r24
    28a8:	97 f9       	bld	r25, 7
    28aa:	08 95       	ret
    28ac:	e1 e0       	ldi	r30, 0x01	; 1
    28ae:	66 0f       	add	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	bb 1f       	adc	r27, r27
    28b6:	62 17       	cp	r22, r18
    28b8:	73 07       	cpc	r23, r19
    28ba:	84 07       	cpc	r24, r20
    28bc:	ba 07       	cpc	r27, r26
    28be:	20 f0       	brcs	.+8      	; 0x28c8 <__divsf3_pse+0xaa>
    28c0:	62 1b       	sub	r22, r18
    28c2:	73 0b       	sbc	r23, r19
    28c4:	84 0b       	sbc	r24, r20
    28c6:	ba 0b       	sbc	r27, r26
    28c8:	ee 1f       	adc	r30, r30
    28ca:	88 f7       	brcc	.-30     	; 0x28ae <__divsf3_pse+0x90>
    28cc:	e0 95       	com	r30
    28ce:	08 95       	ret

000028d0 <__floatunsisf>:
    28d0:	e8 94       	clt
    28d2:	09 c0       	rjmp	.+18     	; 0x28e6 <__floatsisf+0x12>

000028d4 <__floatsisf>:
    28d4:	97 fb       	bst	r25, 7
    28d6:	3e f4       	brtc	.+14     	; 0x28e6 <__floatsisf+0x12>
    28d8:	90 95       	com	r25
    28da:	80 95       	com	r24
    28dc:	70 95       	com	r23
    28de:	61 95       	neg	r22
    28e0:	7f 4f       	sbci	r23, 0xFF	; 255
    28e2:	8f 4f       	sbci	r24, 0xFF	; 255
    28e4:	9f 4f       	sbci	r25, 0xFF	; 255
    28e6:	99 23       	and	r25, r25
    28e8:	a9 f0       	breq	.+42     	; 0x2914 <__floatsisf+0x40>
    28ea:	f9 2f       	mov	r31, r25
    28ec:	96 e9       	ldi	r25, 0x96	; 150
    28ee:	bb 27       	eor	r27, r27
    28f0:	93 95       	inc	r25
    28f2:	f6 95       	lsr	r31
    28f4:	87 95       	ror	r24
    28f6:	77 95       	ror	r23
    28f8:	67 95       	ror	r22
    28fa:	b7 95       	ror	r27
    28fc:	f1 11       	cpse	r31, r1
    28fe:	f8 cf       	rjmp	.-16     	; 0x28f0 <__floatsisf+0x1c>
    2900:	fa f4       	brpl	.+62     	; 0x2940 <__floatsisf+0x6c>
    2902:	bb 0f       	add	r27, r27
    2904:	11 f4       	brne	.+4      	; 0x290a <__floatsisf+0x36>
    2906:	60 ff       	sbrs	r22, 0
    2908:	1b c0       	rjmp	.+54     	; 0x2940 <__floatsisf+0x6c>
    290a:	6f 5f       	subi	r22, 0xFF	; 255
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	8f 4f       	sbci	r24, 0xFF	; 255
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	16 c0       	rjmp	.+44     	; 0x2940 <__floatsisf+0x6c>
    2914:	88 23       	and	r24, r24
    2916:	11 f0       	breq	.+4      	; 0x291c <__floatsisf+0x48>
    2918:	96 e9       	ldi	r25, 0x96	; 150
    291a:	11 c0       	rjmp	.+34     	; 0x293e <__floatsisf+0x6a>
    291c:	77 23       	and	r23, r23
    291e:	21 f0       	breq	.+8      	; 0x2928 <__floatsisf+0x54>
    2920:	9e e8       	ldi	r25, 0x8E	; 142
    2922:	87 2f       	mov	r24, r23
    2924:	76 2f       	mov	r23, r22
    2926:	05 c0       	rjmp	.+10     	; 0x2932 <__floatsisf+0x5e>
    2928:	66 23       	and	r22, r22
    292a:	71 f0       	breq	.+28     	; 0x2948 <__floatsisf+0x74>
    292c:	96 e8       	ldi	r25, 0x86	; 134
    292e:	86 2f       	mov	r24, r22
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	2a f0       	brmi	.+10     	; 0x2940 <__floatsisf+0x6c>
    2936:	9a 95       	dec	r25
    2938:	66 0f       	add	r22, r22
    293a:	77 1f       	adc	r23, r23
    293c:	88 1f       	adc	r24, r24
    293e:	da f7       	brpl	.-10     	; 0x2936 <__floatsisf+0x62>
    2940:	88 0f       	add	r24, r24
    2942:	96 95       	lsr	r25
    2944:	87 95       	ror	r24
    2946:	97 f9       	bld	r25, 7
    2948:	08 95       	ret

0000294a <__fp_arccos>:
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	1f 93       	push	r17
    2950:	0f 93       	push	r16
    2952:	8b 01       	movw	r16, r22
    2954:	ec 01       	movw	r28, r24
    2956:	ed ec       	ldi	r30, 0xCD	; 205
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	1b d0       	rcall	.+54     	; 0x2992 <__fp_powser>
    295c:	5e d0       	rcall	.+188    	; 0x2a1a <__fp_round>
    295e:	98 01       	movw	r18, r16
    2960:	ae 01       	movw	r20, r28
    2962:	8b 01       	movw	r16, r22
    2964:	ec 01       	movw	r28, r24
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	80 e8       	ldi	r24, 0x80	; 128
    296c:	9f e3       	ldi	r25, 0x3F	; 63
    296e:	6a de       	rcall	.-812    	; 0x2644 <__subsf3>
    2970:	fc d0       	rcall	.+504    	; 0x2b6a <sqrt>
    2972:	98 01       	movw	r18, r16
    2974:	ae 01       	movw	r20, r28
    2976:	0f 91       	pop	r16
    2978:	1f 91       	pop	r17
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	9a c0       	rjmp	.+308    	; 0x2ab4 <__mulsf3x>

00002980 <__fp_inf>:
    2980:	97 f9       	bld	r25, 7
    2982:	9f 67       	ori	r25, 0x7F	; 127
    2984:	80 e8       	ldi	r24, 0x80	; 128
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	08 95       	ret

0000298c <__fp_nan>:
    298c:	9f ef       	ldi	r25, 0xFF	; 255
    298e:	80 ec       	ldi	r24, 0xC0	; 192
    2990:	08 95       	ret

00002992 <__fp_powser>:
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	1f 93       	push	r17
    2998:	0f 93       	push	r16
    299a:	ff 92       	push	r15
    299c:	ef 92       	push	r14
    299e:	df 92       	push	r13
    29a0:	7b 01       	movw	r14, r22
    29a2:	8c 01       	movw	r16, r24
    29a4:	68 94       	set
    29a6:	05 c0       	rjmp	.+10     	; 0x29b2 <__fp_powser+0x20>
    29a8:	da 2e       	mov	r13, r26
    29aa:	ef 01       	movw	r28, r30
    29ac:	83 d0       	rcall	.+262    	; 0x2ab4 <__mulsf3x>
    29ae:	fe 01       	movw	r30, r28
    29b0:	e8 94       	clt
    29b2:	a5 91       	lpm	r26, Z+
    29b4:	25 91       	lpm	r18, Z+
    29b6:	35 91       	lpm	r19, Z+
    29b8:	45 91       	lpm	r20, Z+
    29ba:	55 91       	lpm	r21, Z+
    29bc:	ae f3       	brts	.-22     	; 0x29a8 <__fp_powser+0x16>
    29be:	ef 01       	movw	r28, r30
    29c0:	53 de       	rcall	.-858    	; 0x2668 <__addsf3x>
    29c2:	fe 01       	movw	r30, r28
    29c4:	97 01       	movw	r18, r14
    29c6:	a8 01       	movw	r20, r16
    29c8:	da 94       	dec	r13
    29ca:	79 f7       	brne	.-34     	; 0x29aa <__fp_powser+0x18>
    29cc:	df 90       	pop	r13
    29ce:	ef 90       	pop	r14
    29d0:	ff 90       	pop	r15
    29d2:	0f 91       	pop	r16
    29d4:	1f 91       	pop	r17
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <__fp_powsodd>:
    29dc:	9f 93       	push	r25
    29de:	8f 93       	push	r24
    29e0:	7f 93       	push	r23
    29e2:	6f 93       	push	r22
    29e4:	ff 93       	push	r31
    29e6:	ef 93       	push	r30
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	57 d0       	rcall	.+174    	; 0x2a9c <__mulsf3>
    29ee:	ef 91       	pop	r30
    29f0:	ff 91       	pop	r31
    29f2:	cf df       	rcall	.-98     	; 0x2992 <__fp_powser>
    29f4:	2f 91       	pop	r18
    29f6:	3f 91       	pop	r19
    29f8:	4f 91       	pop	r20
    29fa:	5f 91       	pop	r21
    29fc:	4f c0       	rjmp	.+158    	; 0x2a9c <__mulsf3>

000029fe <__fp_pscA>:
    29fe:	00 24       	eor	r0, r0
    2a00:	0a 94       	dec	r0
    2a02:	16 16       	cp	r1, r22
    2a04:	17 06       	cpc	r1, r23
    2a06:	18 06       	cpc	r1, r24
    2a08:	09 06       	cpc	r0, r25
    2a0a:	08 95       	ret

00002a0c <__fp_pscB>:
    2a0c:	00 24       	eor	r0, r0
    2a0e:	0a 94       	dec	r0
    2a10:	12 16       	cp	r1, r18
    2a12:	13 06       	cpc	r1, r19
    2a14:	14 06       	cpc	r1, r20
    2a16:	05 06       	cpc	r0, r21
    2a18:	08 95       	ret

00002a1a <__fp_round>:
    2a1a:	09 2e       	mov	r0, r25
    2a1c:	03 94       	inc	r0
    2a1e:	00 0c       	add	r0, r0
    2a20:	11 f4       	brne	.+4      	; 0x2a26 <__fp_round+0xc>
    2a22:	88 23       	and	r24, r24
    2a24:	52 f0       	brmi	.+20     	; 0x2a3a <__fp_round+0x20>
    2a26:	bb 0f       	add	r27, r27
    2a28:	40 f4       	brcc	.+16     	; 0x2a3a <__fp_round+0x20>
    2a2a:	bf 2b       	or	r27, r31
    2a2c:	11 f4       	brne	.+4      	; 0x2a32 <__fp_round+0x18>
    2a2e:	60 ff       	sbrs	r22, 0
    2a30:	04 c0       	rjmp	.+8      	; 0x2a3a <__fp_round+0x20>
    2a32:	6f 5f       	subi	r22, 0xFF	; 255
    2a34:	7f 4f       	sbci	r23, 0xFF	; 255
    2a36:	8f 4f       	sbci	r24, 0xFF	; 255
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	08 95       	ret

00002a3c <__fp_split3>:
    2a3c:	57 fd       	sbrc	r21, 7
    2a3e:	90 58       	subi	r25, 0x80	; 128
    2a40:	44 0f       	add	r20, r20
    2a42:	55 1f       	adc	r21, r21
    2a44:	59 f0       	breq	.+22     	; 0x2a5c <__fp_splitA+0x10>
    2a46:	5f 3f       	cpi	r21, 0xFF	; 255
    2a48:	71 f0       	breq	.+28     	; 0x2a66 <__fp_splitA+0x1a>
    2a4a:	47 95       	ror	r20

00002a4c <__fp_splitA>:
    2a4c:	88 0f       	add	r24, r24
    2a4e:	97 fb       	bst	r25, 7
    2a50:	99 1f       	adc	r25, r25
    2a52:	61 f0       	breq	.+24     	; 0x2a6c <__fp_splitA+0x20>
    2a54:	9f 3f       	cpi	r25, 0xFF	; 255
    2a56:	79 f0       	breq	.+30     	; 0x2a76 <__fp_splitA+0x2a>
    2a58:	87 95       	ror	r24
    2a5a:	08 95       	ret
    2a5c:	12 16       	cp	r1, r18
    2a5e:	13 06       	cpc	r1, r19
    2a60:	14 06       	cpc	r1, r20
    2a62:	55 1f       	adc	r21, r21
    2a64:	f2 cf       	rjmp	.-28     	; 0x2a4a <__fp_split3+0xe>
    2a66:	46 95       	lsr	r20
    2a68:	f1 df       	rcall	.-30     	; 0x2a4c <__fp_splitA>
    2a6a:	08 c0       	rjmp	.+16     	; 0x2a7c <__fp_splitA+0x30>
    2a6c:	16 16       	cp	r1, r22
    2a6e:	17 06       	cpc	r1, r23
    2a70:	18 06       	cpc	r1, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	f1 cf       	rjmp	.-30     	; 0x2a58 <__fp_splitA+0xc>
    2a76:	86 95       	lsr	r24
    2a78:	71 05       	cpc	r23, r1
    2a7a:	61 05       	cpc	r22, r1
    2a7c:	08 94       	sec
    2a7e:	08 95       	ret

00002a80 <__fp_zero>:
    2a80:	e8 94       	clt

00002a82 <__fp_szero>:
    2a82:	bb 27       	eor	r27, r27
    2a84:	66 27       	eor	r22, r22
    2a86:	77 27       	eor	r23, r23
    2a88:	cb 01       	movw	r24, r22
    2a8a:	97 f9       	bld	r25, 7
    2a8c:	08 95       	ret

00002a8e <inverse>:
    2a8e:	9b 01       	movw	r18, r22
    2a90:	ac 01       	movw	r20, r24
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	80 e8       	ldi	r24, 0x80	; 128
    2a98:	9f e3       	ldi	r25, 0x3F	; 63
    2a9a:	b2 ce       	rjmp	.-668    	; 0x2800 <__divsf3>

00002a9c <__mulsf3>:
    2a9c:	0b d0       	rcall	.+22     	; 0x2ab4 <__mulsf3x>
    2a9e:	bd cf       	rjmp	.-134    	; 0x2a1a <__fp_round>
    2aa0:	ae df       	rcall	.-164    	; 0x29fe <__fp_pscA>
    2aa2:	28 f0       	brcs	.+10     	; 0x2aae <__mulsf3+0x12>
    2aa4:	b3 df       	rcall	.-154    	; 0x2a0c <__fp_pscB>
    2aa6:	18 f0       	brcs	.+6      	; 0x2aae <__mulsf3+0x12>
    2aa8:	95 23       	and	r25, r21
    2aaa:	09 f0       	breq	.+2      	; 0x2aae <__mulsf3+0x12>
    2aac:	69 cf       	rjmp	.-302    	; 0x2980 <__fp_inf>
    2aae:	6e cf       	rjmp	.-292    	; 0x298c <__fp_nan>
    2ab0:	11 24       	eor	r1, r1
    2ab2:	e7 cf       	rjmp	.-50     	; 0x2a82 <__fp_szero>

00002ab4 <__mulsf3x>:
    2ab4:	c3 df       	rcall	.-122    	; 0x2a3c <__fp_split3>
    2ab6:	a0 f3       	brcs	.-24     	; 0x2aa0 <__mulsf3+0x4>

00002ab8 <__mulsf3_pse>:
    2ab8:	95 9f       	mul	r25, r21
    2aba:	d1 f3       	breq	.-12     	; 0x2ab0 <__mulsf3+0x14>
    2abc:	95 0f       	add	r25, r21
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	55 1f       	adc	r21, r21
    2ac2:	62 9f       	mul	r22, r18
    2ac4:	f0 01       	movw	r30, r0
    2ac6:	72 9f       	mul	r23, r18
    2ac8:	bb 27       	eor	r27, r27
    2aca:	f0 0d       	add	r31, r0
    2acc:	b1 1d       	adc	r27, r1
    2ace:	63 9f       	mul	r22, r19
    2ad0:	aa 27       	eor	r26, r26
    2ad2:	f0 0d       	add	r31, r0
    2ad4:	b1 1d       	adc	r27, r1
    2ad6:	aa 1f       	adc	r26, r26
    2ad8:	64 9f       	mul	r22, r20
    2ada:	66 27       	eor	r22, r22
    2adc:	b0 0d       	add	r27, r0
    2ade:	a1 1d       	adc	r26, r1
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	82 9f       	mul	r24, r18
    2ae4:	22 27       	eor	r18, r18
    2ae6:	b0 0d       	add	r27, r0
    2ae8:	a1 1d       	adc	r26, r1
    2aea:	62 1f       	adc	r22, r18
    2aec:	73 9f       	mul	r23, r19
    2aee:	b0 0d       	add	r27, r0
    2af0:	a1 1d       	adc	r26, r1
    2af2:	62 1f       	adc	r22, r18
    2af4:	83 9f       	mul	r24, r19
    2af6:	a0 0d       	add	r26, r0
    2af8:	61 1d       	adc	r22, r1
    2afa:	22 1f       	adc	r18, r18
    2afc:	74 9f       	mul	r23, r20
    2afe:	33 27       	eor	r19, r19
    2b00:	a0 0d       	add	r26, r0
    2b02:	61 1d       	adc	r22, r1
    2b04:	23 1f       	adc	r18, r19
    2b06:	84 9f       	mul	r24, r20
    2b08:	60 0d       	add	r22, r0
    2b0a:	21 1d       	adc	r18, r1
    2b0c:	82 2f       	mov	r24, r18
    2b0e:	76 2f       	mov	r23, r22
    2b10:	6a 2f       	mov	r22, r26
    2b12:	11 24       	eor	r1, r1
    2b14:	9f 57       	subi	r25, 0x7F	; 127
    2b16:	50 40       	sbci	r21, 0x00	; 0
    2b18:	8a f0       	brmi	.+34     	; 0x2b3c <__mulsf3_pse+0x84>
    2b1a:	e1 f0       	breq	.+56     	; 0x2b54 <__mulsf3_pse+0x9c>
    2b1c:	88 23       	and	r24, r24
    2b1e:	4a f0       	brmi	.+18     	; 0x2b32 <__mulsf3_pse+0x7a>
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	bb 1f       	adc	r27, r27
    2b26:	66 1f       	adc	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	50 40       	sbci	r21, 0x00	; 0
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <__mulsf3_pse+0x64>
    2b32:	9e 3f       	cpi	r25, 0xFE	; 254
    2b34:	51 05       	cpc	r21, r1
    2b36:	70 f0       	brcs	.+28     	; 0x2b54 <__mulsf3_pse+0x9c>
    2b38:	23 cf       	rjmp	.-442    	; 0x2980 <__fp_inf>
    2b3a:	a3 cf       	rjmp	.-186    	; 0x2a82 <__fp_szero>
    2b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b3e:	ec f3       	brlt	.-6      	; 0x2b3a <__mulsf3_pse+0x82>
    2b40:	98 3e       	cpi	r25, 0xE8	; 232
    2b42:	dc f3       	brlt	.-10     	; 0x2b3a <__mulsf3_pse+0x82>
    2b44:	86 95       	lsr	r24
    2b46:	77 95       	ror	r23
    2b48:	67 95       	ror	r22
    2b4a:	b7 95       	ror	r27
    2b4c:	f7 95       	ror	r31
    2b4e:	e7 95       	ror	r30
    2b50:	9f 5f       	subi	r25, 0xFF	; 255
    2b52:	c1 f7       	brne	.-16     	; 0x2b44 <__mulsf3_pse+0x8c>
    2b54:	fe 2b       	or	r31, r30
    2b56:	88 0f       	add	r24, r24
    2b58:	91 1d       	adc	r25, r1
    2b5a:	96 95       	lsr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	97 f9       	bld	r25, 7
    2b60:	08 95       	ret
    2b62:	11 f4       	brne	.+4      	; 0x2b68 <__mulsf3_pse+0xb0>
    2b64:	0e f4       	brtc	.+2      	; 0x2b68 <__mulsf3_pse+0xb0>
    2b66:	12 cf       	rjmp	.-476    	; 0x298c <__fp_nan>
    2b68:	41 c0       	rjmp	.+130    	; 0x2bec <__fp_mpack>

00002b6a <sqrt>:
    2b6a:	70 df       	rcall	.-288    	; 0x2a4c <__fp_splitA>
    2b6c:	d0 f3       	brcs	.-12     	; 0x2b62 <__mulsf3_pse+0xaa>
    2b6e:	99 23       	and	r25, r25
    2b70:	d9 f3       	breq	.-10     	; 0x2b68 <__mulsf3_pse+0xb0>
    2b72:	ce f3       	brts	.-14     	; 0x2b66 <__mulsf3_pse+0xae>
    2b74:	9f 57       	subi	r25, 0x7F	; 127
    2b76:	55 0b       	sbc	r21, r21
    2b78:	87 ff       	sbrs	r24, 7
    2b7a:	46 d0       	rcall	.+140    	; 0x2c08 <__fp_norm2>
    2b7c:	00 24       	eor	r0, r0
    2b7e:	a0 e6       	ldi	r26, 0x60	; 96
    2b80:	40 ea       	ldi	r20, 0xA0	; 160
    2b82:	90 01       	movw	r18, r0
    2b84:	80 58       	subi	r24, 0x80	; 128
    2b86:	56 95       	lsr	r21
    2b88:	97 95       	ror	r25
    2b8a:	28 f4       	brcc	.+10     	; 0x2b96 <sqrt+0x2c>
    2b8c:	80 5c       	subi	r24, 0xC0	; 192
    2b8e:	66 0f       	add	r22, r22
    2b90:	77 1f       	adc	r23, r23
    2b92:	88 1f       	adc	r24, r24
    2b94:	20 f0       	brcs	.+8      	; 0x2b9e <sqrt+0x34>
    2b96:	26 17       	cp	r18, r22
    2b98:	37 07       	cpc	r19, r23
    2b9a:	48 07       	cpc	r20, r24
    2b9c:	30 f4       	brcc	.+12     	; 0x2baa <sqrt+0x40>
    2b9e:	62 1b       	sub	r22, r18
    2ba0:	73 0b       	sbc	r23, r19
    2ba2:	84 0b       	sbc	r24, r20
    2ba4:	20 29       	or	r18, r0
    2ba6:	31 29       	or	r19, r1
    2ba8:	4a 2b       	or	r20, r26
    2baa:	a6 95       	lsr	r26
    2bac:	17 94       	ror	r1
    2bae:	07 94       	ror	r0
    2bb0:	20 25       	eor	r18, r0
    2bb2:	31 25       	eor	r19, r1
    2bb4:	4a 27       	eor	r20, r26
    2bb6:	58 f7       	brcc	.-42     	; 0x2b8e <sqrt+0x24>
    2bb8:	66 0f       	add	r22, r22
    2bba:	77 1f       	adc	r23, r23
    2bbc:	88 1f       	adc	r24, r24
    2bbe:	20 f0       	brcs	.+8      	; 0x2bc8 <sqrt+0x5e>
    2bc0:	26 17       	cp	r18, r22
    2bc2:	37 07       	cpc	r19, r23
    2bc4:	48 07       	cpc	r20, r24
    2bc6:	30 f4       	brcc	.+12     	; 0x2bd4 <sqrt+0x6a>
    2bc8:	62 0b       	sbc	r22, r18
    2bca:	73 0b       	sbc	r23, r19
    2bcc:	84 0b       	sbc	r24, r20
    2bce:	20 0d       	add	r18, r0
    2bd0:	31 1d       	adc	r19, r1
    2bd2:	41 1d       	adc	r20, r1
    2bd4:	a0 95       	com	r26
    2bd6:	81 f7       	brne	.-32     	; 0x2bb8 <sqrt+0x4e>
    2bd8:	b9 01       	movw	r22, r18
    2bda:	84 2f       	mov	r24, r20
    2bdc:	91 58       	subi	r25, 0x81	; 129
    2bde:	88 0f       	add	r24, r24
    2be0:	96 95       	lsr	r25
    2be2:	87 95       	ror	r24
    2be4:	08 95       	ret

00002be6 <square>:
    2be6:	9b 01       	movw	r18, r22
    2be8:	ac 01       	movw	r20, r24
    2bea:	58 cf       	rjmp	.-336    	; 0x2a9c <__mulsf3>

00002bec <__fp_mpack>:
    2bec:	9f 3f       	cpi	r25, 0xFF	; 255
    2bee:	31 f0       	breq	.+12     	; 0x2bfc <__fp_mpack_finite+0xc>

00002bf0 <__fp_mpack_finite>:
    2bf0:	91 50       	subi	r25, 0x01	; 1
    2bf2:	20 f4       	brcc	.+8      	; 0x2bfc <__fp_mpack_finite+0xc>
    2bf4:	87 95       	ror	r24
    2bf6:	77 95       	ror	r23
    2bf8:	67 95       	ror	r22
    2bfa:	b7 95       	ror	r27
    2bfc:	88 0f       	add	r24, r24
    2bfe:	91 1d       	adc	r25, r1
    2c00:	96 95       	lsr	r25
    2c02:	87 95       	ror	r24
    2c04:	97 f9       	bld	r25, 7
    2c06:	08 95       	ret

00002c08 <__fp_norm2>:
    2c08:	91 50       	subi	r25, 0x01	; 1
    2c0a:	50 40       	sbci	r21, 0x00	; 0
    2c0c:	66 0f       	add	r22, r22
    2c0e:	77 1f       	adc	r23, r23
    2c10:	88 1f       	adc	r24, r24
    2c12:	d2 f7       	brpl	.-12     	; 0x2c08 <__fp_norm2>
    2c14:	08 95       	ret

00002c16 <__divmodhi4>:
    2c16:	97 fb       	bst	r25, 7
    2c18:	09 2e       	mov	r0, r25
    2c1a:	07 26       	eor	r0, r23
    2c1c:	0a d0       	rcall	.+20     	; 0x2c32 <__divmodhi4_neg1>
    2c1e:	77 fd       	sbrc	r23, 7
    2c20:	04 d0       	rcall	.+8      	; 0x2c2a <__divmodhi4_neg2>
    2c22:	0c d0       	rcall	.+24     	; 0x2c3c <__udivmodhi4>
    2c24:	06 d0       	rcall	.+12     	; 0x2c32 <__divmodhi4_neg1>
    2c26:	00 20       	and	r0, r0
    2c28:	1a f4       	brpl	.+6      	; 0x2c30 <__divmodhi4_exit>

00002c2a <__divmodhi4_neg2>:
    2c2a:	70 95       	com	r23
    2c2c:	61 95       	neg	r22
    2c2e:	7f 4f       	sbci	r23, 0xFF	; 255

00002c30 <__divmodhi4_exit>:
    2c30:	08 95       	ret

00002c32 <__divmodhi4_neg1>:
    2c32:	f6 f7       	brtc	.-4      	; 0x2c30 <__divmodhi4_exit>
    2c34:	90 95       	com	r25
    2c36:	81 95       	neg	r24
    2c38:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3a:	08 95       	ret

00002c3c <__udivmodhi4>:
    2c3c:	aa 1b       	sub	r26, r26
    2c3e:	bb 1b       	sub	r27, r27
    2c40:	51 e1       	ldi	r21, 0x11	; 17
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <__udivmodhi4_ep>

00002c44 <__udivmodhi4_loop>:
    2c44:	aa 1f       	adc	r26, r26
    2c46:	bb 1f       	adc	r27, r27
    2c48:	a6 17       	cp	r26, r22
    2c4a:	b7 07       	cpc	r27, r23
    2c4c:	10 f0       	brcs	.+4      	; 0x2c52 <__udivmodhi4_ep>
    2c4e:	a6 1b       	sub	r26, r22
    2c50:	b7 0b       	sbc	r27, r23

00002c52 <__udivmodhi4_ep>:
    2c52:	88 1f       	adc	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	5a 95       	dec	r21
    2c58:	a9 f7       	brne	.-22     	; 0x2c44 <__udivmodhi4_loop>
    2c5a:	80 95       	com	r24
    2c5c:	90 95       	com	r25
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	08 95       	ret

00002c64 <dtostrf>:
    2c64:	ef 92       	push	r14
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	32 2f       	mov	r19, r18
    2c6e:	c0 2f       	mov	r28, r16
    2c70:	47 ff       	sbrs	r20, 7
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <dtostrf+0x14>
    2c74:	a4 e1       	ldi	r26, 0x14	; 20
    2c76:	01 c0       	rjmp	.+2      	; 0x2c7a <dtostrf+0x16>
    2c78:	a4 e0       	ldi	r26, 0x04	; 4
    2c7a:	e4 2f       	mov	r30, r20
    2c7c:	ff 27       	eor	r31, r31
    2c7e:	e7 fd       	sbrc	r30, 7
    2c80:	f0 95       	com	r31
    2c82:	f7 ff       	sbrs	r31, 7
    2c84:	03 c0       	rjmp	.+6      	; 0x2c8c <dtostrf+0x28>
    2c86:	f0 95       	com	r31
    2c88:	e1 95       	neg	r30
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	4c 2f       	mov	r20, r28
    2c8e:	51 2f       	mov	r21, r17
    2c90:	2e 2f       	mov	r18, r30
    2c92:	03 2f       	mov	r16, r19
    2c94:	ea 2e       	mov	r14, r26
    2c96:	0e 94 78 18 	call	0x30f0	; 0x30f0 <dtoa_prf>
    2c9a:	8c 2f       	mov	r24, r28
    2c9c:	91 2f       	mov	r25, r17
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ef 90       	pop	r14
    2ca6:	08 95       	ret

00002ca8 <malloc>:
    2ca8:	cf 93       	push	r28
    2caa:	df 93       	push	r29
    2cac:	ac 01       	movw	r20, r24
    2cae:	82 30       	cpi	r24, 0x02	; 2
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	10 f4       	brcc	.+4      	; 0x2cb8 <malloc+0x10>
    2cb4:	42 e0       	ldi	r20, 0x02	; 2
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	e0 91 ea 01 	lds	r30, 0x01EA
    2cbc:	f0 91 eb 01 	lds	r31, 0x01EB
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	24 c0       	rjmp	.+72     	; 0x2d12 <malloc+0x6a>
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	84 17       	cp	r24, r20
    2cd0:	95 07       	cpc	r25, r21
    2cd2:	d0 f0       	brcs	.+52     	; 0x2d08 <malloc+0x60>
    2cd4:	84 17       	cp	r24, r20
    2cd6:	95 07       	cpc	r25, r21
    2cd8:	71 f4       	brne	.+28     	; 0x2cf6 <malloc+0x4e>
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	10 97       	sbiw	r26, 0x00	; 0
    2ce0:	29 f0       	breq	.+10     	; 0x2cec <malloc+0x44>
    2ce2:	13 96       	adiw	r26, 0x03	; 3
    2ce4:	9c 93       	st	X, r25
    2ce6:	8e 93       	st	-X, r24
    2ce8:	12 97       	sbiw	r26, 0x02	; 2
    2cea:	2c c0       	rjmp	.+88     	; 0x2d44 <malloc+0x9c>
    2cec:	90 93 eb 01 	sts	0x01EB, r25
    2cf0:	80 93 ea 01 	sts	0x01EA, r24
    2cf4:	27 c0       	rjmp	.+78     	; 0x2d44 <malloc+0x9c>
    2cf6:	21 15       	cp	r18, r1
    2cf8:	31 05       	cpc	r19, r1
    2cfa:	19 f0       	breq	.+6      	; 0x2d02 <malloc+0x5a>
    2cfc:	82 17       	cp	r24, r18
    2cfe:	93 07       	cpc	r25, r19
    2d00:	18 f4       	brcc	.+6      	; 0x2d08 <malloc+0x60>
    2d02:	9c 01       	movw	r18, r24
    2d04:	bd 01       	movw	r22, r26
    2d06:	ef 01       	movw	r28, r30
    2d08:	92 81       	ldd	r25, Z+2	; 0x02
    2d0a:	83 81       	ldd	r24, Z+3	; 0x03
    2d0c:	df 01       	movw	r26, r30
    2d0e:	e9 2f       	mov	r30, r25
    2d10:	f8 2f       	mov	r31, r24
    2d12:	30 97       	sbiw	r30, 0x00	; 0
    2d14:	d1 f6       	brne	.-76     	; 0x2cca <malloc+0x22>
    2d16:	21 15       	cp	r18, r1
    2d18:	31 05       	cpc	r19, r1
    2d1a:	f9 f0       	breq	.+62     	; 0x2d5a <malloc+0xb2>
    2d1c:	c9 01       	movw	r24, r18
    2d1e:	84 1b       	sub	r24, r20
    2d20:	95 0b       	sbc	r25, r21
    2d22:	84 30       	cpi	r24, 0x04	; 4
    2d24:	91 05       	cpc	r25, r1
    2d26:	80 f4       	brcc	.+32     	; 0x2d48 <malloc+0xa0>
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	61 15       	cp	r22, r1
    2d2e:	71 05       	cpc	r23, r1
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <malloc+0x92>
    2d32:	fb 01       	movw	r30, r22
    2d34:	93 83       	std	Z+3, r25	; 0x03
    2d36:	82 83       	std	Z+2, r24	; 0x02
    2d38:	04 c0       	rjmp	.+8      	; 0x2d42 <malloc+0x9a>
    2d3a:	90 93 eb 01 	sts	0x01EB, r25
    2d3e:	80 93 ea 01 	sts	0x01EA, r24
    2d42:	fe 01       	movw	r30, r28
    2d44:	32 96       	adiw	r30, 0x02	; 2
    2d46:	42 c0       	rjmp	.+132    	; 0x2dcc <malloc+0x124>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e8 0f       	add	r30, r24
    2d4c:	f9 1f       	adc	r31, r25
    2d4e:	41 93       	st	Z+, r20
    2d50:	51 93       	st	Z+, r21
    2d52:	02 97       	sbiw	r24, 0x02	; 2
    2d54:	99 83       	std	Y+1, r25	; 0x01
    2d56:	88 83       	st	Y, r24
    2d58:	39 c0       	rjmp	.+114    	; 0x2dcc <malloc+0x124>
    2d5a:	80 91 e8 01 	lds	r24, 0x01E8
    2d5e:	90 91 e9 01 	lds	r25, 0x01E9
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	41 f4       	brne	.+16     	; 0x2d76 <malloc+0xce>
    2d66:	80 91 05 01 	lds	r24, 0x0105
    2d6a:	90 91 06 01 	lds	r25, 0x0106
    2d6e:	90 93 e9 01 	sts	0x01E9, r25
    2d72:	80 93 e8 01 	sts	0x01E8, r24
    2d76:	20 91 03 01 	lds	r18, 0x0103
    2d7a:	30 91 04 01 	lds	r19, 0x0104
    2d7e:	21 15       	cp	r18, r1
    2d80:	31 05       	cpc	r19, r1
    2d82:	41 f4       	brne	.+16     	; 0x2d94 <malloc+0xec>
    2d84:	2d b7       	in	r18, 0x3d	; 61
    2d86:	3e b7       	in	r19, 0x3e	; 62
    2d88:	80 91 07 01 	lds	r24, 0x0107
    2d8c:	90 91 08 01 	lds	r25, 0x0108
    2d90:	28 1b       	sub	r18, r24
    2d92:	39 0b       	sbc	r19, r25
    2d94:	e0 91 e8 01 	lds	r30, 0x01E8
    2d98:	f0 91 e9 01 	lds	r31, 0x01E9
    2d9c:	e2 17       	cp	r30, r18
    2d9e:	f3 07       	cpc	r31, r19
    2da0:	98 f4       	brcc	.+38     	; 0x2dc8 <malloc+0x120>
    2da2:	2e 1b       	sub	r18, r30
    2da4:	3f 0b       	sbc	r19, r31
    2da6:	24 17       	cp	r18, r20
    2da8:	35 07       	cpc	r19, r21
    2daa:	70 f0       	brcs	.+28     	; 0x2dc8 <malloc+0x120>
    2dac:	ca 01       	movw	r24, r20
    2dae:	02 96       	adiw	r24, 0x02	; 2
    2db0:	28 17       	cp	r18, r24
    2db2:	39 07       	cpc	r19, r25
    2db4:	48 f0       	brcs	.+18     	; 0x2dc8 <malloc+0x120>
    2db6:	8e 0f       	add	r24, r30
    2db8:	9f 1f       	adc	r25, r31
    2dba:	90 93 e9 01 	sts	0x01E9, r25
    2dbe:	80 93 e8 01 	sts	0x01E8, r24
    2dc2:	41 93       	st	Z+, r20
    2dc4:	51 93       	st	Z+, r21
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <malloc+0x124>
    2dc8:	e0 e0       	ldi	r30, 0x00	; 0
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	cf 01       	movw	r24, r30
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <free>:
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	9c 01       	movw	r18, r24
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <free+0x10>
    2de2:	8c c0       	rjmp	.+280    	; 0x2efc <free+0x128>
    2de4:	dc 01       	movw	r26, r24
    2de6:	12 97       	sbiw	r26, 0x02	; 2
    2de8:	13 96       	adiw	r26, 0x03	; 3
    2dea:	1c 92       	st	X, r1
    2dec:	1e 92       	st	-X, r1
    2dee:	12 97       	sbiw	r26, 0x02	; 2
    2df0:	60 91 ea 01 	lds	r22, 0x01EA
    2df4:	70 91 eb 01 	lds	r23, 0x01EB
    2df8:	61 15       	cp	r22, r1
    2dfa:	71 05       	cpc	r23, r1
    2dfc:	89 f4       	brne	.+34     	; 0x2e20 <free+0x4c>
    2dfe:	8d 91       	ld	r24, X+
    2e00:	9c 91       	ld	r25, X
    2e02:	11 97       	sbiw	r26, 0x01	; 1
    2e04:	82 0f       	add	r24, r18
    2e06:	93 1f       	adc	r25, r19
    2e08:	20 91 e8 01 	lds	r18, 0x01E8
    2e0c:	30 91 e9 01 	lds	r19, 0x01E9
    2e10:	28 17       	cp	r18, r24
    2e12:	39 07       	cpc	r19, r25
    2e14:	69 f5       	brne	.+90     	; 0x2e70 <free+0x9c>
    2e16:	b0 93 e9 01 	sts	0x01E9, r27
    2e1a:	a0 93 e8 01 	sts	0x01E8, r26
    2e1e:	6e c0       	rjmp	.+220    	; 0x2efc <free+0x128>
    2e20:	fb 01       	movw	r30, r22
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <free+0x56>
    2e28:	fc 01       	movw	r30, r24
    2e2a:	ea 17       	cp	r30, r26
    2e2c:	fb 07       	cpc	r31, r27
    2e2e:	30 f4       	brcc	.+12     	; 0x2e3c <free+0x68>
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	af 01       	movw	r20, r30
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	b9 f7       	brne	.-18     	; 0x2e28 <free+0x54>
    2e3a:	1f c0       	rjmp	.+62     	; 0x2e7a <free+0xa6>
    2e3c:	e9 01       	movw	r28, r18
    2e3e:	22 97       	sbiw	r28, 0x02	; 2
    2e40:	fb 83       	std	Y+3, r31	; 0x03
    2e42:	ea 83       	std	Y+2, r30	; 0x02
    2e44:	08 81       	ld	r16, Y
    2e46:	19 81       	ldd	r17, Y+1	; 0x01
    2e48:	c9 01       	movw	r24, r18
    2e4a:	80 0f       	add	r24, r16
    2e4c:	91 1f       	adc	r25, r17
    2e4e:	8e 17       	cp	r24, r30
    2e50:	9f 07       	cpc	r25, r31
    2e52:	59 f4       	brne	.+22     	; 0x2e6a <free+0x96>
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	80 0f       	add	r24, r16
    2e5a:	91 1f       	adc	r25, r17
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	99 83       	std	Y+1, r25	; 0x01
    2e60:	88 83       	st	Y, r24
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	9b 83       	std	Y+3, r25	; 0x03
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	41 15       	cp	r20, r1
    2e6c:	51 05       	cpc	r21, r1
    2e6e:	29 f4       	brne	.+10     	; 0x2e7a <free+0xa6>
    2e70:	b0 93 eb 01 	sts	0x01EB, r27
    2e74:	a0 93 ea 01 	sts	0x01EA, r26
    2e78:	41 c0       	rjmp	.+130    	; 0x2efc <free+0x128>
    2e7a:	fa 01       	movw	r30, r20
    2e7c:	b3 83       	std	Z+3, r27	; 0x03
    2e7e:	a2 83       	std	Z+2, r26	; 0x02
    2e80:	c1 91       	ld	r28, Z+
    2e82:	d1 91       	ld	r29, Z+
    2e84:	ec 0f       	add	r30, r28
    2e86:	fd 1f       	adc	r31, r29
    2e88:	ae 17       	cp	r26, r30
    2e8a:	bf 07       	cpc	r27, r31
    2e8c:	81 f4       	brne	.+32     	; 0x2eae <free+0xda>
    2e8e:	f9 01       	movw	r30, r18
    2e90:	92 91       	ld	r25, -Z
    2e92:	82 91       	ld	r24, -Z
    2e94:	8c 0f       	add	r24, r28
    2e96:	9d 1f       	adc	r25, r29
    2e98:	02 96       	adiw	r24, 0x02	; 2
    2e9a:	da 01       	movw	r26, r20
    2e9c:	11 96       	adiw	r26, 0x01	; 1
    2e9e:	9c 93       	st	X, r25
    2ea0:	8e 93       	st	-X, r24
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	13 96       	adiw	r26, 0x03	; 3
    2ea8:	9c 93       	st	X, r25
    2eaa:	8e 93       	st	-X, r24
    2eac:	12 97       	sbiw	r26, 0x02	; 2
    2eae:	e0 e0       	ldi	r30, 0x00	; 0
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <free+0xe4>
    2eb4:	fb 01       	movw	r30, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	db 01       	movw	r26, r22
    2eba:	12 96       	adiw	r26, 0x02	; 2
    2ebc:	8d 91       	ld	r24, X+
    2ebe:	9c 91       	ld	r25, X
    2ec0:	13 97       	sbiw	r26, 0x03	; 3
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	b9 f7       	brne	.-18     	; 0x2eb4 <free+0xe0>
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	02 96       	adiw	r24, 0x02	; 2
    2eca:	2d 91       	ld	r18, X+
    2ecc:	3c 91       	ld	r19, X
    2ece:	11 97       	sbiw	r26, 0x01	; 1
    2ed0:	82 0f       	add	r24, r18
    2ed2:	93 1f       	adc	r25, r19
    2ed4:	20 91 e8 01 	lds	r18, 0x01E8
    2ed8:	30 91 e9 01 	lds	r19, 0x01E9
    2edc:	28 17       	cp	r18, r24
    2ede:	39 07       	cpc	r19, r25
    2ee0:	69 f4       	brne	.+26     	; 0x2efc <free+0x128>
    2ee2:	30 97       	sbiw	r30, 0x00	; 0
    2ee4:	29 f4       	brne	.+10     	; 0x2ef0 <free+0x11c>
    2ee6:	10 92 eb 01 	sts	0x01EB, r1
    2eea:	10 92 ea 01 	sts	0x01EA, r1
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <free+0x120>
    2ef0:	13 82       	std	Z+3, r1	; 0x03
    2ef2:	12 82       	std	Z+2, r1	; 0x02
    2ef4:	70 93 e9 01 	sts	0x01E9, r23
    2ef8:	60 93 e8 01 	sts	0x01E8, r22
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	08 95       	ret

00002f06 <realloc>:
    2f06:	8f 92       	push	r8
    2f08:	9f 92       	push	r9
    2f0a:	af 92       	push	r10
    2f0c:	bf 92       	push	r11
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <realloc+0x1a>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	8c 01       	movw	r16, r24
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	29 f4       	brne	.+10     	; 0x2f34 <realloc+0x2e>
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <malloc>
    2f30:	8c 01       	movw	r16, r24
    2f32:	b8 c0       	rjmp	.+368    	; 0x30a4 <realloc+0x19e>
    2f34:	dc 01       	movw	r26, r24
    2f36:	a6 0f       	add	r26, r22
    2f38:	b7 1f       	adc	r27, r23
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	32 97       	sbiw	r30, 0x02	; 2
    2f3e:	ae 17       	cp	r26, r30
    2f40:	bf 07       	cpc	r27, r31
    2f42:	08 f4       	brcc	.+2      	; 0x2f46 <realloc+0x40>
    2f44:	ad c0       	rjmp	.+346    	; 0x30a0 <realloc+0x19a>
    2f46:	20 81       	ld	r18, Z
    2f48:	31 81       	ldd	r19, Z+1	; 0x01
    2f4a:	26 17       	cp	r18, r22
    2f4c:	37 07       	cpc	r19, r23
    2f4e:	b0 f0       	brcs	.+44     	; 0x2f7c <realloc+0x76>
    2f50:	25 30       	cpi	r18, 0x05	; 5
    2f52:	31 05       	cpc	r19, r1
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <realloc+0x52>
    2f56:	a6 c0       	rjmp	.+332    	; 0x30a4 <realloc+0x19e>
    2f58:	c9 01       	movw	r24, r18
    2f5a:	04 97       	sbiw	r24, 0x04	; 4
    2f5c:	86 17       	cp	r24, r22
    2f5e:	97 07       	cpc	r25, r23
    2f60:	08 f4       	brcc	.+2      	; 0x2f64 <realloc+0x5e>
    2f62:	a0 c0       	rjmp	.+320    	; 0x30a4 <realloc+0x19e>
    2f64:	22 50       	subi	r18, 0x02	; 2
    2f66:	30 40       	sbci	r19, 0x00	; 0
    2f68:	26 1b       	sub	r18, r22
    2f6a:	37 0b       	sbc	r19, r23
    2f6c:	2d 93       	st	X+, r18
    2f6e:	3d 93       	st	X+, r19
    2f70:	cd 01       	movw	r24, r26
    2f72:	71 83       	std	Z+1, r23	; 0x01
    2f74:	60 83       	st	Z, r22
    2f76:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
    2f7a:	94 c0       	rjmp	.+296    	; 0x30a4 <realloc+0x19e>
    2f7c:	6b 01       	movw	r12, r22
    2f7e:	c2 1a       	sub	r12, r18
    2f80:	d3 0a       	sbc	r13, r19
    2f82:	5c 01       	movw	r10, r24
    2f84:	a2 0e       	add	r10, r18
    2f86:	b3 1e       	adc	r11, r19
    2f88:	e0 91 ea 01 	lds	r30, 0x01EA
    2f8c:	f0 91 eb 01 	lds	r31, 0x01EB
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	88 24       	eor	r8, r8
    2f96:	99 24       	eor	r9, r9
    2f98:	49 c0       	rjmp	.+146    	; 0x302c <realloc+0x126>
    2f9a:	ea 15       	cp	r30, r10
    2f9c:	fb 05       	cpc	r31, r11
    2f9e:	e1 f5       	brne	.+120    	; 0x3018 <realloc+0x112>
    2fa0:	e0 80       	ld	r14, Z
    2fa2:	f1 80       	ldd	r15, Z+1	; 0x01
    2fa4:	c7 01       	movw	r24, r14
    2fa6:	02 96       	adiw	r24, 0x02	; 2
    2fa8:	8c 15       	cp	r24, r12
    2faa:	9d 05       	cpc	r25, r13
    2fac:	a8 f1       	brcs	.+106    	; 0x3018 <realloc+0x112>
    2fae:	a7 01       	movw	r20, r14
    2fb0:	4c 19       	sub	r20, r12
    2fb2:	5d 09       	sbc	r21, r13
    2fb4:	ca 01       	movw	r24, r20
    2fb6:	02 96       	adiw	r24, 0x02	; 2
    2fb8:	0f 2e       	mov	r0, r31
    2fba:	fe ef       	ldi	r31, 0xFE	; 254
    2fbc:	cf 2e       	mov	r12, r31
    2fbe:	ff ef       	ldi	r31, 0xFF	; 255
    2fc0:	df 2e       	mov	r13, r31
    2fc2:	f0 2d       	mov	r31, r0
    2fc4:	c0 0e       	add	r12, r16
    2fc6:	d1 1e       	adc	r13, r17
    2fc8:	85 30       	cpi	r24, 0x05	; 5
    2fca:	91 05       	cpc	r25, r1
    2fcc:	78 f0       	brcs	.+30     	; 0x2fec <realloc+0xe6>
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	13 96       	adiw	r26, 0x03	; 3
    2fd4:	9c 93       	st	X, r25
    2fd6:	8e 93       	st	-X, r24
    2fd8:	12 97       	sbiw	r26, 0x02	; 2
    2fda:	11 96       	adiw	r26, 0x01	; 1
    2fdc:	5c 93       	st	X, r21
    2fde:	4e 93       	st	-X, r20
    2fe0:	f6 01       	movw	r30, r12
    2fe2:	71 83       	std	Z+1, r23	; 0x01
    2fe4:	60 83       	st	Z, r22
    2fe6:	9a 2f       	mov	r25, r26
    2fe8:	8b 2f       	mov	r24, r27
    2fea:	0a c0       	rjmp	.+20     	; 0x3000 <realloc+0xfa>
    2fec:	c9 01       	movw	r24, r18
    2fee:	02 96       	adiw	r24, 0x02	; 2
    2ff0:	8e 0d       	add	r24, r14
    2ff2:	9f 1d       	adc	r25, r15
    2ff4:	d6 01       	movw	r26, r12
    2ff6:	11 96       	adiw	r26, 0x01	; 1
    2ff8:	9c 93       	st	X, r25
    2ffa:	8e 93       	st	-X, r24
    2ffc:	92 81       	ldd	r25, Z+2	; 0x02
    2ffe:	83 81       	ldd	r24, Z+3	; 0x03
    3000:	81 14       	cp	r8, r1
    3002:	91 04       	cpc	r9, r1
    3004:	21 f0       	breq	.+8      	; 0x300e <realloc+0x108>
    3006:	f4 01       	movw	r30, r8
    3008:	92 83       	std	Z+2, r25	; 0x02
    300a:	83 83       	std	Z+3, r24	; 0x03
    300c:	4b c0       	rjmp	.+150    	; 0x30a4 <realloc+0x19e>
    300e:	90 93 ea 01 	sts	0x01EA, r25
    3012:	80 93 eb 01 	sts	0x01EB, r24
    3016:	46 c0       	rjmp	.+140    	; 0x30a4 <realloc+0x19e>
    3018:	80 81       	ld	r24, Z
    301a:	91 81       	ldd	r25, Z+1	; 0x01
    301c:	48 17       	cp	r20, r24
    301e:	59 07       	cpc	r21, r25
    3020:	08 f4       	brcc	.+2      	; 0x3024 <realloc+0x11e>
    3022:	ac 01       	movw	r20, r24
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	4f 01       	movw	r8, r30
    302a:	fc 01       	movw	r30, r24
    302c:	30 97       	sbiw	r30, 0x00	; 0
    302e:	09 f0       	breq	.+2      	; 0x3032 <realloc+0x12c>
    3030:	b4 cf       	rjmp	.-152    	; 0x2f9a <realloc+0x94>
    3032:	80 91 e8 01 	lds	r24, 0x01E8
    3036:	90 91 e9 01 	lds	r25, 0x01E9
    303a:	8a 15       	cp	r24, r10
    303c:	9b 05       	cpc	r25, r11
    303e:	e9 f4       	brne	.+58     	; 0x307a <realloc+0x174>
    3040:	46 17       	cp	r20, r22
    3042:	57 07       	cpc	r21, r23
    3044:	d0 f4       	brcc	.+52     	; 0x307a <realloc+0x174>
    3046:	80 91 03 01 	lds	r24, 0x0103
    304a:	90 91 04 01 	lds	r25, 0x0104
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	41 f4       	brne	.+16     	; 0x3062 <realloc+0x15c>
    3052:	8d b7       	in	r24, 0x3d	; 61
    3054:	9e b7       	in	r25, 0x3e	; 62
    3056:	20 91 07 01 	lds	r18, 0x0107
    305a:	30 91 08 01 	lds	r19, 0x0108
    305e:	82 1b       	sub	r24, r18
    3060:	93 0b       	sbc	r25, r19
    3062:	a8 17       	cp	r26, r24
    3064:	b9 07       	cpc	r27, r25
    3066:	e0 f4       	brcc	.+56     	; 0x30a0 <realloc+0x19a>
    3068:	b0 93 e9 01 	sts	0x01E9, r27
    306c:	a0 93 e8 01 	sts	0x01E8, r26
    3070:	f8 01       	movw	r30, r16
    3072:	32 97       	sbiw	r30, 0x02	; 2
    3074:	71 83       	std	Z+1, r23	; 0x01
    3076:	60 83       	st	Z, r22
    3078:	15 c0       	rjmp	.+42     	; 0x30a4 <realloc+0x19e>
    307a:	cb 01       	movw	r24, r22
    307c:	29 83       	std	Y+1, r18	; 0x01
    307e:	3a 83       	std	Y+2, r19	; 0x02
    3080:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <malloc>
    3084:	7c 01       	movw	r14, r24
    3086:	29 81       	ldd	r18, Y+1	; 0x01
    3088:	3a 81       	ldd	r19, Y+2	; 0x02
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	49 f0       	breq	.+18     	; 0x30a0 <realloc+0x19a>
    308e:	b8 01       	movw	r22, r16
    3090:	a9 01       	movw	r20, r18
    3092:	0e 94 6f 18 	call	0x30de	; 0x30de <memcpy>
    3096:	c8 01       	movw	r24, r16
    3098:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <free>
    309c:	87 01       	movw	r16, r14
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <realloc+0x19e>
    30a0:	00 e0       	ldi	r16, 0x00	; 0
    30a2:	10 e0       	ldi	r17, 0x00	; 0
    30a4:	c8 01       	movw	r24, r16
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	bf 90       	pop	r11
    30bc:	af 90       	pop	r10
    30be:	9f 90       	pop	r9
    30c0:	8f 90       	pop	r8
    30c2:	08 95       	ret

000030c4 <memcmp>:
    30c4:	fb 01       	movw	r30, r22
    30c6:	dc 01       	movw	r26, r24
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <memcmp+0xe>
    30ca:	8d 91       	ld	r24, X+
    30cc:	01 90       	ld	r0, Z+
    30ce:	80 19       	sub	r24, r0
    30d0:	21 f4       	brne	.+8      	; 0x30da <memcmp+0x16>
    30d2:	41 50       	subi	r20, 0x01	; 1
    30d4:	50 40       	sbci	r21, 0x00	; 0
    30d6:	c8 f7       	brcc	.-14     	; 0x30ca <memcmp+0x6>
    30d8:	88 1b       	sub	r24, r24
    30da:	99 0b       	sbc	r25, r25
    30dc:	08 95       	ret

000030de <memcpy>:
    30de:	fb 01       	movw	r30, r22
    30e0:	dc 01       	movw	r26, r24
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <memcpy+0xa>
    30e4:	01 90       	ld	r0, Z+
    30e6:	0d 92       	st	X+, r0
    30e8:	41 50       	subi	r20, 0x01	; 1
    30ea:	50 40       	sbci	r21, 0x00	; 0
    30ec:	d8 f7       	brcc	.-10     	; 0x30e4 <memcpy+0x6>
    30ee:	08 95       	ret

000030f0 <dtoa_prf>:
    30f0:	6f 92       	push	r6
    30f2:	7f 92       	push	r7
    30f4:	8f 92       	push	r8
    30f6:	9f 92       	push	r9
    30f8:	af 92       	push	r10
    30fa:	bf 92       	push	r11
    30fc:	cf 92       	push	r12
    30fe:	df 92       	push	r13
    3100:	ef 92       	push	r14
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	29 97       	sbiw	r28, 0x09	; 9
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	6a 01       	movw	r12, r20
    311e:	12 2f       	mov	r17, r18
    3120:	f0 2e       	mov	r15, r16
    3122:	2b e3       	ldi	r18, 0x3B	; 59
    3124:	20 17       	cp	r18, r16
    3126:	18 f0       	brcs	.+6      	; 0x312e <dtoa_prf+0x3e>
    3128:	b0 2e       	mov	r11, r16
    312a:	b3 94       	inc	r11
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <dtoa_prf+0x42>
    312e:	3c e3       	ldi	r19, 0x3C	; 60
    3130:	b3 2e       	mov	r11, r19
    3132:	ae 01       	movw	r20, r28
    3134:	4f 5f       	subi	r20, 0xFF	; 255
    3136:	5f 4f       	sbci	r21, 0xFF	; 255
    3138:	27 e0       	ldi	r18, 0x07	; 7
    313a:	0b 2d       	mov	r16, r11
    313c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__ftoa_engine>
    3140:	bc 01       	movw	r22, r24
    3142:	a9 81       	ldd	r26, Y+1	; 0x01
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	cd 01       	movw	r24, r26
    3148:	89 70       	andi	r24, 0x09	; 9
    314a:	90 70       	andi	r25, 0x00	; 0
    314c:	81 30       	cpi	r24, 0x01	; 1
    314e:	91 05       	cpc	r25, r1
    3150:	31 f0       	breq	.+12     	; 0x315e <dtoa_prf+0x6e>
    3152:	e1 fc       	sbrc	r14, 1
    3154:	06 c0       	rjmp	.+12     	; 0x3162 <dtoa_prf+0x72>
    3156:	e0 fe       	sbrs	r14, 0
    3158:	06 c0       	rjmp	.+12     	; 0x3166 <dtoa_prf+0x76>
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	05 c0       	rjmp	.+10     	; 0x3168 <dtoa_prf+0x78>
    315e:	4d e2       	ldi	r20, 0x2D	; 45
    3160:	03 c0       	rjmp	.+6      	; 0x3168 <dtoa_prf+0x78>
    3162:	4b e2       	ldi	r20, 0x2B	; 43
    3164:	01 c0       	rjmp	.+2      	; 0x3168 <dtoa_prf+0x78>
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	a3 ff       	sbrs	r26, 3
    316a:	36 c0       	rjmp	.+108    	; 0x31d8 <dtoa_prf+0xe8>
    316c:	44 23       	and	r20, r20
    316e:	11 f0       	breq	.+4      	; 0x3174 <dtoa_prf+0x84>
    3170:	84 e0       	ldi	r24, 0x04	; 4
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <dtoa_prf+0x86>
    3174:	83 e0       	ldi	r24, 0x03	; 3
    3176:	81 17       	cp	r24, r17
    3178:	10 f4       	brcc	.+4      	; 0x317e <dtoa_prf+0x8e>
    317a:	18 1b       	sub	r17, r24
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <dtoa_prf+0x90>
    317e:	10 e0       	ldi	r17, 0x00	; 0
    3180:	e4 fc       	sbrc	r14, 4
    3182:	0b c0       	rjmp	.+22     	; 0x319a <dtoa_prf+0xaa>
    3184:	91 2f       	mov	r25, r17
    3186:	f6 01       	movw	r30, r12
    3188:	80 e2       	ldi	r24, 0x20	; 32
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <dtoa_prf+0xa0>
    318c:	81 93       	st	Z+, r24
    318e:	91 50       	subi	r25, 0x01	; 1
    3190:	99 23       	and	r25, r25
    3192:	e1 f7       	brne	.-8      	; 0x318c <dtoa_prf+0x9c>
    3194:	c1 0e       	add	r12, r17
    3196:	d1 1c       	adc	r13, r1
    3198:	10 e0       	ldi	r17, 0x00	; 0
    319a:	44 23       	and	r20, r20
    319c:	19 f0       	breq	.+6      	; 0x31a4 <dtoa_prf+0xb4>
    319e:	f6 01       	movw	r30, r12
    31a0:	41 93       	st	Z+, r20
    31a2:	6f 01       	movw	r12, r30
    31a4:	e2 fe       	sbrs	r14, 2
    31a6:	05 c0       	rjmp	.+10     	; 0x31b2 <dtoa_prf+0xc2>
    31a8:	8e e4       	ldi	r24, 0x4E	; 78
    31aa:	f6 01       	movw	r30, r12
    31ac:	80 83       	st	Z, r24
    31ae:	91 e4       	ldi	r25, 0x41	; 65
    31b0:	04 c0       	rjmp	.+8      	; 0x31ba <dtoa_prf+0xca>
    31b2:	8e e6       	ldi	r24, 0x6E	; 110
    31b4:	f6 01       	movw	r30, r12
    31b6:	80 83       	st	Z, r24
    31b8:	91 e6       	ldi	r25, 0x61	; 97
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	82 83       	std	Z+2, r24	; 0x02
    31be:	83 e0       	ldi	r24, 0x03	; 3
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	c8 0e       	add	r12, r24
    31c4:	d9 1e       	adc	r13, r25
    31c6:	81 2f       	mov	r24, r17
    31c8:	f6 01       	movw	r30, r12
    31ca:	90 e2       	ldi	r25, 0x20	; 32
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <dtoa_prf+0xe2>
    31ce:	91 93       	st	Z+, r25
    31d0:	81 50       	subi	r24, 0x01	; 1
    31d2:	88 23       	and	r24, r24
    31d4:	e1 f7       	brne	.-8      	; 0x31ce <dtoa_prf+0xde>
    31d6:	3a c0       	rjmp	.+116    	; 0x324c <dtoa_prf+0x15c>
    31d8:	a2 ff       	sbrs	r26, 2
    31da:	3f c0       	rjmp	.+126    	; 0x325a <dtoa_prf+0x16a>
    31dc:	44 23       	and	r20, r20
    31de:	11 f0       	breq	.+4      	; 0x31e4 <dtoa_prf+0xf4>
    31e0:	84 e0       	ldi	r24, 0x04	; 4
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <dtoa_prf+0xf6>
    31e4:	83 e0       	ldi	r24, 0x03	; 3
    31e6:	81 17       	cp	r24, r17
    31e8:	10 f4       	brcc	.+4      	; 0x31ee <dtoa_prf+0xfe>
    31ea:	18 1b       	sub	r17, r24
    31ec:	01 c0       	rjmp	.+2      	; 0x31f0 <dtoa_prf+0x100>
    31ee:	10 e0       	ldi	r17, 0x00	; 0
    31f0:	e4 fc       	sbrc	r14, 4
    31f2:	0b c0       	rjmp	.+22     	; 0x320a <dtoa_prf+0x11a>
    31f4:	91 2f       	mov	r25, r17
    31f6:	f6 01       	movw	r30, r12
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <dtoa_prf+0x110>
    31fc:	81 93       	st	Z+, r24
    31fe:	91 50       	subi	r25, 0x01	; 1
    3200:	99 23       	and	r25, r25
    3202:	e1 f7       	brne	.-8      	; 0x31fc <dtoa_prf+0x10c>
    3204:	c1 0e       	add	r12, r17
    3206:	d1 1c       	adc	r13, r1
    3208:	10 e0       	ldi	r17, 0x00	; 0
    320a:	44 23       	and	r20, r20
    320c:	19 f0       	breq	.+6      	; 0x3214 <dtoa_prf+0x124>
    320e:	f6 01       	movw	r30, r12
    3210:	41 93       	st	Z+, r20
    3212:	6f 01       	movw	r12, r30
    3214:	e2 fe       	sbrs	r14, 2
    3216:	07 c0       	rjmp	.+14     	; 0x3226 <dtoa_prf+0x136>
    3218:	89 e4       	ldi	r24, 0x49	; 73
    321a:	f6 01       	movw	r30, r12
    321c:	80 83       	st	Z, r24
    321e:	8e e4       	ldi	r24, 0x4E	; 78
    3220:	81 83       	std	Z+1, r24	; 0x01
    3222:	86 e4       	ldi	r24, 0x46	; 70
    3224:	06 c0       	rjmp	.+12     	; 0x3232 <dtoa_prf+0x142>
    3226:	89 e6       	ldi	r24, 0x69	; 105
    3228:	f6 01       	movw	r30, r12
    322a:	80 83       	st	Z, r24
    322c:	8e e6       	ldi	r24, 0x6E	; 110
    322e:	81 83       	std	Z+1, r24	; 0x01
    3230:	86 e6       	ldi	r24, 0x66	; 102
    3232:	82 83       	std	Z+2, r24	; 0x02
    3234:	83 e0       	ldi	r24, 0x03	; 3
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	c8 0e       	add	r12, r24
    323a:	d9 1e       	adc	r13, r25
    323c:	81 2f       	mov	r24, r17
    323e:	f6 01       	movw	r30, r12
    3240:	90 e2       	ldi	r25, 0x20	; 32
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <dtoa_prf+0x158>
    3244:	91 93       	st	Z+, r25
    3246:	81 50       	subi	r24, 0x01	; 1
    3248:	88 23       	and	r24, r24
    324a:	e1 f7       	brne	.-8      	; 0x3244 <dtoa_prf+0x154>
    324c:	c1 0e       	add	r12, r17
    324e:	d1 1c       	adc	r13, r1
    3250:	f6 01       	movw	r30, r12
    3252:	10 82       	st	Z, r1
    3254:	8e ef       	ldi	r24, 0xFE	; 254
    3256:	9f ef       	ldi	r25, 0xFF	; 255
    3258:	af c0       	rjmp	.+350    	; 0x33b8 <dtoa_prf+0x2c8>
    325a:	21 e0       	ldi	r18, 0x01	; 1
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	44 23       	and	r20, r20
    3260:	11 f4       	brne	.+4      	; 0x3266 <dtoa_prf+0x176>
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	16 16       	cp	r1, r22
    3268:	17 06       	cpc	r1, r23
    326a:	1c f4       	brge	.+6      	; 0x3272 <dtoa_prf+0x182>
    326c:	cb 01       	movw	r24, r22
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	02 c0       	rjmp	.+4      	; 0x3276 <dtoa_prf+0x186>
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	28 0f       	add	r18, r24
    3278:	39 1f       	adc	r19, r25
    327a:	ff 20       	and	r15, r15
    327c:	21 f0       	breq	.+8      	; 0x3286 <dtoa_prf+0x196>
    327e:	8f 2d       	mov	r24, r15
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	02 c0       	rjmp	.+4      	; 0x328a <dtoa_prf+0x19a>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	82 0f       	add	r24, r18
    328c:	93 1f       	adc	r25, r19
    328e:	21 2f       	mov	r18, r17
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	82 17       	cp	r24, r18
    3294:	93 07       	cpc	r25, r19
    3296:	1c f4       	brge	.+6      	; 0x329e <dtoa_prf+0x1ae>
    3298:	51 2f       	mov	r21, r17
    329a:	58 1b       	sub	r21, r24
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <dtoa_prf+0x1b0>
    329e:	50 e0       	ldi	r21, 0x00	; 0
    32a0:	8e 2d       	mov	r24, r14
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	9c 01       	movw	r18, r24
    32a6:	20 71       	andi	r18, 0x10	; 16
    32a8:	30 70       	andi	r19, 0x00	; 0
    32aa:	e4 fc       	sbrc	r14, 4
    32ac:	0d c0       	rjmp	.+26     	; 0x32c8 <dtoa_prf+0x1d8>
    32ae:	e3 fc       	sbrc	r14, 3
    32b0:	0b c0       	rjmp	.+22     	; 0x32c8 <dtoa_prf+0x1d8>
    32b2:	85 2f       	mov	r24, r21
    32b4:	f6 01       	movw	r30, r12
    32b6:	90 e2       	ldi	r25, 0x20	; 32
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <dtoa_prf+0x1ce>
    32ba:	91 93       	st	Z+, r25
    32bc:	81 50       	subi	r24, 0x01	; 1
    32be:	88 23       	and	r24, r24
    32c0:	e1 f7       	brne	.-8      	; 0x32ba <dtoa_prf+0x1ca>
    32c2:	c5 0e       	add	r12, r21
    32c4:	d1 1c       	adc	r13, r1
    32c6:	50 e0       	ldi	r21, 0x00	; 0
    32c8:	44 23       	and	r20, r20
    32ca:	19 f0       	breq	.+6      	; 0x32d2 <dtoa_prf+0x1e2>
    32cc:	f6 01       	movw	r30, r12
    32ce:	41 93       	st	Z+, r20
    32d0:	6f 01       	movw	r12, r30
    32d2:	21 15       	cp	r18, r1
    32d4:	31 05       	cpc	r19, r1
    32d6:	59 f4       	brne	.+22     	; 0x32ee <dtoa_prf+0x1fe>
    32d8:	85 2f       	mov	r24, r21
    32da:	f6 01       	movw	r30, r12
    32dc:	90 e3       	ldi	r25, 0x30	; 48
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <dtoa_prf+0x1f4>
    32e0:	91 93       	st	Z+, r25
    32e2:	81 50       	subi	r24, 0x01	; 1
    32e4:	88 23       	and	r24, r24
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <dtoa_prf+0x1f0>
    32e8:	c5 0e       	add	r12, r21
    32ea:	d1 1c       	adc	r13, r1
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	b6 0e       	add	r11, r22
    32f0:	4a 81       	ldd	r20, Y+2	; 0x02
    32f2:	20 e1       	ldi	r18, 0x10	; 16
    32f4:	62 2e       	mov	r6, r18
    32f6:	71 2c       	mov	r7, r1
    32f8:	6a 22       	and	r6, r26
    32fa:	7b 22       	and	r7, r27
    32fc:	a4 ff       	sbrs	r26, 4
    32fe:	03 c0       	rjmp	.+6      	; 0x3306 <dtoa_prf+0x216>
    3300:	41 33       	cpi	r20, 0x31	; 49
    3302:	09 f4       	brne	.+2      	; 0x3306 <dtoa_prf+0x216>
    3304:	ba 94       	dec	r11
    3306:	1b 14       	cp	r1, r11
    3308:	2c f4       	brge	.+10     	; 0x3314 <dtoa_prf+0x224>
    330a:	8b 2d       	mov	r24, r11
    330c:	89 30       	cpi	r24, 0x09	; 9
    330e:	18 f0       	brcs	.+6      	; 0x3316 <dtoa_prf+0x226>
    3310:	88 e0       	ldi	r24, 0x08	; 8
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <dtoa_prf+0x226>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	9b 01       	movw	r18, r22
    3318:	77 ff       	sbrs	r23, 7
    331a:	02 c0       	rjmp	.+4      	; 0x3320 <dtoa_prf+0x230>
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	a0 e0       	ldi	r26, 0x00	; 0
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	9e e2       	ldi	r25, 0x2E	; 46
    3326:	e9 2e       	mov	r14, r25
    3328:	4b 01       	movw	r8, r22
    332a:	88 1a       	sub	r8, r24
    332c:	91 08       	sbc	r9, r1
    332e:	cb 01       	movw	r24, r22
    3330:	82 1b       	sub	r24, r18
    3332:	93 0b       	sbc	r25, r19
    3334:	8e 01       	movw	r16, r28
    3336:	0f 5f       	subi	r16, 0xFF	; 255
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	08 0f       	add	r16, r24
    333c:	19 1f       	adc	r17, r25
    333e:	8f 2d       	mov	r24, r15
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	aa 24       	eor	r10, r10
    3344:	bb 24       	eor	r11, r11
    3346:	a8 1a       	sub	r10, r24
    3348:	b9 0a       	sbc	r11, r25
    334a:	ff ef       	ldi	r31, 0xFF	; 255
    334c:	2f 3f       	cpi	r18, 0xFF	; 255
    334e:	3f 07       	cpc	r19, r31
    3350:	19 f4       	brne	.+6      	; 0x3358 <dtoa_prf+0x268>
    3352:	f6 01       	movw	r30, r12
    3354:	e1 92       	st	Z+, r14
    3356:	6f 01       	movw	r12, r30
    3358:	62 17       	cp	r22, r18
    335a:	73 07       	cpc	r23, r19
    335c:	44 f0       	brlt	.+16     	; 0x336e <dtoa_prf+0x27e>
    335e:	82 16       	cp	r8, r18
    3360:	93 06       	cpc	r9, r19
    3362:	2c f4       	brge	.+10     	; 0x336e <dtoa_prf+0x27e>
    3364:	f8 01       	movw	r30, r16
    3366:	ea 0f       	add	r30, r26
    3368:	fb 1f       	adc	r31, r27
    336a:	81 81       	ldd	r24, Z+1	; 0x01
    336c:	01 c0       	rjmp	.+2      	; 0x3370 <dtoa_prf+0x280>
    336e:	80 e3       	ldi	r24, 0x30	; 48
    3370:	21 50       	subi	r18, 0x01	; 1
    3372:	30 40       	sbci	r19, 0x00	; 0
    3374:	11 96       	adiw	r26, 0x01	; 1
    3376:	2a 15       	cp	r18, r10
    3378:	3b 05       	cpc	r19, r11
    337a:	24 f0       	brlt	.+8      	; 0x3384 <dtoa_prf+0x294>
    337c:	f6 01       	movw	r30, r12
    337e:	81 93       	st	Z+, r24
    3380:	6f 01       	movw	r12, r30
    3382:	e3 cf       	rjmp	.-58     	; 0x334a <dtoa_prf+0x25a>
    3384:	26 17       	cp	r18, r22
    3386:	37 07       	cpc	r19, r23
    3388:	41 f4       	brne	.+16     	; 0x339a <dtoa_prf+0x2aa>
    338a:	46 33       	cpi	r20, 0x36	; 54
    338c:	28 f4       	brcc	.+10     	; 0x3398 <dtoa_prf+0x2a8>
    338e:	45 33       	cpi	r20, 0x35	; 53
    3390:	21 f4       	brne	.+8      	; 0x339a <dtoa_prf+0x2aa>
    3392:	61 14       	cp	r6, r1
    3394:	71 04       	cpc	r7, r1
    3396:	09 f4       	brne	.+2      	; 0x339a <dtoa_prf+0x2aa>
    3398:	81 e3       	ldi	r24, 0x31	; 49
    339a:	f6 01       	movw	r30, r12
    339c:	81 93       	st	Z+, r24
    339e:	85 2f       	mov	r24, r21
    33a0:	df 01       	movw	r26, r30
    33a2:	90 e2       	ldi	r25, 0x20	; 32
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <dtoa_prf+0x2ba>
    33a6:	9d 93       	st	X+, r25
    33a8:	81 50       	subi	r24, 0x01	; 1
    33aa:	88 23       	and	r24, r24
    33ac:	e1 f7       	brne	.-8      	; 0x33a6 <dtoa_prf+0x2b6>
    33ae:	e5 0f       	add	r30, r21
    33b0:	f1 1d       	adc	r31, r1
    33b2:	10 82       	st	Z, r1
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	29 96       	adiw	r28, 0x09	; 9
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	df 90       	pop	r13
    33d2:	cf 90       	pop	r12
    33d4:	bf 90       	pop	r11
    33d6:	af 90       	pop	r10
    33d8:	9f 90       	pop	r9
    33da:	8f 90       	pop	r8
    33dc:	7f 90       	pop	r7
    33de:	6f 90       	pop	r6
    33e0:	08 95       	ret

000033e2 <__ftoa_engine>:
    33e2:	28 30       	cpi	r18, 0x08	; 8
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <__ftoa_engine+0x6>
    33e6:	27 e0       	ldi	r18, 0x07	; 7
    33e8:	33 27       	eor	r19, r19
    33ea:	da 01       	movw	r26, r20
    33ec:	99 0f       	add	r25, r25
    33ee:	31 1d       	adc	r19, r1
    33f0:	87 fd       	sbrc	r24, 7
    33f2:	91 60       	ori	r25, 0x01	; 1
    33f4:	00 96       	adiw	r24, 0x00	; 0
    33f6:	61 05       	cpc	r22, r1
    33f8:	71 05       	cpc	r23, r1
    33fa:	39 f4       	brne	.+14     	; 0x340a <__ftoa_engine+0x28>
    33fc:	32 60       	ori	r19, 0x02	; 2
    33fe:	2e 5f       	subi	r18, 0xFE	; 254
    3400:	3d 93       	st	X+, r19
    3402:	30 e3       	ldi	r19, 0x30	; 48
    3404:	2a 95       	dec	r18
    3406:	e1 f7       	brne	.-8      	; 0x3400 <__ftoa_engine+0x1e>
    3408:	08 95       	ret
    340a:	9f 3f       	cpi	r25, 0xFF	; 255
    340c:	30 f0       	brcs	.+12     	; 0x341a <__ftoa_engine+0x38>
    340e:	80 38       	cpi	r24, 0x80	; 128
    3410:	71 05       	cpc	r23, r1
    3412:	61 05       	cpc	r22, r1
    3414:	09 f0       	breq	.+2      	; 0x3418 <__ftoa_engine+0x36>
    3416:	3c 5f       	subi	r19, 0xFC	; 252
    3418:	3c 5f       	subi	r19, 0xFC	; 252
    341a:	3d 93       	st	X+, r19
    341c:	91 30       	cpi	r25, 0x01	; 1
    341e:	08 f0       	brcs	.+2      	; 0x3422 <__ftoa_engine+0x40>
    3420:	80 68       	ori	r24, 0x80	; 128
    3422:	91 1d       	adc	r25, r1
    3424:	df 93       	push	r29
    3426:	cf 93       	push	r28
    3428:	1f 93       	push	r17
    342a:	0f 93       	push	r16
    342c:	ff 92       	push	r15
    342e:	ef 92       	push	r14
    3430:	19 2f       	mov	r17, r25
    3432:	98 7f       	andi	r25, 0xF8	; 248
    3434:	96 95       	lsr	r25
    3436:	e9 2f       	mov	r30, r25
    3438:	96 95       	lsr	r25
    343a:	96 95       	lsr	r25
    343c:	e9 0f       	add	r30, r25
    343e:	ff 27       	eor	r31, r31
    3440:	e9 53       	subi	r30, 0x39	; 57
    3442:	f6 4f       	sbci	r31, 0xF6	; 246
    3444:	99 27       	eor	r25, r25
    3446:	33 27       	eor	r19, r19
    3448:	ee 24       	eor	r14, r14
    344a:	ff 24       	eor	r15, r15
    344c:	a7 01       	movw	r20, r14
    344e:	e7 01       	movw	r28, r14
    3450:	05 90       	lpm	r0, Z+
    3452:	08 94       	sec
    3454:	07 94       	ror	r0
    3456:	28 f4       	brcc	.+10     	; 0x3462 <__ftoa_engine+0x80>
    3458:	36 0f       	add	r19, r22
    345a:	e7 1e       	adc	r14, r23
    345c:	f8 1e       	adc	r15, r24
    345e:	49 1f       	adc	r20, r25
    3460:	51 1d       	adc	r21, r1
    3462:	66 0f       	add	r22, r22
    3464:	77 1f       	adc	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	06 94       	lsr	r0
    346c:	a1 f7       	brne	.-24     	; 0x3456 <__ftoa_engine+0x74>
    346e:	05 90       	lpm	r0, Z+
    3470:	07 94       	ror	r0
    3472:	28 f4       	brcc	.+10     	; 0x347e <__ftoa_engine+0x9c>
    3474:	e7 0e       	add	r14, r23
    3476:	f8 1e       	adc	r15, r24
    3478:	49 1f       	adc	r20, r25
    347a:	56 1f       	adc	r21, r22
    347c:	c1 1d       	adc	r28, r1
    347e:	77 0f       	add	r23, r23
    3480:	88 1f       	adc	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	66 1f       	adc	r22, r22
    3486:	06 94       	lsr	r0
    3488:	a1 f7       	brne	.-24     	; 0x3472 <__ftoa_engine+0x90>
    348a:	05 90       	lpm	r0, Z+
    348c:	07 94       	ror	r0
    348e:	28 f4       	brcc	.+10     	; 0x349a <__ftoa_engine+0xb8>
    3490:	f8 0e       	add	r15, r24
    3492:	49 1f       	adc	r20, r25
    3494:	56 1f       	adc	r21, r22
    3496:	c7 1f       	adc	r28, r23
    3498:	d1 1d       	adc	r29, r1
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	66 1f       	adc	r22, r22
    34a0:	77 1f       	adc	r23, r23
    34a2:	06 94       	lsr	r0
    34a4:	a1 f7       	brne	.-24     	; 0x348e <__ftoa_engine+0xac>
    34a6:	05 90       	lpm	r0, Z+
    34a8:	07 94       	ror	r0
    34aa:	20 f4       	brcc	.+8      	; 0x34b4 <__ftoa_engine+0xd2>
    34ac:	49 0f       	add	r20, r25
    34ae:	56 1f       	adc	r21, r22
    34b0:	c7 1f       	adc	r28, r23
    34b2:	d8 1f       	adc	r29, r24
    34b4:	99 0f       	add	r25, r25
    34b6:	66 1f       	adc	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	88 1f       	adc	r24, r24
    34bc:	06 94       	lsr	r0
    34be:	a9 f7       	brne	.-22     	; 0x34aa <__ftoa_engine+0xc8>
    34c0:	84 91       	lpm	r24, Z
    34c2:	10 95       	com	r17
    34c4:	17 70       	andi	r17, 0x07	; 7
    34c6:	41 f0       	breq	.+16     	; 0x34d8 <__ftoa_engine+0xf6>
    34c8:	d6 95       	lsr	r29
    34ca:	c7 95       	ror	r28
    34cc:	57 95       	ror	r21
    34ce:	47 95       	ror	r20
    34d0:	f7 94       	ror	r15
    34d2:	e7 94       	ror	r14
    34d4:	1a 95       	dec	r17
    34d6:	c1 f7       	brne	.-16     	; 0x34c8 <__ftoa_engine+0xe6>
    34d8:	ed e6       	ldi	r30, 0x6D	; 109
    34da:	f9 e0       	ldi	r31, 0x09	; 9
    34dc:	68 94       	set
    34de:	15 90       	lpm	r1, Z+
    34e0:	15 91       	lpm	r17, Z+
    34e2:	35 91       	lpm	r19, Z+
    34e4:	65 91       	lpm	r22, Z+
    34e6:	95 91       	lpm	r25, Z+
    34e8:	05 90       	lpm	r0, Z+
    34ea:	7f e2       	ldi	r23, 0x2F	; 47
    34ec:	73 95       	inc	r23
    34ee:	e1 18       	sub	r14, r1
    34f0:	f1 0a       	sbc	r15, r17
    34f2:	43 0b       	sbc	r20, r19
    34f4:	56 0b       	sbc	r21, r22
    34f6:	c9 0b       	sbc	r28, r25
    34f8:	d0 09       	sbc	r29, r0
    34fa:	c0 f7       	brcc	.-16     	; 0x34ec <__ftoa_engine+0x10a>
    34fc:	e1 0c       	add	r14, r1
    34fe:	f1 1e       	adc	r15, r17
    3500:	43 1f       	adc	r20, r19
    3502:	56 1f       	adc	r21, r22
    3504:	c9 1f       	adc	r28, r25
    3506:	d0 1d       	adc	r29, r0
    3508:	7e f4       	brtc	.+30     	; 0x3528 <__ftoa_engine+0x146>
    350a:	70 33       	cpi	r23, 0x30	; 48
    350c:	11 f4       	brne	.+4      	; 0x3512 <__ftoa_engine+0x130>
    350e:	8a 95       	dec	r24
    3510:	e6 cf       	rjmp	.-52     	; 0x34de <__ftoa_engine+0xfc>
    3512:	e8 94       	clt
    3514:	01 50       	subi	r16, 0x01	; 1
    3516:	30 f0       	brcs	.+12     	; 0x3524 <__ftoa_engine+0x142>
    3518:	08 0f       	add	r16, r24
    351a:	0a f4       	brpl	.+2      	; 0x351e <__ftoa_engine+0x13c>
    351c:	00 27       	eor	r16, r16
    351e:	02 17       	cp	r16, r18
    3520:	08 f4       	brcc	.+2      	; 0x3524 <__ftoa_engine+0x142>
    3522:	20 2f       	mov	r18, r16
    3524:	23 95       	inc	r18
    3526:	02 2f       	mov	r16, r18
    3528:	7a 33       	cpi	r23, 0x3A	; 58
    352a:	28 f0       	brcs	.+10     	; 0x3536 <__ftoa_engine+0x154>
    352c:	79 e3       	ldi	r23, 0x39	; 57
    352e:	7d 93       	st	X+, r23
    3530:	2a 95       	dec	r18
    3532:	e9 f7       	brne	.-6      	; 0x352e <__ftoa_engine+0x14c>
    3534:	10 c0       	rjmp	.+32     	; 0x3556 <__ftoa_engine+0x174>
    3536:	7d 93       	st	X+, r23
    3538:	2a 95       	dec	r18
    353a:	89 f6       	brne	.-94     	; 0x34de <__ftoa_engine+0xfc>
    353c:	06 94       	lsr	r0
    353e:	97 95       	ror	r25
    3540:	67 95       	ror	r22
    3542:	37 95       	ror	r19
    3544:	17 95       	ror	r17
    3546:	17 94       	ror	r1
    3548:	e1 18       	sub	r14, r1
    354a:	f1 0a       	sbc	r15, r17
    354c:	43 0b       	sbc	r20, r19
    354e:	56 0b       	sbc	r21, r22
    3550:	c9 0b       	sbc	r28, r25
    3552:	d0 09       	sbc	r29, r0
    3554:	98 f0       	brcs	.+38     	; 0x357c <__ftoa_engine+0x19a>
    3556:	23 95       	inc	r18
    3558:	7e 91       	ld	r23, -X
    355a:	73 95       	inc	r23
    355c:	7a 33       	cpi	r23, 0x3A	; 58
    355e:	08 f0       	brcs	.+2      	; 0x3562 <__ftoa_engine+0x180>
    3560:	70 e3       	ldi	r23, 0x30	; 48
    3562:	7c 93       	st	X, r23
    3564:	20 13       	cpse	r18, r16
    3566:	b8 f7       	brcc	.-18     	; 0x3556 <__ftoa_engine+0x174>
    3568:	7e 91       	ld	r23, -X
    356a:	70 61       	ori	r23, 0x10	; 16
    356c:	7d 93       	st	X+, r23
    356e:	30 f0       	brcs	.+12     	; 0x357c <__ftoa_engine+0x19a>
    3570:	83 95       	inc	r24
    3572:	71 e3       	ldi	r23, 0x31	; 49
    3574:	7d 93       	st	X+, r23
    3576:	70 e3       	ldi	r23, 0x30	; 48
    3578:	2a 95       	dec	r18
    357a:	e1 f7       	brne	.-8      	; 0x3574 <__ftoa_engine+0x192>
    357c:	11 24       	eor	r1, r1
    357e:	ef 90       	pop	r14
    3580:	ff 90       	pop	r15
    3582:	0f 91       	pop	r16
    3584:	1f 91       	pop	r17
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	99 27       	eor	r25, r25
    358c:	87 fd       	sbrc	r24, 7
    358e:	90 95       	com	r25
    3590:	08 95       	ret

00003592 <_exit>:
    3592:	f8 94       	cli

00003594 <__stop_program>:
    3594:	ff cf       	rjmp	.-2      	; 0x3594 <__stop_program>
